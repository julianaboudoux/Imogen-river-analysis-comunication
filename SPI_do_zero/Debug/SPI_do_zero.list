
SPI_do_zero.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009484  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  08009728  08009728  0000a728  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009c3c  08009c3c  0000ac3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009c44  08009c44  0000ac44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009c48  08009c48  0000ac48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000003f0  24000000  08009c4c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000061c  240003f0  0800a03c  0000b3f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000a0c  0800a03c  0000ba0c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b3f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000d631  00000000  00000000  0000b41e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001fb9  00000000  00000000  00018a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b28  00000000  00000000  0001aa08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000851  00000000  00000000  0001b530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037ebf  00000000  00000000  0001bd81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e80d  00000000  00000000  00053c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015f8b0  00000000  00000000  0006244d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c1cfd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000408c  00000000  00000000  001c1d40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  001c5dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240003f0 	.word	0x240003f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800970c 	.word	0x0800970c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240003f4 	.word	0x240003f4
 80002dc:	0800970c 	.word	0x0800970c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_d2lz>:
 8000708:	b508      	push	{r3, lr}
 800070a:	4602      	mov	r2, r0
 800070c:	460b      	mov	r3, r1
 800070e:	ec43 2b17 	vmov	d7, r2, r3
 8000712:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800071a:	d403      	bmi.n	8000724 <__aeabi_d2lz+0x1c>
 800071c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000720:	f000 b80a 	b.w	8000738 <__aeabi_d2ulz>
 8000724:	eeb1 7b47 	vneg.f64	d7, d7
 8000728:	ec51 0b17 	vmov	r0, r1, d7
 800072c:	f000 f804 	bl	8000738 <__aeabi_d2ulz>
 8000730:	4240      	negs	r0, r0
 8000732:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000736:	bd08      	pop	{r3, pc}

08000738 <__aeabi_d2ulz>:
 8000738:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000768 <__aeabi_d2ulz+0x30>
 800073c:	ec41 0b17 	vmov	d7, r0, r1
 8000740:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000770 <__aeabi_d2ulz+0x38>
 8000744:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000748:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800074c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000750:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000754:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000758:	ee16 1a10 	vmov	r1, s12
 800075c:	ee17 0a90 	vmov	r0, s15
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	f3af 8000 	nop.w
 8000768:	00000000 	.word	0x00000000
 800076c:	3df00000 	.word	0x3df00000
 8000770:	00000000 	.word	0x00000000
 8000774:	41f00000 	.word	0x41f00000

08000778 <SPI_send_byte>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void SPI_send_byte(uint8_t byte) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2140      	movs	r1, #64	@ 0x40
 8000786:	4809      	ldr	r0, [pc, #36]	@ (80007ac <SPI_send_byte+0x34>)
 8000788:	f001 fa80 	bl	8001c8c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &byte, 1, HAL_MAX_DELAY);
 800078c:	1df9      	adds	r1, r7, #7
 800078e:	f04f 33ff 	mov.w	r3, #4294967295
 8000792:	2201      	movs	r2, #1
 8000794:	4806      	ldr	r0, [pc, #24]	@ (80007b0 <SPI_send_byte+0x38>)
 8000796:	f004 fa1b 	bl	8004bd0 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	2140      	movs	r1, #64	@ 0x40
 800079e:	4803      	ldr	r0, [pc, #12]	@ (80007ac <SPI_send_byte+0x34>)
 80007a0:	f001 fa74 	bl	8001c8c <HAL_GPIO_WritePin>
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	58020000 	.word	0x58020000
 80007b0:	24000830 	.word	0x24000830

080007b4 <SPI_send_data>:

void SPI_send_data(char* data, size_t size_of_data) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2140      	movs	r1, #64	@ 0x40
 80007c2:	480a      	ldr	r0, [pc, #40]	@ (80007ec <SPI_send_data+0x38>)
 80007c4:	f001 fa62 	bl	8001c8c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data, size_of_data, HAL_MAX_DELAY);
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	f04f 33ff 	mov.w	r3, #4294967295
 80007d0:	6879      	ldr	r1, [r7, #4]
 80007d2:	4807      	ldr	r0, [pc, #28]	@ (80007f0 <SPI_send_data+0x3c>)
 80007d4:	f004 f9fc 	bl	8004bd0 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	2140      	movs	r1, #64	@ 0x40
 80007dc:	4803      	ldr	r0, [pc, #12]	@ (80007ec <SPI_send_data+0x38>)
 80007de:	f001 fa55 	bl	8001c8c <HAL_GPIO_WritePin>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	58020000 	.word	0x58020000
 80007f0:	24000830 	.word	0x24000830

080007f4 <generate_json>:
 * Generates a JSON string from station data that matches the API specification.
 * station Pointer to the Station data structure.
 * json_out Output buffer for the JSON string.
 * max_size Maximum size of the output buffer.
 */
void generate_json(Station* station, char* json_out, size_t max_size) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	f5ad 6dab 	sub.w	sp, sp, #1368	@ 0x558
 80007fa:	af06      	add	r7, sp, #24
 80007fc:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8000800:	f2a3 5334 	subw	r3, r3, #1332	@ 0x534
 8000804:	6018      	str	r0, [r3, #0]
 8000806:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 800080a:	f5a3 63a7 	sub.w	r3, r3, #1336	@ 0x538
 800080e:	6019      	str	r1, [r3, #0]
 8000810:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8000814:	f2a3 533c 	subw	r3, r3, #1340	@ 0x53c
 8000818:	601a      	str	r2, [r3, #0]
    char temp_buffer[1024];
    char sensor_buffer[256];
    char timestamp_buffer[32];

    // Get current time formatted as ISO 8601 string
    get_current_timestamp(timestamp_buffer, sizeof(timestamp_buffer));
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	2120      	movs	r1, #32
 8000820:	4618      	mov	r0, r3
 8000822:	f000 f90f 	bl	8000a44 <get_current_timestamp>

    // Start building the main JSON object
    snprintf(json_out, max_size, "{\"timestamp\":\"%s\",\"stations\":[", timestamp_buffer);
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	f507 62a8 	add.w	r2, r7, #1344	@ 0x540
 800082e:	f2a2 513c 	subw	r1, r2, #1340	@ 0x53c
 8000832:	f507 62a8 	add.w	r2, r7, #1344	@ 0x540
 8000836:	f5a2 60a7 	sub.w	r0, r2, #1336	@ 0x538
 800083a:	4a7c      	ldr	r2, [pc, #496]	@ (8000a2c <generate_json+0x238>)
 800083c:	6809      	ldr	r1, [r1, #0]
 800083e:	6800      	ldr	r0, [r0, #0]
 8000840:	f005 fb9c 	bl	8005f7c <sniprintf>

    // Add station data
    snprintf(temp_buffer, sizeof(temp_buffer),
        "{\"name\":\"%s\",\"latitude\":%.4f,\"longitude\":%.4f,\"elevationM\":%.1f,\"sensors\":[",
        station->name, station->latitude, station->longitude, station->elevationM);
 8000844:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8000848:	f2a3 5334 	subw	r3, r3, #1332	@ 0x534
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8000852:	f2a3 5334 	subw	r3, r3, #1332	@ 0x534
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	edd3 7a04 	vldr	s15, [r3, #16]
    snprintf(temp_buffer, sizeof(temp_buffer),
 800085c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
        station->name, station->latitude, station->longitude, station->elevationM);
 8000860:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8000864:	f2a3 5334 	subw	r3, r3, #1332	@ 0x534
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	edd3 6a05 	vldr	s13, [r3, #20]
    snprintf(temp_buffer, sizeof(temp_buffer),
 800086e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
        station->name, station->latitude, station->longitude, station->elevationM);
 8000872:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8000876:	f2a3 5334 	subw	r3, r3, #1332	@ 0x534
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	edd3 5a06 	vldr	s11, [r3, #24]
    snprintf(temp_buffer, sizeof(temp_buffer),
 8000880:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000884:	f507 709a 	add.w	r0, r7, #308	@ 0x134
 8000888:	ed8d 5b04 	vstr	d5, [sp, #16]
 800088c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000890:	ed8d 7b00 	vstr	d7, [sp]
 8000894:	4613      	mov	r3, r2
 8000896:	4a66      	ldr	r2, [pc, #408]	@ (8000a30 <generate_json+0x23c>)
 8000898:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800089c:	f005 fb6e 	bl	8005f7c <sniprintf>
    strncat(json_out, temp_buffer, max_size - strlen(json_out) - 1);
 80008a0:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 80008a4:	f5a3 63a7 	sub.w	r3, r3, #1336	@ 0x538
 80008a8:	6818      	ldr	r0, [r3, #0]
 80008aa:	f7ff fd69 	bl	8000380 <strlen>
 80008ae:	4602      	mov	r2, r0
 80008b0:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 80008b4:	f2a3 533c 	subw	r3, r3, #1340	@ 0x53c
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	1a9b      	subs	r3, r3, r2
 80008bc:	1e5a      	subs	r2, r3, #1
 80008be:	f507 719a 	add.w	r1, r7, #308	@ 0x134
 80008c2:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 80008c6:	f5a3 63a7 	sub.w	r3, r3, #1336	@ 0x538
 80008ca:	6818      	ldr	r0, [r3, #0]
 80008cc:	f005 fbf9 	bl	80060c2 <strncat>

    // Add sensor data
    int first_sensor = 1;
 80008d0:	2301      	movs	r3, #1
 80008d2:	f8c7 353c 	str.w	r3, [r7, #1340]	@ 0x53c
    for (int j = 0; j < station->num_sensors; j++) {
 80008d6:	2300      	movs	r3, #0
 80008d8:	f8c7 3538 	str.w	r3, [r7, #1336]	@ 0x538
 80008dc:	e066      	b.n	80009ac <generate_json+0x1b8>
        Sensor* s = &station->sensors[j];
 80008de:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 80008e2:	f2a3 5134 	subw	r1, r3, #1332	@ 0x534
 80008e6:	f8d7 2538 	ldr.w	r2, [r7, #1336]	@ 0x538
 80008ea:	4613      	mov	r3, r2
 80008ec:	00db      	lsls	r3, r3, #3
 80008ee:	1a9b      	subs	r3, r3, r2
 80008f0:	00db      	lsls	r3, r3, #3
 80008f2:	3318      	adds	r3, #24
 80008f4:	680a      	ldr	r2, [r1, #0]
 80008f6:	4413      	add	r3, r2
 80008f8:	3304      	adds	r3, #4
 80008fa:	f8c7 3534 	str.w	r3, [r7, #1332]	@ 0x534
        if (s->available) { // Only add sensors with available data
 80008fe:	f8d7 3534 	ldr.w	r3, [r7, #1332]	@ 0x534
 8000902:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000906:	2b00      	cmp	r3, #0
 8000908:	d04b      	beq.n	80009a2 <generate_json+0x1ae>
            if (!first_sensor) {
 800090a:	f8d7 353c 	ldr.w	r3, [r7, #1340]	@ 0x53c
 800090e:	2b00      	cmp	r3, #0
 8000910:	d116      	bne.n	8000940 <generate_json+0x14c>
                strncat(json_out, ",", max_size - strlen(json_out) - 1);
 8000912:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8000916:	f5a3 63a7 	sub.w	r3, r3, #1336	@ 0x538
 800091a:	6818      	ldr	r0, [r3, #0]
 800091c:	f7ff fd30 	bl	8000380 <strlen>
 8000920:	4602      	mov	r2, r0
 8000922:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8000926:	f2a3 533c 	subw	r3, r3, #1340	@ 0x53c
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	1a9b      	subs	r3, r3, r2
 800092e:	1e5a      	subs	r2, r3, #1
 8000930:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8000934:	f5a3 63a7 	sub.w	r3, r3, #1336	@ 0x538
 8000938:	493e      	ldr	r1, [pc, #248]	@ (8000a34 <generate_json+0x240>)
 800093a:	6818      	ldr	r0, [r3, #0]
 800093c:	f005 fbc1 	bl	80060c2 <strncat>
            }
            snprintf(sensor_buffer, sizeof(sensor_buffer),
                "{\"type\":\"%s\",\"unit\":\"%s\",\"value\":%.2f}",
                s->type, s->unit, s->value);
 8000940:	f8d7 1534 	ldr.w	r1, [r7, #1332]	@ 0x534
 8000944:	f8d7 3534 	ldr.w	r3, [r7, #1332]	@ 0x534
 8000948:	3320      	adds	r3, #32
 800094a:	f8d7 2534 	ldr.w	r2, [r7, #1332]	@ 0x534
 800094e:	edd2 7a0c 	vldr	s15, [r2, #48]	@ 0x30
            snprintf(sensor_buffer, sizeof(sensor_buffer),
 8000952:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000956:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800095a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	460b      	mov	r3, r1
 8000962:	4a35      	ldr	r2, [pc, #212]	@ (8000a38 <generate_json+0x244>)
 8000964:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000968:	f005 fb08 	bl	8005f7c <sniprintf>
            strncat(json_out, sensor_buffer, max_size - strlen(json_out) - 1);
 800096c:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8000970:	f5a3 63a7 	sub.w	r3, r3, #1336	@ 0x538
 8000974:	6818      	ldr	r0, [r3, #0]
 8000976:	f7ff fd03 	bl	8000380 <strlen>
 800097a:	4602      	mov	r2, r0
 800097c:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8000980:	f2a3 533c 	subw	r3, r3, #1340	@ 0x53c
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	1a9b      	subs	r3, r3, r2
 8000988:	1e5a      	subs	r2, r3, #1
 800098a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800098e:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8000992:	f5a3 63a7 	sub.w	r3, r3, #1336	@ 0x538
 8000996:	6818      	ldr	r0, [r3, #0]
 8000998:	f005 fb93 	bl	80060c2 <strncat>
            first_sensor = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	f8c7 353c 	str.w	r3, [r7, #1340]	@ 0x53c
    for (int j = 0; j < station->num_sensors; j++) {
 80009a2:	f8d7 3538 	ldr.w	r3, [r7, #1336]	@ 0x538
 80009a6:	3301      	adds	r3, #1
 80009a8:	f8c7 3538 	str.w	r3, [r7, #1336]	@ 0x538
 80009ac:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 80009b0:	f2a3 5334 	subw	r3, r3, #1332	@ 0x534
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f893 3214 	ldrb.w	r3, [r3, #532]	@ 0x214
 80009ba:	461a      	mov	r2, r3
 80009bc:	f8d7 3538 	ldr.w	r3, [r7, #1336]	@ 0x538
 80009c0:	4293      	cmp	r3, r2
 80009c2:	db8c      	blt.n	80008de <generate_json+0xea>
        }
    }

    // Close all JSON structures
    strncat(json_out, "]}]}", max_size - strlen(json_out) - 1);
 80009c4:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 80009c8:	f5a3 63a7 	sub.w	r3, r3, #1336	@ 0x538
 80009cc:	6818      	ldr	r0, [r3, #0]
 80009ce:	f7ff fcd7 	bl	8000380 <strlen>
 80009d2:	4602      	mov	r2, r0
 80009d4:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 80009d8:	f2a3 533c 	subw	r3, r3, #1340	@ 0x53c
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	1a9b      	subs	r3, r3, r2
 80009e0:	1e5a      	subs	r2, r3, #1
 80009e2:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 80009e6:	f5a3 63a7 	sub.w	r3, r3, #1336	@ 0x538
 80009ea:	4914      	ldr	r1, [pc, #80]	@ (8000a3c <generate_json+0x248>)
 80009ec:	6818      	ldr	r0, [r3, #0]
 80009ee:	f005 fb68 	bl	80060c2 <strncat>
    // Add the special end character
    strncat(json_out, "~", max_size - strlen(json_out) - 1);
 80009f2:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 80009f6:	f5a3 63a7 	sub.w	r3, r3, #1336	@ 0x538
 80009fa:	6818      	ldr	r0, [r3, #0]
 80009fc:	f7ff fcc0 	bl	8000380 <strlen>
 8000a00:	4602      	mov	r2, r0
 8000a02:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8000a06:	f2a3 533c 	subw	r3, r3, #1340	@ 0x53c
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	1a9b      	subs	r3, r3, r2
 8000a0e:	1e5a      	subs	r2, r3, #1
 8000a10:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8000a14:	f5a3 63a7 	sub.w	r3, r3, #1336	@ 0x538
 8000a18:	4909      	ldr	r1, [pc, #36]	@ (8000a40 <generate_json+0x24c>)
 8000a1a:	6818      	ldr	r0, [r3, #0]
 8000a1c:	f005 fb51 	bl	80060c2 <strncat>
}
 8000a20:	bf00      	nop
 8000a22:	f507 67a8 	add.w	r7, r7, #1344	@ 0x540
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	08009728 	.word	0x08009728
 8000a30:	08009748 	.word	0x08009748
 8000a34:	08009794 	.word	0x08009794
 8000a38:	08009798 	.word	0x08009798
 8000a3c:	080097c0 	.word	0x080097c0
 8000a40:	080097c8 	.word	0x080097c8

08000a44 <get_current_timestamp>:
 * Generates a fake ISO 8601 timestamp.
 * In a real application, this should come from an RTC (Real-Time Clock).
 * buffer Output buffer for the timestamp string.
 * size Size of the buffer.
 */
void get_current_timestamp(char* buffer, size_t size) {
 8000a44:	b5b0      	push	{r4, r5, r7, lr}
 8000a46:	b08e      	sub	sp, #56	@ 0x38
 8000a48:	af04      	add	r7, sp, #16
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]

	    RTC_TimeTypeDef sTime = {0};
 8000a4e:	f107 0310 	add.w	r3, r7, #16
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]
	    RTC_DateTypeDef sDate = {0};
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]

	    if (size < 20)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	2b13      	cmp	r3, #19
 8000a66:	d933      	bls.n	8000ad0 <get_current_timestamp+0x8c>
	    {//erro
	        return;
	    }
	    HAL_StatusTypeDef time_status = HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000a68:	f107 0310 	add.w	r3, r7, #16
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4819      	ldr	r0, [pc, #100]	@ (8000ad8 <get_current_timestamp+0x94>)
 8000a72:	f003 fd87 	bl	8004584 <HAL_RTC_GetTime>
 8000a76:	4603      	mov	r3, r0
 8000a78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	    HAL_StatusTypeDef date_status = HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000a7c:	f107 030c 	add.w	r3, r7, #12
 8000a80:	2200      	movs	r2, #0
 8000a82:	4619      	mov	r1, r3
 8000a84:	4814      	ldr	r0, [pc, #80]	@ (8000ad8 <get_current_timestamp+0x94>)
 8000a86:	f003 fe61 	bl	800474c <HAL_RTC_GetDate>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	    if (time_status != HAL_OK || date_status != HAL_OK)
 8000a90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d103      	bne.n	8000aa0 <get_current_timestamp+0x5c>
 8000a98:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d004      	beq.n	8000aaa <get_current_timestamp+0x66>
	    {
	        // Handle error in reading RTC data
	        sprintf(buffer, "Error Reading RTC");
 8000aa0:	490e      	ldr	r1, [pc, #56]	@ (8000adc <get_current_timestamp+0x98>)
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f005 faa0 	bl	8005fe8 <siprintf>
	    {
	        sprintf(buffer, "20%02d-%02d-%02d %02d:%02d:%02d",
	        sDate.Year, sDate.Month, sDate.Date,
	        sTime.Hours, sTime.Minutes, sTime.Seconds);
	    }
	    return;
 8000aa8:	e013      	b.n	8000ad2 <get_current_timestamp+0x8e>
	        sDate.Year, sDate.Month, sDate.Date,
 8000aaa:	7bfb      	ldrb	r3, [r7, #15]
	        sprintf(buffer, "20%02d-%02d-%02d %02d:%02d:%02d",
 8000aac:	461c      	mov	r4, r3
	        sDate.Year, sDate.Month, sDate.Date,
 8000aae:	7b7b      	ldrb	r3, [r7, #13]
	        sprintf(buffer, "20%02d-%02d-%02d %02d:%02d:%02d",
 8000ab0:	461d      	mov	r5, r3
	        sDate.Year, sDate.Month, sDate.Date,
 8000ab2:	7bbb      	ldrb	r3, [r7, #14]
	        sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000ab4:	7c3a      	ldrb	r2, [r7, #16]
 8000ab6:	7c79      	ldrb	r1, [r7, #17]
 8000ab8:	7cb8      	ldrb	r0, [r7, #18]
	        sprintf(buffer, "20%02d-%02d-%02d %02d:%02d:%02d",
 8000aba:	9003      	str	r0, [sp, #12]
 8000abc:	9102      	str	r1, [sp, #8]
 8000abe:	9201      	str	r2, [sp, #4]
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	462b      	mov	r3, r5
 8000ac4:	4622      	mov	r2, r4
 8000ac6:	4906      	ldr	r1, [pc, #24]	@ (8000ae0 <get_current_timestamp+0x9c>)
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f005 fa8d 	bl	8005fe8 <siprintf>
	    return;
 8000ace:	e000      	b.n	8000ad2 <get_current_timestamp+0x8e>
	        return;
 8000ad0:	bf00      	nop

}
 8000ad2:	3728      	adds	r7, #40	@ 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ad8:	2400080c 	.word	0x2400080c
 8000adc:	080097cc 	.word	0x080097cc
 8000ae0:	080097e0 	.word	0x080097e0

08000ae4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae8:	f000 fd7a 	bl	80015e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aec:	f000 f828 	bl	8000b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000af0:	f000 f968 	bl	8000dc4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000af4:	f000 f90e 	bl	8000d14 <MX_SPI1_Init>
  MX_RTC_Init();
 8000af8:	f000 f8b0 	bl	8000c5c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  while(1) {

	  generate_json(&station1, json_buffer, strlen(json_buffer));
 8000afc:	480e      	ldr	r0, [pc, #56]	@ (8000b38 <main+0x54>)
 8000afe:	f7ff fc3f 	bl	8000380 <strlen>
 8000b02:	4603      	mov	r3, r0
 8000b04:	461a      	mov	r2, r3
 8000b06:	490c      	ldr	r1, [pc, #48]	@ (8000b38 <main+0x54>)
 8000b08:	480c      	ldr	r0, [pc, #48]	@ (8000b3c <main+0x58>)
 8000b0a:	f7ff fe73 	bl	80007f4 <generate_json>

	  HAL_Delay(500);
 8000b0e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b12:	f000 fdf7 	bl	8001704 <HAL_Delay>
	  SPI_send_byte(0xA0);
 8000b16:	20a0      	movs	r0, #160	@ 0xa0
 8000b18:	f7ff fe2e 	bl	8000778 <SPI_send_byte>

	  SPI_send_data(json_buffer, strlen(json_buffer));
 8000b1c:	4806      	ldr	r0, [pc, #24]	@ (8000b38 <main+0x54>)
 8000b1e:	f7ff fc2f 	bl	8000380 <strlen>
 8000b22:	4603      	mov	r3, r0
 8000b24:	4619      	mov	r1, r3
 8000b26:	4804      	ldr	r0, [pc, #16]	@ (8000b38 <main+0x54>)
 8000b28:	f7ff fe44 	bl	80007b4 <SPI_send_data>

	  HAL_Delay(15000);
 8000b2c:	f643 2098 	movw	r0, #15000	@ 0x3a98
 8000b30:	f000 fde8 	bl	8001704 <HAL_Delay>
	  generate_json(&station1, json_buffer, strlen(json_buffer));
 8000b34:	bf00      	nop
 8000b36:	e7e1      	b.n	8000afc <main+0x18>
 8000b38:	2400040c 	.word	0x2400040c
 8000b3c:	24000000 	.word	0x24000000

08000b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b09c      	sub	sp, #112	@ 0x70
 8000b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b4a:	224c      	movs	r2, #76	@ 0x4c
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f005 faaf 	bl	80060b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2220      	movs	r2, #32
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f005 faa9 	bl	80060b2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b60:	2002      	movs	r0, #2
 8000b62:	f001 f8bd 	bl	8001ce0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b66:	2300      	movs	r3, #0
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	4b39      	ldr	r3, [pc, #228]	@ (8000c50 <SystemClock_Config+0x110>)
 8000b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b6e:	4a38      	ldr	r2, [pc, #224]	@ (8000c50 <SystemClock_Config+0x110>)
 8000b70:	f023 0301 	bic.w	r3, r3, #1
 8000b74:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000b76:	4b36      	ldr	r3, [pc, #216]	@ (8000c50 <SystemClock_Config+0x110>)
 8000b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	4b34      	ldr	r3, [pc, #208]	@ (8000c54 <SystemClock_Config+0x114>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b88:	4a32      	ldr	r2, [pc, #200]	@ (8000c54 <SystemClock_Config+0x114>)
 8000b8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b30      	ldr	r3, [pc, #192]	@ (8000c54 <SystemClock_Config+0x114>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b9c:	bf00      	nop
 8000b9e:	4b2d      	ldr	r3, [pc, #180]	@ (8000c54 <SystemClock_Config+0x114>)
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ba6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000baa:	d1f8      	bne.n	8000b9e <SystemClock_Config+0x5e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000bac:	f001 f888 	bl	8001cc0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000bb0:	f000 fdcc 	bl	800174c <HAL_GetREVID>
 8000bb4:	4b28      	ldr	r3, [pc, #160]	@ (8000c58 <SystemClock_Config+0x118>)
 8000bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000bb8:	4a27      	ldr	r2, [pc, #156]	@ (8000c58 <SystemClock_Config+0x118>)
 8000bba:	f023 0318 	bic.w	r3, r3, #24
 8000bbe:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000bc0:	2307      	movs	r3, #7
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bc4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bd2:	2340      	movs	r3, #64	@ 0x40
 8000bd4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bde:	2301      	movs	r3, #1
 8000be0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000be2:	2318      	movs	r3, #24
 8000be4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000be6:	2302      	movs	r3, #2
 8000be8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bea:	2304      	movs	r3, #4
 8000bec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bf2:	230c      	movs	r3, #12
 8000bf4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c02:	4618      	mov	r0, r3
 8000c04:	f001 f8a6 	bl	8001d54 <HAL_RCC_OscConfig>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000c0e:	f000 fa2d 	bl	800106c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c12:	233f      	movs	r3, #63	@ 0x3f
 8000c14:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	2101      	movs	r1, #1
 8000c36:	4618      	mov	r0, r3
 8000c38:	f001 fce6 	bl	8002608 <HAL_RCC_ClockConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <SystemClock_Config+0x106>
  {
    Error_Handler();
 8000c42:	f000 fa13 	bl	800106c <Error_Handler>
  }
}
 8000c46:	bf00      	nop
 8000c48:	3770      	adds	r7, #112	@ 0x70
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	58000400 	.word	0x58000400
 8000c54:	58024800 	.word	0x58024800
 8000c58:	58024400 	.word	0x58024400

08000c5c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c70:	2300      	movs	r3, #0
 8000c72:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c74:	4b25      	ldr	r3, [pc, #148]	@ (8000d0c <MX_RTC_Init+0xb0>)
 8000c76:	4a26      	ldr	r2, [pc, #152]	@ (8000d10 <MX_RTC_Init+0xb4>)
 8000c78:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c7a:	4b24      	ldr	r3, [pc, #144]	@ (8000d0c <MX_RTC_Init+0xb0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c80:	4b22      	ldr	r3, [pc, #136]	@ (8000d0c <MX_RTC_Init+0xb0>)
 8000c82:	227f      	movs	r2, #127	@ 0x7f
 8000c84:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c86:	4b21      	ldr	r3, [pc, #132]	@ (8000d0c <MX_RTC_Init+0xb0>)
 8000c88:	22ff      	movs	r2, #255	@ 0xff
 8000c8a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d0c <MX_RTC_Init+0xb0>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c92:	4b1e      	ldr	r3, [pc, #120]	@ (8000d0c <MX_RTC_Init+0xb0>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c98:	4b1c      	ldr	r3, [pc, #112]	@ (8000d0c <MX_RTC_Init+0xb0>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000d0c <MX_RTC_Init+0xb0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ca4:	4819      	ldr	r0, [pc, #100]	@ (8000d0c <MX_RTC_Init+0xb0>)
 8000ca6:	f003 fb4d 	bl	8004344 <HAL_RTC_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000cb0:	f000 f9dc 	bl	800106c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4619      	mov	r1, r3
 8000cce:	480f      	ldr	r0, [pc, #60]	@ (8000d0c <MX_RTC_Init+0xb0>)
 8000cd0:	f003 fbba 	bl	8004448 <HAL_RTC_SetTime>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000cda:	f000 f9c7 	bl	800106c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000cee:	463b      	mov	r3, r7
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <MX_RTC_Init+0xb0>)
 8000cf6:	f003 fca1 	bl	800463c <HAL_RTC_SetDate>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000d00:	f000 f9b4 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d04:	bf00      	nop
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	2400080c 	.word	0x2400080c
 8000d10:	58004000 	.word	0x58004000

08000d14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d18:	4b28      	ldr	r3, [pc, #160]	@ (8000dbc <MX_SPI1_Init+0xa8>)
 8000d1a:	4a29      	ldr	r2, [pc, #164]	@ (8000dc0 <MX_SPI1_Init+0xac>)
 8000d1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d1e:	4b27      	ldr	r3, [pc, #156]	@ (8000dbc <MX_SPI1_Init+0xa8>)
 8000d20:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000d24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000d26:	4b25      	ldr	r3, [pc, #148]	@ (8000dbc <MX_SPI1_Init+0xa8>)
 8000d28:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d2c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d2e:	4b23      	ldr	r3, [pc, #140]	@ (8000dbc <MX_SPI1_Init+0xa8>)
 8000d30:	2207      	movs	r2, #7
 8000d32:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d34:	4b21      	ldr	r3, [pc, #132]	@ (8000dbc <MX_SPI1_Init+0xa8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d3a:	4b20      	ldr	r3, [pc, #128]	@ (8000dbc <MX_SPI1_Init+0xa8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d40:	4b1e      	ldr	r3, [pc, #120]	@ (8000dbc <MX_SPI1_Init+0xa8>)
 8000d42:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000d46:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000d48:	4b1c      	ldr	r3, [pc, #112]	@ (8000dbc <MX_SPI1_Init+0xa8>)
 8000d4a:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000d4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d50:	4b1a      	ldr	r3, [pc, #104]	@ (8000dbc <MX_SPI1_Init+0xa8>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d56:	4b19      	ldr	r3, [pc, #100]	@ (8000dbc <MX_SPI1_Init+0xa8>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d5c:	4b17      	ldr	r3, [pc, #92]	@ (8000dbc <MX_SPI1_Init+0xa8>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000d62:	4b16      	ldr	r3, [pc, #88]	@ (8000dbc <MX_SPI1_Init+0xa8>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d68:	4b14      	ldr	r3, [pc, #80]	@ (8000dbc <MX_SPI1_Init+0xa8>)
 8000d6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d6e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d70:	4b12      	ldr	r3, [pc, #72]	@ (8000dbc <MX_SPI1_Init+0xa8>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d76:	4b11      	ldr	r3, [pc, #68]	@ (8000dbc <MX_SPI1_Init+0xa8>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <MX_SPI1_Init+0xa8>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <MX_SPI1_Init+0xa8>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <MX_SPI1_Init+0xa8>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dbc <MX_SPI1_Init+0xa8>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d94:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <MX_SPI1_Init+0xa8>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d9a:	4b08      	ldr	r3, [pc, #32]	@ (8000dbc <MX_SPI1_Init+0xa8>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <MX_SPI1_Init+0xa8>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000da6:	4805      	ldr	r0, [pc, #20]	@ (8000dbc <MX_SPI1_Init+0xa8>)
 8000da8:	f003 fdee 	bl	8004988 <HAL_SPI_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000db2:	f000 f95b 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	24000830 	.word	0x24000830
 8000dc0:	40013000 	.word	0x40013000

08000dc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08c      	sub	sp, #48	@ 0x30
 8000dc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dda:	4b9d      	ldr	r3, [pc, #628]	@ (8001050 <MX_GPIO_Init+0x28c>)
 8000ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de0:	4a9b      	ldr	r2, [pc, #620]	@ (8001050 <MX_GPIO_Init+0x28c>)
 8000de2:	f043 0304 	orr.w	r3, r3, #4
 8000de6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dea:	4b99      	ldr	r3, [pc, #612]	@ (8001050 <MX_GPIO_Init+0x28c>)
 8000dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df0:	f003 0304 	and.w	r3, r3, #4
 8000df4:	61bb      	str	r3, [r7, #24]
 8000df6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000df8:	4b95      	ldr	r3, [pc, #596]	@ (8001050 <MX_GPIO_Init+0x28c>)
 8000dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dfe:	4a94      	ldr	r2, [pc, #592]	@ (8001050 <MX_GPIO_Init+0x28c>)
 8000e00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e08:	4b91      	ldr	r3, [pc, #580]	@ (8001050 <MX_GPIO_Init+0x28c>)
 8000e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	4b8e      	ldr	r3, [pc, #568]	@ (8001050 <MX_GPIO_Init+0x28c>)
 8000e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1c:	4a8c      	ldr	r2, [pc, #560]	@ (8001050 <MX_GPIO_Init+0x28c>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e26:	4b8a      	ldr	r3, [pc, #552]	@ (8001050 <MX_GPIO_Init+0x28c>)
 8000e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e34:	4b86      	ldr	r3, [pc, #536]	@ (8001050 <MX_GPIO_Init+0x28c>)
 8000e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e3a:	4a85      	ldr	r2, [pc, #532]	@ (8001050 <MX_GPIO_Init+0x28c>)
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e44:	4b82      	ldr	r3, [pc, #520]	@ (8001050 <MX_GPIO_Init+0x28c>)
 8000e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e52:	4b7f      	ldr	r3, [pc, #508]	@ (8001050 <MX_GPIO_Init+0x28c>)
 8000e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e58:	4a7d      	ldr	r2, [pc, #500]	@ (8001050 <MX_GPIO_Init+0x28c>)
 8000e5a:	f043 0308 	orr.w	r3, r3, #8
 8000e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e62:	4b7b      	ldr	r3, [pc, #492]	@ (8001050 <MX_GPIO_Init+0x28c>)
 8000e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e68:	f003 0308 	and.w	r3, r3, #8
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e70:	4b77      	ldr	r3, [pc, #476]	@ (8001050 <MX_GPIO_Init+0x28c>)
 8000e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e76:	4a76      	ldr	r2, [pc, #472]	@ (8001050 <MX_GPIO_Init+0x28c>)
 8000e78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e80:	4b73      	ldr	r3, [pc, #460]	@ (8001050 <MX_GPIO_Init+0x28c>)
 8000e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e8e:	4b70      	ldr	r3, [pc, #448]	@ (8001050 <MX_GPIO_Init+0x28c>)
 8000e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e94:	4a6e      	ldr	r2, [pc, #440]	@ (8001050 <MX_GPIO_Init+0x28c>)
 8000e96:	f043 0310 	orr.w	r3, r3, #16
 8000e9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e9e:	4b6c      	ldr	r3, [pc, #432]	@ (8001050 <MX_GPIO_Init+0x28c>)
 8000ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea4:	f003 0310 	and.w	r3, r3, #16
 8000ea8:	603b      	str	r3, [r7, #0]
 8000eaa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2140      	movs	r1, #64	@ 0x40
 8000eb0:	4868      	ldr	r0, [pc, #416]	@ (8001054 <MX_GPIO_Init+0x290>)
 8000eb2:	f000 feeb 	bl	8001c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000ebc:	4866      	ldr	r0, [pc, #408]	@ (8001058 <MX_GPIO_Init+0x294>)
 8000ebe:	f000 fee5 	bl	8001c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ec8:	4864      	ldr	r0, [pc, #400]	@ (800105c <MX_GPIO_Init+0x298>)
 8000eca:	f000 fedf 	bl	8001c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2102      	movs	r1, #2
 8000ed2:	4863      	ldr	r0, [pc, #396]	@ (8001060 <MX_GPIO_Init+0x29c>)
 8000ed4:	f000 feda 	bl	8001c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ed8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	f107 031c 	add.w	r3, r7, #28
 8000eea:	4619      	mov	r1, r3
 8000eec:	485d      	ldr	r0, [pc, #372]	@ (8001064 <MX_GPIO_Init+0x2a0>)
 8000eee:	f000 fd1d 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f02:	230b      	movs	r3, #11
 8000f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4855      	ldr	r0, [pc, #340]	@ (8001064 <MX_GPIO_Init+0x2a0>)
 8000f0e:	f000 fd0d 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000f12:	2306      	movs	r3, #6
 8000f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f22:	230b      	movs	r3, #11
 8000f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4849      	ldr	r0, [pc, #292]	@ (8001054 <MX_GPIO_Init+0x290>)
 8000f2e:	f000 fcfd 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f32:	2340      	movs	r3, #64	@ 0x40
 8000f34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f36:	2301      	movs	r3, #1
 8000f38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	f107 031c 	add.w	r3, r7, #28
 8000f46:	4619      	mov	r1, r3
 8000f48:	4842      	ldr	r0, [pc, #264]	@ (8001054 <MX_GPIO_Init+0x290>)
 8000f4a:	f000 fcef 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000f4e:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000f52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	4619      	mov	r1, r3
 8000f66:	483c      	ldr	r0, [pc, #240]	@ (8001058 <MX_GPIO_Init+0x294>)
 8000f68:	f000 fce0 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f7e:	230b      	movs	r3, #11
 8000f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f82:	f107 031c 	add.w	r3, r7, #28
 8000f86:	4619      	mov	r1, r3
 8000f88:	4833      	ldr	r0, [pc, #204]	@ (8001058 <MX_GPIO_Init+0x294>)
 8000f8a:	f000 fccf 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f8e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fa0:	2307      	movs	r3, #7
 8000fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	4619      	mov	r1, r3
 8000faa:	482c      	ldr	r0, [pc, #176]	@ (800105c <MX_GPIO_Init+0x298>)
 8000fac:	f000 fcbe 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000fb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4824      	ldr	r0, [pc, #144]	@ (800105c <MX_GPIO_Init+0x298>)
 8000fca:	f000 fcaf 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000fce:	2380      	movs	r3, #128	@ 0x80
 8000fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fd2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000fd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4821      	ldr	r0, [pc, #132]	@ (8001068 <MX_GPIO_Init+0x2a4>)
 8000fe4:	f000 fca2 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000fe8:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000ffa:	230a      	movs	r3, #10
 8000ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	4619      	mov	r1, r3
 8001004:	4813      	ldr	r0, [pc, #76]	@ (8001054 <MX_GPIO_Init+0x290>)
 8001006:	f000 fc91 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800100a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800100e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800101c:	230b      	movs	r3, #11
 800101e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	4619      	mov	r1, r3
 8001026:	4810      	ldr	r0, [pc, #64]	@ (8001068 <MX_GPIO_Init+0x2a4>)
 8001028:	f000 fc80 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800102c:	2302      	movs	r3, #2
 800102e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	4619      	mov	r1, r3
 8001042:	4807      	ldr	r0, [pc, #28]	@ (8001060 <MX_GPIO_Init+0x29c>)
 8001044:	f000 fc72 	bl	800192c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001048:	bf00      	nop
 800104a:	3730      	adds	r7, #48	@ 0x30
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	58024400 	.word	0x58024400
 8001054:	58020000 	.word	0x58020000
 8001058:	58020400 	.word	0x58020400
 800105c:	58020c00 	.word	0x58020c00
 8001060:	58021000 	.word	0x58021000
 8001064:	58020800 	.word	0x58020800
 8001068:	58021800 	.word	0x58021800

0800106c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001070:	b672      	cpsid	i
}
 8001072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <Error_Handler+0x8>

08001078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <HAL_MspInit+0x30>)
 8001080:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001084:	4a08      	ldr	r2, [pc, #32]	@ (80010a8 <HAL_MspInit+0x30>)
 8001086:	f043 0302 	orr.w	r3, r3, #2
 800108a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800108e:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <HAL_MspInit+0x30>)
 8001090:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	58024400 	.word	0x58024400

080010ac <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b0b2      	sub	sp, #200	@ 0xc8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b4:	f107 0308 	add.w	r3, r7, #8
 80010b8:	22c0      	movs	r2, #192	@ 0xc0
 80010ba:	2100      	movs	r1, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	f004 fff8 	bl	80060b2 <memset>
  if(hrtc->Instance==RTC)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a10      	ldr	r2, [pc, #64]	@ (8001108 <HAL_RTC_MspInit+0x5c>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d119      	bne.n	8001100 <HAL_RTC_MspInit+0x54>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80010cc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80010d0:	f04f 0300 	mov.w	r3, #0
 80010d4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80010d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e0:	f107 0308 	add.w	r3, r7, #8
 80010e4:	4618      	mov	r0, r3
 80010e6:	f001 fdbf 	bl	8002c68 <HAL_RCCEx_PeriphCLKConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80010f0:	f7ff ffbc 	bl	800106c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010f4:	4b05      	ldr	r3, [pc, #20]	@ (800110c <HAL_RTC_MspInit+0x60>)
 80010f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010f8:	4a04      	ldr	r2, [pc, #16]	@ (800110c <HAL_RTC_MspInit+0x60>)
 80010fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010fe:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001100:	bf00      	nop
 8001102:	37c8      	adds	r7, #200	@ 0xc8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	58004000 	.word	0x58004000
 800110c:	58024400 	.word	0x58024400

08001110 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b0bc      	sub	sp, #240	@ 0xf0
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001128:	f107 0318 	add.w	r3, r7, #24
 800112c:	22c0      	movs	r2, #192	@ 0xc0
 800112e:	2100      	movs	r1, #0
 8001130:	4618      	mov	r0, r3
 8001132:	f004 ffbe 	bl	80060b2 <memset>
  if(hspi->Instance==SPI1)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a38      	ldr	r2, [pc, #224]	@ (800121c <HAL_SPI_MspInit+0x10c>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d168      	bne.n	8001212 <HAL_SPI_MspInit+0x102>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001140:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800114c:	2300      	movs	r3, #0
 800114e:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001150:	f107 0318 	add.w	r3, r7, #24
 8001154:	4618      	mov	r0, r3
 8001156:	f001 fd87 	bl	8002c68 <HAL_RCCEx_PeriphCLKConfig>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001160:	f7ff ff84 	bl	800106c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001164:	4b2e      	ldr	r3, [pc, #184]	@ (8001220 <HAL_SPI_MspInit+0x110>)
 8001166:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800116a:	4a2d      	ldr	r2, [pc, #180]	@ (8001220 <HAL_SPI_MspInit+0x110>)
 800116c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001170:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001174:	4b2a      	ldr	r3, [pc, #168]	@ (8001220 <HAL_SPI_MspInit+0x110>)
 8001176:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800117a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	4b27      	ldr	r3, [pc, #156]	@ (8001220 <HAL_SPI_MspInit+0x110>)
 8001184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001188:	4a25      	ldr	r2, [pc, #148]	@ (8001220 <HAL_SPI_MspInit+0x110>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001192:	4b23      	ldr	r3, [pc, #140]	@ (8001220 <HAL_SPI_MspInit+0x110>)
 8001194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001220 <HAL_SPI_MspInit+0x110>)
 80011a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001220 <HAL_SPI_MspInit+0x110>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001220 <HAL_SPI_MspInit+0x110>)
 80011b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011be:	2320      	movs	r3, #32
 80011c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011d6:	2305      	movs	r3, #5
 80011d8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011dc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011e0:	4619      	mov	r1, r3
 80011e2:	4810      	ldr	r0, [pc, #64]	@ (8001224 <HAL_SPI_MspInit+0x114>)
 80011e4:	f000 fba2 	bl	800192c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011e8:	2320      	movs	r3, #32
 80011ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001200:	2305      	movs	r3, #5
 8001202:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001206:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800120a:	4619      	mov	r1, r3
 800120c:	4806      	ldr	r0, [pc, #24]	@ (8001228 <HAL_SPI_MspInit+0x118>)
 800120e:	f000 fb8d 	bl	800192c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001212:	bf00      	nop
 8001214:	37f0      	adds	r7, #240	@ 0xf0
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40013000 	.word	0x40013000
 8001220:	58024400 	.word	0x58024400
 8001224:	58020000 	.word	0x58020000
 8001228:	58020400 	.word	0x58020400

0800122c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <NMI_Handler+0x4>

08001234 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <MemManage_Handler+0x4>

08001244 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <BusFault_Handler+0x4>

0800124c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <UsageFault_Handler+0x4>

08001254 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001282:	f000 fa1f 	bl	80016c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}

0800128a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
  return 1;
 800128e:	2301      	movs	r3, #1
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <_kill>:

int _kill(int pid, int sig)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012a4:	f004 ff6a 	bl	800617c <__errno>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2216      	movs	r2, #22
 80012ac:	601a      	str	r2, [r3, #0]
  return -1;
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <_exit>:

void _exit (int status)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012c2:	f04f 31ff 	mov.w	r1, #4294967295
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ffe7 	bl	800129a <_kill>
  while (1) {}    /* Make sure we hang here */
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <_exit+0x12>

080012d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	e00a      	b.n	80012f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012e2:	f3af 8000 	nop.w
 80012e6:	4601      	mov	r1, r0
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	1c5a      	adds	r2, r3, #1
 80012ec:	60ba      	str	r2, [r7, #8]
 80012ee:	b2ca      	uxtb	r2, r1
 80012f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	3301      	adds	r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	dbf0      	blt.n	80012e2 <_read+0x12>
  }

  return len;
 8001300:	687b      	ldr	r3, [r7, #4]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b086      	sub	sp, #24
 800130e:	af00      	add	r7, sp, #0
 8001310:	60f8      	str	r0, [r7, #12]
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	e009      	b.n	8001330 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	1c5a      	adds	r2, r3, #1
 8001320:	60ba      	str	r2, [r7, #8]
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3301      	adds	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	429a      	cmp	r2, r3
 8001336:	dbf1      	blt.n	800131c <_write+0x12>
  }
  return len;
 8001338:	687b      	ldr	r3, [r7, #4]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <_close>:

int _close(int file)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800136a:	605a      	str	r2, [r3, #4]
  return 0;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <_isatty>:

int _isatty(int file)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001382:	2301      	movs	r3, #1
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b4:	4a14      	ldr	r2, [pc, #80]	@ (8001408 <_sbrk+0x5c>)
 80013b6:	4b15      	ldr	r3, [pc, #84]	@ (800140c <_sbrk+0x60>)
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c0:	4b13      	ldr	r3, [pc, #76]	@ (8001410 <_sbrk+0x64>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d102      	bne.n	80013ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c8:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <_sbrk+0x64>)
 80013ca:	4a12      	ldr	r2, [pc, #72]	@ (8001414 <_sbrk+0x68>)
 80013cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ce:	4b10      	ldr	r3, [pc, #64]	@ (8001410 <_sbrk+0x64>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d207      	bcs.n	80013ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013dc:	f004 fece 	bl	800617c <__errno>
 80013e0:	4603      	mov	r3, r0
 80013e2:	220c      	movs	r2, #12
 80013e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ea:	e009      	b.n	8001400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ec:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013f2:	4b07      	ldr	r3, [pc, #28]	@ (8001410 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	4a05      	ldr	r2, [pc, #20]	@ (8001410 <_sbrk+0x64>)
 80013fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013fe:	68fb      	ldr	r3, [r7, #12]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	24080000 	.word	0x24080000
 800140c:	00000400 	.word	0x00000400
 8001410:	240008b8 	.word	0x240008b8
 8001414:	24000a10 	.word	0x24000a10

08001418 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800141c:	4b43      	ldr	r3, [pc, #268]	@ (800152c <SystemInit+0x114>)
 800141e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001422:	4a42      	ldr	r2, [pc, #264]	@ (800152c <SystemInit+0x114>)
 8001424:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001428:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800142c:	4b40      	ldr	r3, [pc, #256]	@ (8001530 <SystemInit+0x118>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 030f 	and.w	r3, r3, #15
 8001434:	2b06      	cmp	r3, #6
 8001436:	d807      	bhi.n	8001448 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001438:	4b3d      	ldr	r3, [pc, #244]	@ (8001530 <SystemInit+0x118>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f023 030f 	bic.w	r3, r3, #15
 8001440:	4a3b      	ldr	r2, [pc, #236]	@ (8001530 <SystemInit+0x118>)
 8001442:	f043 0307 	orr.w	r3, r3, #7
 8001446:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001448:	4b3a      	ldr	r3, [pc, #232]	@ (8001534 <SystemInit+0x11c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a39      	ldr	r2, [pc, #228]	@ (8001534 <SystemInit+0x11c>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001454:	4b37      	ldr	r3, [pc, #220]	@ (8001534 <SystemInit+0x11c>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800145a:	4b36      	ldr	r3, [pc, #216]	@ (8001534 <SystemInit+0x11c>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	4935      	ldr	r1, [pc, #212]	@ (8001534 <SystemInit+0x11c>)
 8001460:	4b35      	ldr	r3, [pc, #212]	@ (8001538 <SystemInit+0x120>)
 8001462:	4013      	ands	r3, r2
 8001464:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001466:	4b32      	ldr	r3, [pc, #200]	@ (8001530 <SystemInit+0x118>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	2b00      	cmp	r3, #0
 8001470:	d007      	beq.n	8001482 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001472:	4b2f      	ldr	r3, [pc, #188]	@ (8001530 <SystemInit+0x118>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f023 030f 	bic.w	r3, r3, #15
 800147a:	4a2d      	ldr	r2, [pc, #180]	@ (8001530 <SystemInit+0x118>)
 800147c:	f043 0307 	orr.w	r3, r3, #7
 8001480:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001482:	4b2c      	ldr	r3, [pc, #176]	@ (8001534 <SystemInit+0x11c>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001488:	4b2a      	ldr	r3, [pc, #168]	@ (8001534 <SystemInit+0x11c>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800148e:	4b29      	ldr	r3, [pc, #164]	@ (8001534 <SystemInit+0x11c>)
 8001490:	2200      	movs	r2, #0
 8001492:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001494:	4b27      	ldr	r3, [pc, #156]	@ (8001534 <SystemInit+0x11c>)
 8001496:	4a29      	ldr	r2, [pc, #164]	@ (800153c <SystemInit+0x124>)
 8001498:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800149a:	4b26      	ldr	r3, [pc, #152]	@ (8001534 <SystemInit+0x11c>)
 800149c:	4a28      	ldr	r2, [pc, #160]	@ (8001540 <SystemInit+0x128>)
 800149e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014a0:	4b24      	ldr	r3, [pc, #144]	@ (8001534 <SystemInit+0x11c>)
 80014a2:	4a28      	ldr	r2, [pc, #160]	@ (8001544 <SystemInit+0x12c>)
 80014a4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014a6:	4b23      	ldr	r3, [pc, #140]	@ (8001534 <SystemInit+0x11c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014ac:	4b21      	ldr	r3, [pc, #132]	@ (8001534 <SystemInit+0x11c>)
 80014ae:	4a25      	ldr	r2, [pc, #148]	@ (8001544 <SystemInit+0x12c>)
 80014b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014b2:	4b20      	ldr	r3, [pc, #128]	@ (8001534 <SystemInit+0x11c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001534 <SystemInit+0x11c>)
 80014ba:	4a22      	ldr	r2, [pc, #136]	@ (8001544 <SystemInit+0x12c>)
 80014bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014be:	4b1d      	ldr	r3, [pc, #116]	@ (8001534 <SystemInit+0x11c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001534 <SystemInit+0x11c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a1a      	ldr	r2, [pc, #104]	@ (8001534 <SystemInit+0x11c>)
 80014ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014d0:	4b18      	ldr	r3, [pc, #96]	@ (8001534 <SystemInit+0x11c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80014d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001548 <SystemInit+0x130>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4b1c      	ldr	r3, [pc, #112]	@ (800154c <SystemInit+0x134>)
 80014dc:	4013      	ands	r3, r2
 80014de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80014e2:	d202      	bcs.n	80014ea <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80014e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001550 <SystemInit+0x138>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80014ea:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <SystemInit+0x11c>)
 80014ec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80014f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d113      	bne.n	8001520 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80014f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <SystemInit+0x11c>)
 80014fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80014fe:	4a0d      	ldr	r2, [pc, #52]	@ (8001534 <SystemInit+0x11c>)
 8001500:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001504:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001508:	4b12      	ldr	r3, [pc, #72]	@ (8001554 <SystemInit+0x13c>)
 800150a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800150e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001510:	4b08      	ldr	r3, [pc, #32]	@ (8001534 <SystemInit+0x11c>)
 8001512:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001516:	4a07      	ldr	r2, [pc, #28]	@ (8001534 <SystemInit+0x11c>)
 8001518:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800151c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	e000ed00 	.word	0xe000ed00
 8001530:	52002000 	.word	0x52002000
 8001534:	58024400 	.word	0x58024400
 8001538:	eaf6ed7f 	.word	0xeaf6ed7f
 800153c:	02020200 	.word	0x02020200
 8001540:	01ff0000 	.word	0x01ff0000
 8001544:	01010280 	.word	0x01010280
 8001548:	5c001000 	.word	0x5c001000
 800154c:	ffff0000 	.word	0xffff0000
 8001550:	51008108 	.word	0x51008108
 8001554:	52004000 	.word	0x52004000

08001558 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800155c:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <ExitRun0Mode+0x2c>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	4a08      	ldr	r2, [pc, #32]	@ (8001584 <ExitRun0Mode+0x2c>)
 8001562:	f043 0302 	orr.w	r3, r3, #2
 8001566:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001568:	bf00      	nop
 800156a:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <ExitRun0Mode+0x2c>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0f9      	beq.n	800156a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001576:	bf00      	nop
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	58024800 	.word	0x58024800

08001588 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001588:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80015c4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800158c:	f7ff ffe4 	bl	8001558 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001590:	f7ff ff42 	bl	8001418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001594:	480c      	ldr	r0, [pc, #48]	@ (80015c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001596:	490d      	ldr	r1, [pc, #52]	@ (80015cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001598:	4a0d      	ldr	r2, [pc, #52]	@ (80015d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800159c:	e002      	b.n	80015a4 <LoopCopyDataInit>

0800159e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a2:	3304      	adds	r3, #4

080015a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a8:	d3f9      	bcc.n	800159e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015aa:	4a0a      	ldr	r2, [pc, #40]	@ (80015d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015ac:	4c0a      	ldr	r4, [pc, #40]	@ (80015d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b0:	e001      	b.n	80015b6 <LoopFillZerobss>

080015b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b4:	3204      	adds	r2, #4

080015b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b8:	d3fb      	bcc.n	80015b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ba:	f004 fde5 	bl	8006188 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015be:	f7ff fa91 	bl	8000ae4 <main>
  bx  lr
 80015c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015c4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80015c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015cc:	240003f0 	.word	0x240003f0
  ldr r2, =_sidata
 80015d0:	08009c4c 	.word	0x08009c4c
  ldr r2, =_sbss
 80015d4:	240003f0 	.word	0x240003f0
  ldr r4, =_ebss
 80015d8:	24000a0c 	.word	0x24000a0c

080015dc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015dc:	e7fe      	b.n	80015dc <ADC3_IRQHandler>
	...

080015e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e6:	2003      	movs	r0, #3
 80015e8:	f000 f96e 	bl	80018c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015ec:	f001 f9c2 	bl	8002974 <HAL_RCC_GetSysClockFreq>
 80015f0:	4602      	mov	r2, r0
 80015f2:	4b15      	ldr	r3, [pc, #84]	@ (8001648 <HAL_Init+0x68>)
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	0a1b      	lsrs	r3, r3, #8
 80015f8:	f003 030f 	and.w	r3, r3, #15
 80015fc:	4913      	ldr	r1, [pc, #76]	@ (800164c <HAL_Init+0x6c>)
 80015fe:	5ccb      	ldrb	r3, [r1, r3]
 8001600:	f003 031f 	and.w	r3, r3, #31
 8001604:	fa22 f303 	lsr.w	r3, r2, r3
 8001608:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800160a:	4b0f      	ldr	r3, [pc, #60]	@ (8001648 <HAL_Init+0x68>)
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	4a0e      	ldr	r2, [pc, #56]	@ (800164c <HAL_Init+0x6c>)
 8001614:	5cd3      	ldrb	r3, [r2, r3]
 8001616:	f003 031f 	and.w	r3, r3, #31
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	fa22 f303 	lsr.w	r3, r2, r3
 8001620:	4a0b      	ldr	r2, [pc, #44]	@ (8001650 <HAL_Init+0x70>)
 8001622:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001624:	4a0b      	ldr	r2, [pc, #44]	@ (8001654 <HAL_Init+0x74>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800162a:	2000      	movs	r0, #0
 800162c:	f000 f814 	bl	8001658 <HAL_InitTick>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e002      	b.n	8001640 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800163a:	f7ff fd1d 	bl	8001078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	58024400 	.word	0x58024400
 800164c:	08009800 	.word	0x08009800
 8001650:	2400021c 	.word	0x2400021c
 8001654:	24000218 	.word	0x24000218

08001658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001660:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <HAL_InitTick+0x60>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e021      	b.n	80016b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800166c:	4b13      	ldr	r3, [pc, #76]	@ (80016bc <HAL_InitTick+0x64>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <HAL_InitTick+0x60>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800167a:	fbb3 f3f1 	udiv	r3, r3, r1
 800167e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f945 	bl	8001912 <HAL_SYSTICK_Config>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e00e      	b.n	80016b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b0f      	cmp	r3, #15
 8001696:	d80a      	bhi.n	80016ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001698:	2200      	movs	r2, #0
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f000 f91d 	bl	80018de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a4:	4a06      	ldr	r2, [pc, #24]	@ (80016c0 <HAL_InitTick+0x68>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e000      	b.n	80016b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	24000224 	.word	0x24000224
 80016bc:	24000218 	.word	0x24000218
 80016c0:	24000220 	.word	0x24000220

080016c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016c8:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <HAL_IncTick+0x20>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <HAL_IncTick+0x24>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	4a04      	ldr	r2, [pc, #16]	@ (80016e8 <HAL_IncTick+0x24>)
 80016d6:	6013      	str	r3, [r2, #0]
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	24000224 	.word	0x24000224
 80016e8:	240008bc 	.word	0x240008bc

080016ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return uwTick;
 80016f0:	4b03      	ldr	r3, [pc, #12]	@ (8001700 <HAL_GetTick+0x14>)
 80016f2:	681b      	ldr	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	240008bc 	.word	0x240008bc

08001704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800170c:	f7ff ffee 	bl	80016ec <HAL_GetTick>
 8001710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800171c:	d005      	beq.n	800172a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800171e:	4b0a      	ldr	r3, [pc, #40]	@ (8001748 <HAL_Delay+0x44>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4413      	add	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800172a:	bf00      	nop
 800172c:	f7ff ffde 	bl	80016ec <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	429a      	cmp	r2, r3
 800173a:	d8f7      	bhi.n	800172c <HAL_Delay+0x28>
  {
  }
}
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	24000224 	.word	0x24000224

0800174c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001750:	4b03      	ldr	r3, [pc, #12]	@ (8001760 <HAL_GetREVID+0x14>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	0c1b      	lsrs	r3, r3, #16
}
 8001756:	4618      	mov	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	5c001000 	.word	0x5c001000

08001764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001774:	4b0b      	ldr	r3, [pc, #44]	@ (80017a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001780:	4013      	ands	r3, r2
 8001782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800178c:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 800178e:	4313      	orrs	r3, r2
 8001790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001792:	4a04      	ldr	r2, [pc, #16]	@ (80017a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	60d3      	str	r3, [r2, #12]
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00
 80017a8:	05fa0000 	.word	0x05fa0000

080017ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b0:	4b04      	ldr	r3, [pc, #16]	@ (80017c4 <__NVIC_GetPriorityGrouping+0x18>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	f003 0307 	and.w	r3, r3, #7
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	6039      	str	r1, [r7, #0]
 80017d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	db0a      	blt.n	80017f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	490c      	ldr	r1, [pc, #48]	@ (8001814 <__NVIC_SetPriority+0x4c>)
 80017e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e6:	0112      	lsls	r2, r2, #4
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	440b      	add	r3, r1
 80017ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f0:	e00a      	b.n	8001808 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	4908      	ldr	r1, [pc, #32]	@ (8001818 <__NVIC_SetPriority+0x50>)
 80017f8:	88fb      	ldrh	r3, [r7, #6]
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	3b04      	subs	r3, #4
 8001800:	0112      	lsls	r2, r2, #4
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	440b      	add	r3, r1
 8001806:	761a      	strb	r2, [r3, #24]
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	e000e100 	.word	0xe000e100
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800181c:	b480      	push	{r7}
 800181e:	b089      	sub	sp, #36	@ 0x24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f1c3 0307 	rsb	r3, r3, #7
 8001836:	2b04      	cmp	r3, #4
 8001838:	bf28      	it	cs
 800183a:	2304      	movcs	r3, #4
 800183c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3304      	adds	r3, #4
 8001842:	2b06      	cmp	r3, #6
 8001844:	d902      	bls.n	800184c <NVIC_EncodePriority+0x30>
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3b03      	subs	r3, #3
 800184a:	e000      	b.n	800184e <NVIC_EncodePriority+0x32>
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001850:	f04f 32ff 	mov.w	r2, #4294967295
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43da      	mvns	r2, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	401a      	ands	r2, r3
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001864:	f04f 31ff 	mov.w	r1, #4294967295
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	fa01 f303 	lsl.w	r3, r1, r3
 800186e:	43d9      	mvns	r1, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001874:	4313      	orrs	r3, r2
         );
}
 8001876:	4618      	mov	r0, r3
 8001878:	3724      	adds	r7, #36	@ 0x24
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
	...

08001884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001894:	d301      	bcc.n	800189a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001896:	2301      	movs	r3, #1
 8001898:	e00f      	b.n	80018ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800189a:	4a0a      	ldr	r2, [pc, #40]	@ (80018c4 <SysTick_Config+0x40>)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3b01      	subs	r3, #1
 80018a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018a2:	210f      	movs	r1, #15
 80018a4:	f04f 30ff 	mov.w	r0, #4294967295
 80018a8:	f7ff ff8e 	bl	80017c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ac:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <SysTick_Config+0x40>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018b2:	4b04      	ldr	r3, [pc, #16]	@ (80018c4 <SysTick_Config+0x40>)
 80018b4:	2207      	movs	r2, #7
 80018b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	e000e010 	.word	0xe000e010

080018c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ff47 	bl	8001764 <__NVIC_SetPriorityGrouping>
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4603      	mov	r3, r0
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018ec:	f7ff ff5e 	bl	80017ac <__NVIC_GetPriorityGrouping>
 80018f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	68b9      	ldr	r1, [r7, #8]
 80018f6:	6978      	ldr	r0, [r7, #20]
 80018f8:	f7ff ff90 	bl	800181c <NVIC_EncodePriority>
 80018fc:	4602      	mov	r2, r0
 80018fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001902:	4611      	mov	r1, r2
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff5f 	bl	80017c8 <__NVIC_SetPriority>
}
 800190a:	bf00      	nop
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff ffb2 	bl	8001884 <SysTick_Config>
 8001920:	4603      	mov	r3, r0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800192c:	b480      	push	{r7}
 800192e:	b089      	sub	sp, #36	@ 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800193a:	4b89      	ldr	r3, [pc, #548]	@ (8001b60 <HAL_GPIO_Init+0x234>)
 800193c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800193e:	e194      	b.n	8001c6a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	2101      	movs	r1, #1
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	fa01 f303 	lsl.w	r3, r1, r3
 800194c:	4013      	ands	r3, r2
 800194e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 8186 	beq.w	8001c64 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	2b01      	cmp	r3, #1
 8001962:	d005      	beq.n	8001970 <HAL_GPIO_Init+0x44>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d130      	bne.n	80019d2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	2203      	movs	r2, #3
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	68da      	ldr	r2, [r3, #12]
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019a6:	2201      	movs	r2, #1
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4013      	ands	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	091b      	lsrs	r3, r3, #4
 80019bc:	f003 0201 	and.w	r2, r3, #1
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d017      	beq.n	8001a0e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	2203      	movs	r2, #3
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4013      	ands	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d123      	bne.n	8001a62 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	08da      	lsrs	r2, r3, #3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3208      	adds	r2, #8
 8001a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	220f      	movs	r2, #15
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	691a      	ldr	r2, [r3, #16]
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	08da      	lsrs	r2, r3, #3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3208      	adds	r2, #8
 8001a5c:	69b9      	ldr	r1, [r7, #24]
 8001a5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4013      	ands	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 0203 	and.w	r2, r3, #3
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 80e0 	beq.w	8001c64 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa4:	4b2f      	ldr	r3, [pc, #188]	@ (8001b64 <HAL_GPIO_Init+0x238>)
 8001aa6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001aaa:	4a2e      	ldr	r2, [pc, #184]	@ (8001b64 <HAL_GPIO_Init+0x238>)
 8001aac:	f043 0302 	orr.w	r3, r3, #2
 8001ab0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8001b64 <HAL_GPIO_Init+0x238>)
 8001ab6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ac2:	4a29      	ldr	r2, [pc, #164]	@ (8001b68 <HAL_GPIO_Init+0x23c>)
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	089b      	lsrs	r3, r3, #2
 8001ac8:	3302      	adds	r3, #2
 8001aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	220f      	movs	r2, #15
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a20      	ldr	r2, [pc, #128]	@ (8001b6c <HAL_GPIO_Init+0x240>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d052      	beq.n	8001b94 <HAL_GPIO_Init+0x268>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a1f      	ldr	r2, [pc, #124]	@ (8001b70 <HAL_GPIO_Init+0x244>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d031      	beq.n	8001b5a <HAL_GPIO_Init+0x22e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a1e      	ldr	r2, [pc, #120]	@ (8001b74 <HAL_GPIO_Init+0x248>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d02b      	beq.n	8001b56 <HAL_GPIO_Init+0x22a>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a1d      	ldr	r2, [pc, #116]	@ (8001b78 <HAL_GPIO_Init+0x24c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d025      	beq.n	8001b52 <HAL_GPIO_Init+0x226>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a1c      	ldr	r2, [pc, #112]	@ (8001b7c <HAL_GPIO_Init+0x250>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d01f      	beq.n	8001b4e <HAL_GPIO_Init+0x222>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a1b      	ldr	r2, [pc, #108]	@ (8001b80 <HAL_GPIO_Init+0x254>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d019      	beq.n	8001b4a <HAL_GPIO_Init+0x21e>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a1a      	ldr	r2, [pc, #104]	@ (8001b84 <HAL_GPIO_Init+0x258>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d013      	beq.n	8001b46 <HAL_GPIO_Init+0x21a>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a19      	ldr	r2, [pc, #100]	@ (8001b88 <HAL_GPIO_Init+0x25c>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d00d      	beq.n	8001b42 <HAL_GPIO_Init+0x216>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a18      	ldr	r2, [pc, #96]	@ (8001b8c <HAL_GPIO_Init+0x260>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d007      	beq.n	8001b3e <HAL_GPIO_Init+0x212>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a17      	ldr	r2, [pc, #92]	@ (8001b90 <HAL_GPIO_Init+0x264>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d101      	bne.n	8001b3a <HAL_GPIO_Init+0x20e>
 8001b36:	2309      	movs	r3, #9
 8001b38:	e02d      	b.n	8001b96 <HAL_GPIO_Init+0x26a>
 8001b3a:	230a      	movs	r3, #10
 8001b3c:	e02b      	b.n	8001b96 <HAL_GPIO_Init+0x26a>
 8001b3e:	2308      	movs	r3, #8
 8001b40:	e029      	b.n	8001b96 <HAL_GPIO_Init+0x26a>
 8001b42:	2307      	movs	r3, #7
 8001b44:	e027      	b.n	8001b96 <HAL_GPIO_Init+0x26a>
 8001b46:	2306      	movs	r3, #6
 8001b48:	e025      	b.n	8001b96 <HAL_GPIO_Init+0x26a>
 8001b4a:	2305      	movs	r3, #5
 8001b4c:	e023      	b.n	8001b96 <HAL_GPIO_Init+0x26a>
 8001b4e:	2304      	movs	r3, #4
 8001b50:	e021      	b.n	8001b96 <HAL_GPIO_Init+0x26a>
 8001b52:	2303      	movs	r3, #3
 8001b54:	e01f      	b.n	8001b96 <HAL_GPIO_Init+0x26a>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e01d      	b.n	8001b96 <HAL_GPIO_Init+0x26a>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e01b      	b.n	8001b96 <HAL_GPIO_Init+0x26a>
 8001b5e:	bf00      	nop
 8001b60:	58000080 	.word	0x58000080
 8001b64:	58024400 	.word	0x58024400
 8001b68:	58000400 	.word	0x58000400
 8001b6c:	58020000 	.word	0x58020000
 8001b70:	58020400 	.word	0x58020400
 8001b74:	58020800 	.word	0x58020800
 8001b78:	58020c00 	.word	0x58020c00
 8001b7c:	58021000 	.word	0x58021000
 8001b80:	58021400 	.word	0x58021400
 8001b84:	58021800 	.word	0x58021800
 8001b88:	58021c00 	.word	0x58021c00
 8001b8c:	58022000 	.word	0x58022000
 8001b90:	58022400 	.word	0x58022400
 8001b94:	2300      	movs	r3, #0
 8001b96:	69fa      	ldr	r2, [r7, #28]
 8001b98:	f002 0203 	and.w	r2, r2, #3
 8001b9c:	0092      	lsls	r2, r2, #2
 8001b9e:	4093      	lsls	r3, r2
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ba6:	4938      	ldr	r1, [pc, #224]	@ (8001c88 <HAL_GPIO_Init+0x35c>)
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	089b      	lsrs	r3, r3, #2
 8001bac:	3302      	adds	r3, #2
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001bda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001be2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001c08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	3301      	adds	r3, #1
 8001c68:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	fa22 f303 	lsr.w	r3, r2, r3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f47f ae63 	bne.w	8001940 <HAL_GPIO_Init+0x14>
  }
}
 8001c7a:	bf00      	nop
 8001c7c:	bf00      	nop
 8001c7e:	3724      	adds	r7, #36	@ 0x24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	58000400 	.word	0x58000400

08001c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	807b      	strh	r3, [r7, #2]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c9c:	787b      	ldrb	r3, [r7, #1]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ca2:	887a      	ldrh	r2, [r7, #2]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001ca8:	e003      	b.n	8001cb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001caa:	887b      	ldrh	r3, [r7, #2]
 8001cac:	041a      	lsls	r2, r3, #16
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	619a      	str	r2, [r3, #24]
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8001cc4:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a04      	ldr	r2, [pc, #16]	@ (8001cdc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cce:	6013      	str	r3, [r2, #0]
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	58024800 	.word	0x58024800

08001ce0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001ce8:	4b19      	ldr	r3, [pc, #100]	@ (8001d50 <HAL_PWREx_ConfigSupply+0x70>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d00a      	beq.n	8001d0a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001cf4:	4b16      	ldr	r3, [pc, #88]	@ (8001d50 <HAL_PWREx_ConfigSupply+0x70>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d001      	beq.n	8001d06 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e01f      	b.n	8001d46 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	e01d      	b.n	8001d46 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001d0a:	4b11      	ldr	r3, [pc, #68]	@ (8001d50 <HAL_PWREx_ConfigSupply+0x70>)
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	f023 0207 	bic.w	r2, r3, #7
 8001d12:	490f      	ldr	r1, [pc, #60]	@ (8001d50 <HAL_PWREx_ConfigSupply+0x70>)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001d1a:	f7ff fce7 	bl	80016ec <HAL_GetTick>
 8001d1e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d20:	e009      	b.n	8001d36 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001d22:	f7ff fce3 	bl	80016ec <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d30:	d901      	bls.n	8001d36 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e007      	b.n	8001d46 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d36:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <HAL_PWREx_ConfigSupply+0x70>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d42:	d1ee      	bne.n	8001d22 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	58024800 	.word	0x58024800

08001d54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08c      	sub	sp, #48	@ 0x30
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d102      	bne.n	8001d68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	f000 bc48 	b.w	80025f8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 8088 	beq.w	8001e86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d76:	4b99      	ldr	r3, [pc, #612]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d80:	4b96      	ldr	r3, [pc, #600]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d84:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d88:	2b10      	cmp	r3, #16
 8001d8a:	d007      	beq.n	8001d9c <HAL_RCC_OscConfig+0x48>
 8001d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d8e:	2b18      	cmp	r3, #24
 8001d90:	d111      	bne.n	8001db6 <HAL_RCC_OscConfig+0x62>
 8001d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d10c      	bne.n	8001db6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9c:	4b8f      	ldr	r3, [pc, #572]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d06d      	beq.n	8001e84 <HAL_RCC_OscConfig+0x130>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d169      	bne.n	8001e84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	f000 bc21 	b.w	80025f8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dbe:	d106      	bne.n	8001dce <HAL_RCC_OscConfig+0x7a>
 8001dc0:	4b86      	ldr	r3, [pc, #536]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a85      	ldr	r2, [pc, #532]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001dc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	e02e      	b.n	8001e2c <HAL_RCC_OscConfig+0xd8>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10c      	bne.n	8001df0 <HAL_RCC_OscConfig+0x9c>
 8001dd6:	4b81      	ldr	r3, [pc, #516]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a80      	ldr	r2, [pc, #512]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001ddc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	4b7e      	ldr	r3, [pc, #504]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a7d      	ldr	r2, [pc, #500]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001de8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	e01d      	b.n	8001e2c <HAL_RCC_OscConfig+0xd8>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001df8:	d10c      	bne.n	8001e14 <HAL_RCC_OscConfig+0xc0>
 8001dfa:	4b78      	ldr	r3, [pc, #480]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a77      	ldr	r2, [pc, #476]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001e00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	4b75      	ldr	r3, [pc, #468]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a74      	ldr	r2, [pc, #464]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	e00b      	b.n	8001e2c <HAL_RCC_OscConfig+0xd8>
 8001e14:	4b71      	ldr	r3, [pc, #452]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a70      	ldr	r2, [pc, #448]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001e1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	4b6e      	ldr	r3, [pc, #440]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a6d      	ldr	r2, [pc, #436]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001e26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d013      	beq.n	8001e5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e34:	f7ff fc5a 	bl	80016ec <HAL_GetTick>
 8001e38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e3c:	f7ff fc56 	bl	80016ec <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b64      	cmp	r3, #100	@ 0x64
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e3d4      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e4e:	4b63      	ldr	r3, [pc, #396]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCC_OscConfig+0xe8>
 8001e5a:	e014      	b.n	8001e86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5c:	f7ff fc46 	bl	80016ec <HAL_GetTick>
 8001e60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e64:	f7ff fc42 	bl	80016ec <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b64      	cmp	r3, #100	@ 0x64
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e3c0      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e76:	4b59      	ldr	r3, [pc, #356]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f0      	bne.n	8001e64 <HAL_RCC_OscConfig+0x110>
 8001e82:	e000      	b.n	8001e86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 80ca 	beq.w	8002028 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e94:	4b51      	ldr	r3, [pc, #324]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e9c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e9e:	4b4f      	ldr	r3, [pc, #316]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001ea4:	6a3b      	ldr	r3, [r7, #32]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d007      	beq.n	8001eba <HAL_RCC_OscConfig+0x166>
 8001eaa:	6a3b      	ldr	r3, [r7, #32]
 8001eac:	2b18      	cmp	r3, #24
 8001eae:	d156      	bne.n	8001f5e <HAL_RCC_OscConfig+0x20a>
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d151      	bne.n	8001f5e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eba:	4b48      	ldr	r3, [pc, #288]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d005      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x17e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e392      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ed2:	4b42      	ldr	r3, [pc, #264]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 0219 	bic.w	r2, r3, #25
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	493f      	ldr	r1, [pc, #252]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee4:	f7ff fc02 	bl	80016ec <HAL_GetTick>
 8001ee8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eec:	f7ff fbfe 	bl	80016ec <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e37c      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001efe:	4b37      	ldr	r3, [pc, #220]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0a:	f7ff fc1f 	bl	800174c <HAL_GetREVID>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d817      	bhi.n	8001f48 <HAL_RCC_OscConfig+0x1f4>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	2b40      	cmp	r3, #64	@ 0x40
 8001f1e:	d108      	bne.n	8001f32 <HAL_RCC_OscConfig+0x1de>
 8001f20:	4b2e      	ldr	r3, [pc, #184]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001f28:	4a2c      	ldr	r2, [pc, #176]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001f2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f2e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f30:	e07a      	b.n	8002028 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f32:	4b2a      	ldr	r3, [pc, #168]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	031b      	lsls	r3, r3, #12
 8001f40:	4926      	ldr	r1, [pc, #152]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f46:	e06f      	b.n	8002028 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f48:	4b24      	ldr	r3, [pc, #144]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	061b      	lsls	r3, r3, #24
 8001f56:	4921      	ldr	r1, [pc, #132]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f5c:	e064      	b.n	8002028 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d047      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f66:	4b1d      	ldr	r3, [pc, #116]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 0219 	bic.w	r2, r3, #25
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	491a      	ldr	r1, [pc, #104]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f78:	f7ff fbb8 	bl	80016ec <HAL_GetTick>
 8001f7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f80:	f7ff fbb4 	bl	80016ec <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e332      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f92:	4b12      	ldr	r3, [pc, #72]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9e:	f7ff fbd5 	bl	800174c <HAL_GetREVID>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d819      	bhi.n	8001fe0 <HAL_RCC_OscConfig+0x28c>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	2b40      	cmp	r3, #64	@ 0x40
 8001fb2:	d108      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x272>
 8001fb4:	4b09      	ldr	r3, [pc, #36]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001fbc:	4a07      	ldr	r2, [pc, #28]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001fbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fc2:	6053      	str	r3, [r2, #4]
 8001fc4:	e030      	b.n	8002028 <HAL_RCC_OscConfig+0x2d4>
 8001fc6:	4b05      	ldr	r3, [pc, #20]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	031b      	lsls	r3, r3, #12
 8001fd4:	4901      	ldr	r1, [pc, #4]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	604b      	str	r3, [r1, #4]
 8001fda:	e025      	b.n	8002028 <HAL_RCC_OscConfig+0x2d4>
 8001fdc:	58024400 	.word	0x58024400
 8001fe0:	4b9a      	ldr	r3, [pc, #616]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	061b      	lsls	r3, r3, #24
 8001fee:	4997      	ldr	r1, [pc, #604]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]
 8001ff4:	e018      	b.n	8002028 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ff6:	4b95      	ldr	r3, [pc, #596]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a94      	ldr	r2, [pc, #592]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 8001ffc:	f023 0301 	bic.w	r3, r3, #1
 8002000:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002002:	f7ff fb73 	bl	80016ec <HAL_GetTick>
 8002006:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800200a:	f7ff fb6f 	bl	80016ec <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e2ed      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800201c:	4b8b      	ldr	r3, [pc, #556]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1f0      	bne.n	800200a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 80a9 	beq.w	8002188 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002036:	4b85      	ldr	r3, [pc, #532]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800203e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002040:	4b82      	ldr	r3, [pc, #520]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 8002042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002044:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	2b08      	cmp	r3, #8
 800204a:	d007      	beq.n	800205c <HAL_RCC_OscConfig+0x308>
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	2b18      	cmp	r3, #24
 8002050:	d13a      	bne.n	80020c8 <HAL_RCC_OscConfig+0x374>
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	2b01      	cmp	r3, #1
 800205a:	d135      	bne.n	80020c8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800205c:	4b7b      	ldr	r3, [pc, #492]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_RCC_OscConfig+0x320>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	2b80      	cmp	r3, #128	@ 0x80
 800206e:	d001      	beq.n	8002074 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e2c1      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002074:	f7ff fb6a 	bl	800174c <HAL_GetREVID>
 8002078:	4603      	mov	r3, r0
 800207a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800207e:	4293      	cmp	r3, r2
 8002080:	d817      	bhi.n	80020b2 <HAL_RCC_OscConfig+0x35e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	2b20      	cmp	r3, #32
 8002088:	d108      	bne.n	800209c <HAL_RCC_OscConfig+0x348>
 800208a:	4b70      	ldr	r3, [pc, #448]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002092:	4a6e      	ldr	r2, [pc, #440]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 8002094:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002098:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800209a:	e075      	b.n	8002188 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800209c:	4b6b      	ldr	r3, [pc, #428]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	069b      	lsls	r3, r3, #26
 80020aa:	4968      	ldr	r1, [pc, #416]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80020b0:	e06a      	b.n	8002188 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020b2:	4b66      	ldr	r3, [pc, #408]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	061b      	lsls	r3, r3, #24
 80020c0:	4962      	ldr	r1, [pc, #392]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80020c6:	e05f      	b.n	8002188 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d042      	beq.n	8002156 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80020d0:	4b5e      	ldr	r3, [pc, #376]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a5d      	ldr	r2, [pc, #372]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 80020d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020dc:	f7ff fb06 	bl	80016ec <HAL_GetTick>
 80020e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80020e4:	f7ff fb02 	bl	80016ec <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e280      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020f6:	4b55      	ldr	r3, [pc, #340]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002102:	f7ff fb23 	bl	800174c <HAL_GetREVID>
 8002106:	4603      	mov	r3, r0
 8002108:	f241 0203 	movw	r2, #4099	@ 0x1003
 800210c:	4293      	cmp	r3, r2
 800210e:	d817      	bhi.n	8002140 <HAL_RCC_OscConfig+0x3ec>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	2b20      	cmp	r3, #32
 8002116:	d108      	bne.n	800212a <HAL_RCC_OscConfig+0x3d6>
 8002118:	4b4c      	ldr	r3, [pc, #304]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002120:	4a4a      	ldr	r2, [pc, #296]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 8002122:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002126:	6053      	str	r3, [r2, #4]
 8002128:	e02e      	b.n	8002188 <HAL_RCC_OscConfig+0x434>
 800212a:	4b48      	ldr	r3, [pc, #288]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	069b      	lsls	r3, r3, #26
 8002138:	4944      	ldr	r1, [pc, #272]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 800213a:	4313      	orrs	r3, r2
 800213c:	604b      	str	r3, [r1, #4]
 800213e:	e023      	b.n	8002188 <HAL_RCC_OscConfig+0x434>
 8002140:	4b42      	ldr	r3, [pc, #264]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	061b      	lsls	r3, r3, #24
 800214e:	493f      	ldr	r1, [pc, #252]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 8002150:	4313      	orrs	r3, r2
 8002152:	60cb      	str	r3, [r1, #12]
 8002154:	e018      	b.n	8002188 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002156:	4b3d      	ldr	r3, [pc, #244]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a3c      	ldr	r2, [pc, #240]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 800215c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002162:	f7ff fac3 	bl	80016ec <HAL_GetTick>
 8002166:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800216a:	f7ff fabf 	bl	80016ec <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e23d      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800217c:	4b33      	ldr	r3, [pc, #204]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1f0      	bne.n	800216a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0308 	and.w	r3, r3, #8
 8002190:	2b00      	cmp	r3, #0
 8002192:	d036      	beq.n	8002202 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d019      	beq.n	80021d0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800219c:	4b2b      	ldr	r3, [pc, #172]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 800219e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021a0:	4a2a      	ldr	r2, [pc, #168]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a8:	f7ff faa0 	bl	80016ec <HAL_GetTick>
 80021ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b0:	f7ff fa9c 	bl	80016ec <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e21a      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021c2:	4b22      	ldr	r3, [pc, #136]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 80021c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCC_OscConfig+0x45c>
 80021ce:	e018      	b.n	8002202 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021d0:	4b1e      	ldr	r3, [pc, #120]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 80021d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021d4:	4a1d      	ldr	r2, [pc, #116]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 80021d6:	f023 0301 	bic.w	r3, r3, #1
 80021da:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021dc:	f7ff fa86 	bl	80016ec <HAL_GetTick>
 80021e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e4:	f7ff fa82 	bl	80016ec <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e200      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021f6:	4b15      	ldr	r3, [pc, #84]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 80021f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0320 	and.w	r3, r3, #32
 800220a:	2b00      	cmp	r3, #0
 800220c:	d039      	beq.n	8002282 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d01c      	beq.n	8002250 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002216:	4b0d      	ldr	r3, [pc, #52]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a0c      	ldr	r2, [pc, #48]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 800221c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002220:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002222:	f7ff fa63 	bl	80016ec <HAL_GetTick>
 8002226:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800222a:	f7ff fa5f 	bl	80016ec <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e1dd      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800223c:	4b03      	ldr	r3, [pc, #12]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f0      	beq.n	800222a <HAL_RCC_OscConfig+0x4d6>
 8002248:	e01b      	b.n	8002282 <HAL_RCC_OscConfig+0x52e>
 800224a:	bf00      	nop
 800224c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002250:	4b9b      	ldr	r3, [pc, #620]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a9a      	ldr	r2, [pc, #616]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002256:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800225a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800225c:	f7ff fa46 	bl	80016ec <HAL_GetTick>
 8002260:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002264:	f7ff fa42 	bl	80016ec <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e1c0      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002276:	4b92      	ldr	r3, [pc, #584]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0304 	and.w	r3, r3, #4
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 8081 	beq.w	8002392 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002290:	4b8c      	ldr	r3, [pc, #560]	@ (80024c4 <HAL_RCC_OscConfig+0x770>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a8b      	ldr	r2, [pc, #556]	@ (80024c4 <HAL_RCC_OscConfig+0x770>)
 8002296:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800229a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800229c:	f7ff fa26 	bl	80016ec <HAL_GetTick>
 80022a0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a4:	f7ff fa22 	bl	80016ec <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b64      	cmp	r3, #100	@ 0x64
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e1a0      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022b6:	4b83      	ldr	r3, [pc, #524]	@ (80024c4 <HAL_RCC_OscConfig+0x770>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d106      	bne.n	80022d8 <HAL_RCC_OscConfig+0x584>
 80022ca:	4b7d      	ldr	r3, [pc, #500]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 80022cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ce:	4a7c      	ldr	r2, [pc, #496]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80022d6:	e02d      	b.n	8002334 <HAL_RCC_OscConfig+0x5e0>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10c      	bne.n	80022fa <HAL_RCC_OscConfig+0x5a6>
 80022e0:	4b77      	ldr	r3, [pc, #476]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 80022e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e4:	4a76      	ldr	r2, [pc, #472]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 80022e6:	f023 0301 	bic.w	r3, r3, #1
 80022ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80022ec:	4b74      	ldr	r3, [pc, #464]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 80022ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f0:	4a73      	ldr	r2, [pc, #460]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 80022f2:	f023 0304 	bic.w	r3, r3, #4
 80022f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80022f8:	e01c      	b.n	8002334 <HAL_RCC_OscConfig+0x5e0>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b05      	cmp	r3, #5
 8002300:	d10c      	bne.n	800231c <HAL_RCC_OscConfig+0x5c8>
 8002302:	4b6f      	ldr	r3, [pc, #444]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002306:	4a6e      	ldr	r2, [pc, #440]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002308:	f043 0304 	orr.w	r3, r3, #4
 800230c:	6713      	str	r3, [r2, #112]	@ 0x70
 800230e:	4b6c      	ldr	r3, [pc, #432]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002312:	4a6b      	ldr	r2, [pc, #428]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6713      	str	r3, [r2, #112]	@ 0x70
 800231a:	e00b      	b.n	8002334 <HAL_RCC_OscConfig+0x5e0>
 800231c:	4b68      	ldr	r3, [pc, #416]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 800231e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002320:	4a67      	ldr	r2, [pc, #412]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002322:	f023 0301 	bic.w	r3, r3, #1
 8002326:	6713      	str	r3, [r2, #112]	@ 0x70
 8002328:	4b65      	ldr	r3, [pc, #404]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 800232a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800232c:	4a64      	ldr	r2, [pc, #400]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 800232e:	f023 0304 	bic.w	r3, r3, #4
 8002332:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d015      	beq.n	8002368 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233c:	f7ff f9d6 	bl	80016ec <HAL_GetTick>
 8002340:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002342:	e00a      	b.n	800235a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002344:	f7ff f9d2 	bl	80016ec <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002352:	4293      	cmp	r3, r2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e14e      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800235a:	4b59      	ldr	r3, [pc, #356]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 800235c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0ee      	beq.n	8002344 <HAL_RCC_OscConfig+0x5f0>
 8002366:	e014      	b.n	8002392 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002368:	f7ff f9c0 	bl	80016ec <HAL_GetTick>
 800236c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800236e:	e00a      	b.n	8002386 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002370:	f7ff f9bc 	bl	80016ec <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800237e:	4293      	cmp	r3, r2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e138      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002386:	4b4e      	ldr	r3, [pc, #312]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1ee      	bne.n	8002370 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 812d 	beq.w	80025f6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800239c:	4b48      	ldr	r3, [pc, #288]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023a4:	2b18      	cmp	r3, #24
 80023a6:	f000 80bd 	beq.w	8002524 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	f040 809e 	bne.w	80024f0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b4:	4b42      	ldr	r3, [pc, #264]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a41      	ldr	r2, [pc, #260]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 80023ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7ff f994 	bl	80016ec <HAL_GetTick>
 80023c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c8:	f7ff f990 	bl	80016ec <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e10e      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023da:	4b39      	ldr	r3, [pc, #228]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023e6:	4b36      	ldr	r3, [pc, #216]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 80023e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023ea:	4b37      	ldr	r3, [pc, #220]	@ (80024c8 <HAL_RCC_OscConfig+0x774>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80023f6:	0112      	lsls	r2, r2, #4
 80023f8:	430a      	orrs	r2, r1
 80023fa:	4931      	ldr	r1, [pc, #196]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	628b      	str	r3, [r1, #40]	@ 0x28
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002404:	3b01      	subs	r3, #1
 8002406:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800240e:	3b01      	subs	r3, #1
 8002410:	025b      	lsls	r3, r3, #9
 8002412:	b29b      	uxth	r3, r3
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800241a:	3b01      	subs	r3, #1
 800241c:	041b      	lsls	r3, r3, #16
 800241e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002428:	3b01      	subs	r3, #1
 800242a:	061b      	lsls	r3, r3, #24
 800242c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002430:	4923      	ldr	r1, [pc, #140]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002432:	4313      	orrs	r3, r2
 8002434:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002436:	4b22      	ldr	r3, [pc, #136]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243a:	4a21      	ldr	r2, [pc, #132]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 800243c:	f023 0301 	bic.w	r3, r3, #1
 8002440:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002442:	4b1f      	ldr	r3, [pc, #124]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002444:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002446:	4b21      	ldr	r3, [pc, #132]	@ (80024cc <HAL_RCC_OscConfig+0x778>)
 8002448:	4013      	ands	r3, r2
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800244e:	00d2      	lsls	r2, r2, #3
 8002450:	491b      	ldr	r1, [pc, #108]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002452:	4313      	orrs	r3, r2
 8002454:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002456:	4b1a      	ldr	r3, [pc, #104]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245a:	f023 020c 	bic.w	r2, r3, #12
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002462:	4917      	ldr	r1, [pc, #92]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002464:	4313      	orrs	r3, r2
 8002466:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002468:	4b15      	ldr	r3, [pc, #84]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 800246a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800246c:	f023 0202 	bic.w	r2, r3, #2
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002474:	4912      	ldr	r1, [pc, #72]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002476:	4313      	orrs	r3, r2
 8002478:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800247a:	4b11      	ldr	r3, [pc, #68]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 800247c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247e:	4a10      	ldr	r2, [pc, #64]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002484:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002486:	4b0e      	ldr	r3, [pc, #56]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800248a:	4a0d      	ldr	r2, [pc, #52]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 800248c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002490:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002492:	4b0b      	ldr	r3, [pc, #44]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002496:	4a0a      	ldr	r2, [pc, #40]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002498:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800249c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800249e:	4b08      	ldr	r3, [pc, #32]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 80024a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a2:	4a07      	ldr	r2, [pc, #28]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024aa:	4b05      	ldr	r3, [pc, #20]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a04      	ldr	r2, [pc, #16]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 80024b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b6:	f7ff f919 	bl	80016ec <HAL_GetTick>
 80024ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024bc:	e011      	b.n	80024e2 <HAL_RCC_OscConfig+0x78e>
 80024be:	bf00      	nop
 80024c0:	58024400 	.word	0x58024400
 80024c4:	58024800 	.word	0x58024800
 80024c8:	fffffc0c 	.word	0xfffffc0c
 80024cc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d0:	f7ff f90c 	bl	80016ec <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e08a      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024e2:	4b47      	ldr	r3, [pc, #284]	@ (8002600 <HAL_RCC_OscConfig+0x8ac>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0x77c>
 80024ee:	e082      	b.n	80025f6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f0:	4b43      	ldr	r3, [pc, #268]	@ (8002600 <HAL_RCC_OscConfig+0x8ac>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a42      	ldr	r2, [pc, #264]	@ (8002600 <HAL_RCC_OscConfig+0x8ac>)
 80024f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fc:	f7ff f8f6 	bl	80016ec <HAL_GetTick>
 8002500:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002504:	f7ff f8f2 	bl	80016ec <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e070      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002516:	4b3a      	ldr	r3, [pc, #232]	@ (8002600 <HAL_RCC_OscConfig+0x8ac>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0x7b0>
 8002522:	e068      	b.n	80025f6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002524:	4b36      	ldr	r3, [pc, #216]	@ (8002600 <HAL_RCC_OscConfig+0x8ac>)
 8002526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002528:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800252a:	4b35      	ldr	r3, [pc, #212]	@ (8002600 <HAL_RCC_OscConfig+0x8ac>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002534:	2b01      	cmp	r3, #1
 8002536:	d031      	beq.n	800259c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	f003 0203 	and.w	r2, r3, #3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002542:	429a      	cmp	r2, r3
 8002544:	d12a      	bne.n	800259c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	091b      	lsrs	r3, r3, #4
 800254a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002552:	429a      	cmp	r2, r3
 8002554:	d122      	bne.n	800259c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002560:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002562:	429a      	cmp	r2, r3
 8002564:	d11a      	bne.n	800259c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	0a5b      	lsrs	r3, r3, #9
 800256a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002572:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002574:	429a      	cmp	r2, r3
 8002576:	d111      	bne.n	800259c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	0c1b      	lsrs	r3, r3, #16
 800257c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002584:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002586:	429a      	cmp	r2, r3
 8002588:	d108      	bne.n	800259c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	0e1b      	lsrs	r3, r3, #24
 800258e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002596:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002598:	429a      	cmp	r2, r3
 800259a:	d001      	beq.n	80025a0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e02b      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80025a0:	4b17      	ldr	r3, [pc, #92]	@ (8002600 <HAL_RCC_OscConfig+0x8ac>)
 80025a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025a4:	08db      	lsrs	r3, r3, #3
 80025a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80025aa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d01f      	beq.n	80025f6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80025b6:	4b12      	ldr	r3, [pc, #72]	@ (8002600 <HAL_RCC_OscConfig+0x8ac>)
 80025b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ba:	4a11      	ldr	r2, [pc, #68]	@ (8002600 <HAL_RCC_OscConfig+0x8ac>)
 80025bc:	f023 0301 	bic.w	r3, r3, #1
 80025c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025c2:	f7ff f893 	bl	80016ec <HAL_GetTick>
 80025c6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80025c8:	bf00      	nop
 80025ca:	f7ff f88f 	bl	80016ec <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d0f9      	beq.n	80025ca <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80025d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002600 <HAL_RCC_OscConfig+0x8ac>)
 80025d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025da:	4b0a      	ldr	r3, [pc, #40]	@ (8002604 <HAL_RCC_OscConfig+0x8b0>)
 80025dc:	4013      	ands	r3, r2
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80025e2:	00d2      	lsls	r2, r2, #3
 80025e4:	4906      	ldr	r1, [pc, #24]	@ (8002600 <HAL_RCC_OscConfig+0x8ac>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80025ea:	4b05      	ldr	r3, [pc, #20]	@ (8002600 <HAL_RCC_OscConfig+0x8ac>)
 80025ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ee:	4a04      	ldr	r2, [pc, #16]	@ (8002600 <HAL_RCC_OscConfig+0x8ac>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3730      	adds	r7, #48	@ 0x30
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	58024400 	.word	0x58024400
 8002604:	ffff0007 	.word	0xffff0007

08002608 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e19c      	b.n	8002956 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800261c:	4b8a      	ldr	r3, [pc, #552]	@ (8002848 <HAL_RCC_ClockConfig+0x240>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 030f 	and.w	r3, r3, #15
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d910      	bls.n	800264c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262a:	4b87      	ldr	r3, [pc, #540]	@ (8002848 <HAL_RCC_ClockConfig+0x240>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f023 020f 	bic.w	r2, r3, #15
 8002632:	4985      	ldr	r1, [pc, #532]	@ (8002848 <HAL_RCC_ClockConfig+0x240>)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800263a:	4b83      	ldr	r3, [pc, #524]	@ (8002848 <HAL_RCC_ClockConfig+0x240>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d001      	beq.n	800264c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e184      	b.n	8002956 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d010      	beq.n	800267a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	4b7b      	ldr	r3, [pc, #492]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002664:	429a      	cmp	r2, r3
 8002666:	d908      	bls.n	800267a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002668:	4b78      	ldr	r3, [pc, #480]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	4975      	ldr	r1, [pc, #468]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 8002676:	4313      	orrs	r3, r2
 8002678:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d010      	beq.n	80026a8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	695a      	ldr	r2, [r3, #20]
 800268a:	4b70      	ldr	r3, [pc, #448]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002692:	429a      	cmp	r2, r3
 8002694:	d908      	bls.n	80026a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002696:	4b6d      	ldr	r3, [pc, #436]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	496a      	ldr	r1, [pc, #424]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0310 	and.w	r3, r3, #16
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d010      	beq.n	80026d6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	699a      	ldr	r2, [r3, #24]
 80026b8:	4b64      	ldr	r3, [pc, #400]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d908      	bls.n	80026d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80026c4:	4b61      	ldr	r3, [pc, #388]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	495e      	ldr	r1, [pc, #376]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0320 	and.w	r3, r3, #32
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d010      	beq.n	8002704 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69da      	ldr	r2, [r3, #28]
 80026e6:	4b59      	ldr	r3, [pc, #356]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d908      	bls.n	8002704 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80026f2:	4b56      	ldr	r3, [pc, #344]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	4953      	ldr	r1, [pc, #332]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 8002700:	4313      	orrs	r3, r2
 8002702:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d010      	beq.n	8002732 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	4b4d      	ldr	r3, [pc, #308]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	f003 030f 	and.w	r3, r3, #15
 800271c:	429a      	cmp	r2, r3
 800271e:	d908      	bls.n	8002732 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002720:	4b4a      	ldr	r3, [pc, #296]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	f023 020f 	bic.w	r2, r3, #15
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4947      	ldr	r1, [pc, #284]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 800272e:	4313      	orrs	r3, r2
 8002730:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d055      	beq.n	80027ea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800273e:	4b43      	ldr	r3, [pc, #268]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	4940      	ldr	r1, [pc, #256]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 800274c:	4313      	orrs	r3, r2
 800274e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b02      	cmp	r3, #2
 8002756:	d107      	bne.n	8002768 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002758:	4b3c      	ldr	r3, [pc, #240]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d121      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e0f6      	b.n	8002956 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b03      	cmp	r3, #3
 800276e:	d107      	bne.n	8002780 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002770:	4b36      	ldr	r3, [pc, #216]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d115      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0ea      	b.n	8002956 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d107      	bne.n	8002798 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002788:	4b30      	ldr	r3, [pc, #192]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002790:	2b00      	cmp	r3, #0
 8002792:	d109      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e0de      	b.n	8002956 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002798:	4b2c      	ldr	r3, [pc, #176]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0d6      	b.n	8002956 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027a8:	4b28      	ldr	r3, [pc, #160]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	f023 0207 	bic.w	r2, r3, #7
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	4925      	ldr	r1, [pc, #148]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027ba:	f7fe ff97 	bl	80016ec <HAL_GetTick>
 80027be:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c0:	e00a      	b.n	80027d8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c2:	f7fe ff93 	bl	80016ec <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e0be      	b.n	8002956 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d8:	4b1c      	ldr	r3, [pc, #112]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d1eb      	bne.n	80027c2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d010      	beq.n	8002818 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	4b14      	ldr	r3, [pc, #80]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	429a      	cmp	r2, r3
 8002804:	d208      	bcs.n	8002818 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002806:	4b11      	ldr	r3, [pc, #68]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	f023 020f 	bic.w	r2, r3, #15
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	490e      	ldr	r1, [pc, #56]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 8002814:	4313      	orrs	r3, r2
 8002816:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002818:	4b0b      	ldr	r3, [pc, #44]	@ (8002848 <HAL_RCC_ClockConfig+0x240>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 030f 	and.w	r3, r3, #15
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d214      	bcs.n	8002850 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002826:	4b08      	ldr	r3, [pc, #32]	@ (8002848 <HAL_RCC_ClockConfig+0x240>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 020f 	bic.w	r2, r3, #15
 800282e:	4906      	ldr	r1, [pc, #24]	@ (8002848 <HAL_RCC_ClockConfig+0x240>)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	4313      	orrs	r3, r2
 8002834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002836:	4b04      	ldr	r3, [pc, #16]	@ (8002848 <HAL_RCC_ClockConfig+0x240>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	429a      	cmp	r2, r3
 8002842:	d005      	beq.n	8002850 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e086      	b.n	8002956 <HAL_RCC_ClockConfig+0x34e>
 8002848:	52002000 	.word	0x52002000
 800284c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	d010      	beq.n	800287e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691a      	ldr	r2, [r3, #16]
 8002860:	4b3f      	ldr	r3, [pc, #252]	@ (8002960 <HAL_RCC_ClockConfig+0x358>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002868:	429a      	cmp	r2, r3
 800286a:	d208      	bcs.n	800287e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800286c:	4b3c      	ldr	r3, [pc, #240]	@ (8002960 <HAL_RCC_ClockConfig+0x358>)
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	4939      	ldr	r1, [pc, #228]	@ (8002960 <HAL_RCC_ClockConfig+0x358>)
 800287a:	4313      	orrs	r3, r2
 800287c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d010      	beq.n	80028ac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	4b34      	ldr	r3, [pc, #208]	@ (8002960 <HAL_RCC_ClockConfig+0x358>)
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002896:	429a      	cmp	r2, r3
 8002898:	d208      	bcs.n	80028ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800289a:	4b31      	ldr	r3, [pc, #196]	@ (8002960 <HAL_RCC_ClockConfig+0x358>)
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	492e      	ldr	r1, [pc, #184]	@ (8002960 <HAL_RCC_ClockConfig+0x358>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0310 	and.w	r3, r3, #16
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d010      	beq.n	80028da <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	699a      	ldr	r2, [r3, #24]
 80028bc:	4b28      	ldr	r3, [pc, #160]	@ (8002960 <HAL_RCC_ClockConfig+0x358>)
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d208      	bcs.n	80028da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80028c8:	4b25      	ldr	r3, [pc, #148]	@ (8002960 <HAL_RCC_ClockConfig+0x358>)
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	4922      	ldr	r1, [pc, #136]	@ (8002960 <HAL_RCC_ClockConfig+0x358>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0320 	and.w	r3, r3, #32
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d010      	beq.n	8002908 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69da      	ldr	r2, [r3, #28]
 80028ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002960 <HAL_RCC_ClockConfig+0x358>)
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d208      	bcs.n	8002908 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80028f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002960 <HAL_RCC_ClockConfig+0x358>)
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	4917      	ldr	r1, [pc, #92]	@ (8002960 <HAL_RCC_ClockConfig+0x358>)
 8002904:	4313      	orrs	r3, r2
 8002906:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002908:	f000 f834 	bl	8002974 <HAL_RCC_GetSysClockFreq>
 800290c:	4602      	mov	r2, r0
 800290e:	4b14      	ldr	r3, [pc, #80]	@ (8002960 <HAL_RCC_ClockConfig+0x358>)
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	0a1b      	lsrs	r3, r3, #8
 8002914:	f003 030f 	and.w	r3, r3, #15
 8002918:	4912      	ldr	r1, [pc, #72]	@ (8002964 <HAL_RCC_ClockConfig+0x35c>)
 800291a:	5ccb      	ldrb	r3, [r1, r3]
 800291c:	f003 031f 	and.w	r3, r3, #31
 8002920:	fa22 f303 	lsr.w	r3, r2, r3
 8002924:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002926:	4b0e      	ldr	r3, [pc, #56]	@ (8002960 <HAL_RCC_ClockConfig+0x358>)
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	4a0d      	ldr	r2, [pc, #52]	@ (8002964 <HAL_RCC_ClockConfig+0x35c>)
 8002930:	5cd3      	ldrb	r3, [r2, r3]
 8002932:	f003 031f 	and.w	r3, r3, #31
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	fa22 f303 	lsr.w	r3, r2, r3
 800293c:	4a0a      	ldr	r2, [pc, #40]	@ (8002968 <HAL_RCC_ClockConfig+0x360>)
 800293e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002940:	4a0a      	ldr	r2, [pc, #40]	@ (800296c <HAL_RCC_ClockConfig+0x364>)
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002946:	4b0a      	ldr	r3, [pc, #40]	@ (8002970 <HAL_RCC_ClockConfig+0x368>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7fe fe84 	bl	8001658 <HAL_InitTick>
 8002950:	4603      	mov	r3, r0
 8002952:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002954:	7bfb      	ldrb	r3, [r7, #15]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	58024400 	.word	0x58024400
 8002964:	08009800 	.word	0x08009800
 8002968:	2400021c 	.word	0x2400021c
 800296c:	24000218 	.word	0x24000218
 8002970:	24000220 	.word	0x24000220

08002974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002974:	b480      	push	{r7}
 8002976:	b089      	sub	sp, #36	@ 0x24
 8002978:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800297a:	4bb3      	ldr	r3, [pc, #716]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002982:	2b18      	cmp	r3, #24
 8002984:	f200 8155 	bhi.w	8002c32 <HAL_RCC_GetSysClockFreq+0x2be>
 8002988:	a201      	add	r2, pc, #4	@ (adr r2, 8002990 <HAL_RCC_GetSysClockFreq+0x1c>)
 800298a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800298e:	bf00      	nop
 8002990:	080029f5 	.word	0x080029f5
 8002994:	08002c33 	.word	0x08002c33
 8002998:	08002c33 	.word	0x08002c33
 800299c:	08002c33 	.word	0x08002c33
 80029a0:	08002c33 	.word	0x08002c33
 80029a4:	08002c33 	.word	0x08002c33
 80029a8:	08002c33 	.word	0x08002c33
 80029ac:	08002c33 	.word	0x08002c33
 80029b0:	08002a1b 	.word	0x08002a1b
 80029b4:	08002c33 	.word	0x08002c33
 80029b8:	08002c33 	.word	0x08002c33
 80029bc:	08002c33 	.word	0x08002c33
 80029c0:	08002c33 	.word	0x08002c33
 80029c4:	08002c33 	.word	0x08002c33
 80029c8:	08002c33 	.word	0x08002c33
 80029cc:	08002c33 	.word	0x08002c33
 80029d0:	08002a21 	.word	0x08002a21
 80029d4:	08002c33 	.word	0x08002c33
 80029d8:	08002c33 	.word	0x08002c33
 80029dc:	08002c33 	.word	0x08002c33
 80029e0:	08002c33 	.word	0x08002c33
 80029e4:	08002c33 	.word	0x08002c33
 80029e8:	08002c33 	.word	0x08002c33
 80029ec:	08002c33 	.word	0x08002c33
 80029f0:	08002a27 	.word	0x08002a27
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029f4:	4b94      	ldr	r3, [pc, #592]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0320 	and.w	r3, r3, #32
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d009      	beq.n	8002a14 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a00:	4b91      	ldr	r3, [pc, #580]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	08db      	lsrs	r3, r3, #3
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	4a90      	ldr	r2, [pc, #576]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a10:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002a12:	e111      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002a14:	4b8d      	ldr	r3, [pc, #564]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a16:	61bb      	str	r3, [r7, #24]
      break;
 8002a18:	e10e      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002a1a:	4b8d      	ldr	r3, [pc, #564]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a1c:	61bb      	str	r3, [r7, #24]
      break;
 8002a1e:	e10b      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002a20:	4b8c      	ldr	r3, [pc, #560]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002a22:	61bb      	str	r3, [r7, #24]
      break;
 8002a24:	e108      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a26:	4b88      	ldr	r3, [pc, #544]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002a30:	4b85      	ldr	r3, [pc, #532]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a34:	091b      	lsrs	r3, r3, #4
 8002a36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a3a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002a3c:	4b82      	ldr	r3, [pc, #520]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002a46:	4b80      	ldr	r3, [pc, #512]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a4a:	08db      	lsrs	r3, r3, #3
 8002a4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	fb02 f303 	mul.w	r3, r2, r3
 8002a56:	ee07 3a90 	vmov	s15, r3
 8002a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a5e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 80e1 	beq.w	8002c2c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	f000 8083 	beq.w	8002b78 <HAL_RCC_GetSysClockFreq+0x204>
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	f200 80a1 	bhi.w	8002bbc <HAL_RCC_GetSysClockFreq+0x248>
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_RCC_GetSysClockFreq+0x114>
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d056      	beq.n	8002b34 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002a86:	e099      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a88:	4b6f      	ldr	r3, [pc, #444]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0320 	and.w	r3, r3, #32
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d02d      	beq.n	8002af0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a94:	4b6c      	ldr	r3, [pc, #432]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	08db      	lsrs	r3, r3, #3
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	4a6b      	ldr	r2, [pc, #428]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	ee07 3a90 	vmov	s15, r3
 8002aac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	ee07 3a90 	vmov	s15, r3
 8002ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002abe:	4b62      	ldr	r3, [pc, #392]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac6:	ee07 3a90 	vmov	s15, r3
 8002aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ace:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ad2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002c58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002aee:	e087      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	ee07 3a90 	vmov	s15, r3
 8002af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002afa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002c5c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b02:	4b51      	ldr	r3, [pc, #324]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b0a:	ee07 3a90 	vmov	s15, r3
 8002b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b12:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b16:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002c58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b32:	e065      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	ee07 3a90 	vmov	s15, r3
 8002b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b3e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002c60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b46:	4b40      	ldr	r3, [pc, #256]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b4e:	ee07 3a90 	vmov	s15, r3
 8002b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b56:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b5a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002c58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b76:	e043      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	ee07 3a90 	vmov	s15, r3
 8002b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b82:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002c64 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b92:	ee07 3a90 	vmov	s15, r3
 8002b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b9e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002c58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002baa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002bba:	e021      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	ee07 3a90 	vmov	s15, r3
 8002bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bc6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002c60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bce:	4b1e      	ldr	r3, [pc, #120]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bd6:	ee07 3a90 	vmov	s15, r3
 8002bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bde:	ed97 6a02 	vldr	s12, [r7, #8]
 8002be2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002c58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002bfe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002c00:	4b11      	ldr	r3, [pc, #68]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c04:	0a5b      	lsrs	r3, r3, #9
 8002c06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	ee07 3a90 	vmov	s15, r3
 8002c14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c18:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c24:	ee17 3a90 	vmov	r3, s15
 8002c28:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002c2a:	e005      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	61bb      	str	r3, [r7, #24]
      break;
 8002c30:	e002      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002c32:	4b07      	ldr	r3, [pc, #28]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c34:	61bb      	str	r3, [r7, #24]
      break;
 8002c36:	bf00      	nop
  }

  return sysclockfreq;
 8002c38:	69bb      	ldr	r3, [r7, #24]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3724      	adds	r7, #36	@ 0x24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	58024400 	.word	0x58024400
 8002c4c:	03d09000 	.word	0x03d09000
 8002c50:	003d0900 	.word	0x003d0900
 8002c54:	007a1200 	.word	0x007a1200
 8002c58:	46000000 	.word	0x46000000
 8002c5c:	4c742400 	.word	0x4c742400
 8002c60:	4a742400 	.word	0x4a742400
 8002c64:	4af42400 	.word	0x4af42400

08002c68 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c6c:	b0ca      	sub	sp, #296	@ 0x128
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c74:	2300      	movs	r3, #0
 8002c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002c8c:	2500      	movs	r5, #0
 8002c8e:	ea54 0305 	orrs.w	r3, r4, r5
 8002c92:	d049      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002c9e:	d02f      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002ca0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002ca4:	d828      	bhi.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002ca6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002caa:	d01a      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002cac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002cb0:	d822      	bhi.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002cb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002cba:	d007      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002cbc:	e01c      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cbe:	4bb8      	ldr	r3, [pc, #736]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc2:	4ab7      	ldr	r2, [pc, #732]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002cca:	e01a      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cd0:	3308      	adds	r3, #8
 8002cd2:	2102      	movs	r1, #2
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f001 f9d1 	bl	800407c <RCCEx_PLL2_Config>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002ce0:	e00f      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ce6:	3328      	adds	r3, #40	@ 0x28
 8002ce8:	2102      	movs	r1, #2
 8002cea:	4618      	mov	r0, r3
 8002cec:	f001 fa78 	bl	80041e0 <RCCEx_PLL3_Config>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002cf6:	e004      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002cfe:	e000      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002d00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10a      	bne.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002d0a:	4ba5      	ldr	r3, [pc, #660]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d0e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d18:	4aa1      	ldr	r2, [pc, #644]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d1a:	430b      	orrs	r3, r1
 8002d1c:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d1e:	e003      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d30:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002d34:	f04f 0900 	mov.w	r9, #0
 8002d38:	ea58 0309 	orrs.w	r3, r8, r9
 8002d3c:	d047      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d82a      	bhi.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002d48:	a201      	add	r2, pc, #4	@ (adr r2, 8002d50 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4e:	bf00      	nop
 8002d50:	08002d65 	.word	0x08002d65
 8002d54:	08002d73 	.word	0x08002d73
 8002d58:	08002d89 	.word	0x08002d89
 8002d5c:	08002da7 	.word	0x08002da7
 8002d60:	08002da7 	.word	0x08002da7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d64:	4b8e      	ldr	r3, [pc, #568]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d68:	4a8d      	ldr	r2, [pc, #564]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d70:	e01a      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d76:	3308      	adds	r3, #8
 8002d78:	2100      	movs	r1, #0
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f001 f97e 	bl	800407c <RCCEx_PLL2_Config>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d86:	e00f      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d8c:	3328      	adds	r3, #40	@ 0x28
 8002d8e:	2100      	movs	r1, #0
 8002d90:	4618      	mov	r0, r3
 8002d92:	f001 fa25 	bl	80041e0 <RCCEx_PLL3_Config>
 8002d96:	4603      	mov	r3, r0
 8002d98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d9c:	e004      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002da4:	e000      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002da6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002da8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10a      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002db0:	4b7b      	ldr	r3, [pc, #492]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002db2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002db4:	f023 0107 	bic.w	r1, r3, #7
 8002db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dbe:	4a78      	ldr	r2, [pc, #480]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	6513      	str	r3, [r2, #80]	@ 0x50
 8002dc4:	e003      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002dda:	f04f 0b00 	mov.w	fp, #0
 8002dde:	ea5a 030b 	orrs.w	r3, sl, fp
 8002de2:	d04c      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dee:	d030      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002df0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002df4:	d829      	bhi.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002df6:	2bc0      	cmp	r3, #192	@ 0xc0
 8002df8:	d02d      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002dfa:	2bc0      	cmp	r3, #192	@ 0xc0
 8002dfc:	d825      	bhi.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002dfe:	2b80      	cmp	r3, #128	@ 0x80
 8002e00:	d018      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002e02:	2b80      	cmp	r3, #128	@ 0x80
 8002e04:	d821      	bhi.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d002      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002e0a:	2b40      	cmp	r3, #64	@ 0x40
 8002e0c:	d007      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002e0e:	e01c      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e10:	4b63      	ldr	r3, [pc, #396]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e14:	4a62      	ldr	r2, [pc, #392]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002e1c:	e01c      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e22:	3308      	adds	r3, #8
 8002e24:	2100      	movs	r1, #0
 8002e26:	4618      	mov	r0, r3
 8002e28:	f001 f928 	bl	800407c <RCCEx_PLL2_Config>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002e32:	e011      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e38:	3328      	adds	r3, #40	@ 0x28
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f001 f9cf 	bl	80041e0 <RCCEx_PLL3_Config>
 8002e42:	4603      	mov	r3, r0
 8002e44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002e48:	e006      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e50:	e002      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002e52:	bf00      	nop
 8002e54:	e000      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002e56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10a      	bne.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002e60:	4b4f      	ldr	r3, [pc, #316]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e64:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6e:	4a4c      	ldr	r2, [pc, #304]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e70:	430b      	orrs	r3, r1
 8002e72:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e74:	e003      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e86:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002e8a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002e8e:	2300      	movs	r3, #0
 8002e90:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002e94:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	d053      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ea2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002ea6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002eaa:	d035      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002eac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002eb0:	d82e      	bhi.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002eb2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002eb6:	d031      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002eb8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002ebc:	d828      	bhi.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002ebe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ec2:	d01a      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002ec4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ec8:	d822      	bhi.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002ece:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ed2:	d007      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002ed4:	e01c      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ed6:	4b32      	ldr	r3, [pc, #200]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eda:	4a31      	ldr	r2, [pc, #196]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002edc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ee0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ee2:	e01c      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ee8:	3308      	adds	r3, #8
 8002eea:	2100      	movs	r1, #0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f001 f8c5 	bl	800407c <RCCEx_PLL2_Config>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002ef8:	e011      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002efe:	3328      	adds	r3, #40	@ 0x28
 8002f00:	2100      	movs	r1, #0
 8002f02:	4618      	mov	r0, r3
 8002f04:	f001 f96c 	bl	80041e0 <RCCEx_PLL3_Config>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f0e:	e006      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f16:	e002      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002f18:	bf00      	nop
 8002f1a:	e000      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002f1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10b      	bne.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002f26:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f2a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002f36:	4a1a      	ldr	r2, [pc, #104]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f38:	430b      	orrs	r3, r1
 8002f3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f3c:	e003      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002f52:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002f56:	2300      	movs	r3, #0
 8002f58:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002f5c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002f60:	460b      	mov	r3, r1
 8002f62:	4313      	orrs	r3, r2
 8002f64:	d056      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002f6e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f72:	d038      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002f74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f78:	d831      	bhi.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f7a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f7e:	d034      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002f80:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f84:	d82b      	bhi.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f8a:	d01d      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002f8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f90:	d825      	bhi.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d006      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002f96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f9a:	d00a      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002f9c:	e01f      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f9e:	bf00      	nop
 8002fa0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fa4:	4ba2      	ldr	r3, [pc, #648]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa8:	4aa1      	ldr	r2, [pc, #644]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002faa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002fb0:	e01c      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fb6:	3308      	adds	r3, #8
 8002fb8:	2100      	movs	r1, #0
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f001 f85e 	bl	800407c <RCCEx_PLL2_Config>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002fc6:	e011      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fcc:	3328      	adds	r3, #40	@ 0x28
 8002fce:	2100      	movs	r1, #0
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f001 f905 	bl	80041e0 <RCCEx_PLL3_Config>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002fdc:	e006      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fe4:	e002      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002fe6:	bf00      	nop
 8002fe8:	e000      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002fea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10b      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002ff4:	4b8e      	ldr	r3, [pc, #568]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003000:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003004:	4a8a      	ldr	r2, [pc, #552]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003006:	430b      	orrs	r3, r1
 8003008:	6593      	str	r3, [r2, #88]	@ 0x58
 800300a:	e003      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800300c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003010:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003020:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003024:	2300      	movs	r3, #0
 8003026:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800302a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800302e:	460b      	mov	r3, r1
 8003030:	4313      	orrs	r3, r2
 8003032:	d03a      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800303a:	2b30      	cmp	r3, #48	@ 0x30
 800303c:	d01f      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800303e:	2b30      	cmp	r3, #48	@ 0x30
 8003040:	d819      	bhi.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003042:	2b20      	cmp	r3, #32
 8003044:	d00c      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003046:	2b20      	cmp	r3, #32
 8003048:	d815      	bhi.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800304a:	2b00      	cmp	r3, #0
 800304c:	d019      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800304e:	2b10      	cmp	r3, #16
 8003050:	d111      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003052:	4b77      	ldr	r3, [pc, #476]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003056:	4a76      	ldr	r2, [pc, #472]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003058:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800305c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800305e:	e011      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003064:	3308      	adds	r3, #8
 8003066:	2102      	movs	r1, #2
 8003068:	4618      	mov	r0, r3
 800306a:	f001 f807 	bl	800407c <RCCEx_PLL2_Config>
 800306e:	4603      	mov	r3, r0
 8003070:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003074:	e006      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800307c:	e002      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800307e:	bf00      	nop
 8003080:	e000      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003082:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003084:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10a      	bne.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800308c:	4b68      	ldr	r3, [pc, #416]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800308e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003090:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800309a:	4a65      	ldr	r2, [pc, #404]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800309c:	430b      	orrs	r3, r1
 800309e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030a0:	e003      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80030aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80030b6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80030ba:	2300      	movs	r3, #0
 80030bc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80030c0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80030c4:	460b      	mov	r3, r1
 80030c6:	4313      	orrs	r3, r2
 80030c8:	d051      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80030ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030d4:	d035      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80030d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030da:	d82e      	bhi.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80030dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80030e0:	d031      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80030e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80030e6:	d828      	bhi.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80030e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030ec:	d01a      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80030ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030f2:	d822      	bhi.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80030f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030fc:	d007      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80030fe:	e01c      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003100:	4b4b      	ldr	r3, [pc, #300]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003104:	4a4a      	ldr	r2, [pc, #296]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800310a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800310c:	e01c      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800310e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003112:	3308      	adds	r3, #8
 8003114:	2100      	movs	r1, #0
 8003116:	4618      	mov	r0, r3
 8003118:	f000 ffb0 	bl	800407c <RCCEx_PLL2_Config>
 800311c:	4603      	mov	r3, r0
 800311e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003122:	e011      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003128:	3328      	adds	r3, #40	@ 0x28
 800312a:	2100      	movs	r1, #0
 800312c:	4618      	mov	r0, r3
 800312e:	f001 f857 	bl	80041e0 <RCCEx_PLL3_Config>
 8003132:	4603      	mov	r3, r0
 8003134:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003138:	e006      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003140:	e002      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003142:	bf00      	nop
 8003144:	e000      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003146:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003148:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10a      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003150:	4b37      	ldr	r3, [pc, #220]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003154:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800315c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800315e:	4a34      	ldr	r2, [pc, #208]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003160:	430b      	orrs	r3, r1
 8003162:	6513      	str	r3, [r2, #80]	@ 0x50
 8003164:	e003      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003166:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800316a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800316e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003176:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800317a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800317e:	2300      	movs	r3, #0
 8003180:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003184:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003188:	460b      	mov	r3, r1
 800318a:	4313      	orrs	r3, r2
 800318c:	d056      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800318e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003192:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003194:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003198:	d033      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800319a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800319e:	d82c      	bhi.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80031a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80031a4:	d02f      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80031a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80031aa:	d826      	bhi.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80031ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80031b0:	d02b      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80031b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80031b6:	d820      	bhi.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80031b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031bc:	d012      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80031be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031c2:	d81a      	bhi.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d022      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80031c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031cc:	d115      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031d2:	3308      	adds	r3, #8
 80031d4:	2101      	movs	r1, #1
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 ff50 	bl	800407c <RCCEx_PLL2_Config>
 80031dc:	4603      	mov	r3, r0
 80031de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80031e2:	e015      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031e8:	3328      	adds	r3, #40	@ 0x28
 80031ea:	2101      	movs	r1, #1
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 fff7 	bl	80041e0 <RCCEx_PLL3_Config>
 80031f2:	4603      	mov	r3, r0
 80031f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80031f8:	e00a      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003200:	e006      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003202:	bf00      	nop
 8003204:	e004      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003206:	bf00      	nop
 8003208:	e002      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800320a:	bf00      	nop
 800320c:	e000      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800320e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003210:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10d      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003218:	4b05      	ldr	r3, [pc, #20]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800321a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800321c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003224:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003226:	4a02      	ldr	r2, [pc, #8]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003228:	430b      	orrs	r3, r1
 800322a:	6513      	str	r3, [r2, #80]	@ 0x50
 800322c:	e006      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800322e:	bf00      	nop
 8003230:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003234:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003238:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800323c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003244:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003248:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800324c:	2300      	movs	r3, #0
 800324e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003252:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003256:	460b      	mov	r3, r1
 8003258:	4313      	orrs	r3, r2
 800325a:	d055      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800325c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003260:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003264:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003268:	d033      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800326a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800326e:	d82c      	bhi.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003270:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003274:	d02f      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800327a:	d826      	bhi.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 800327c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003280:	d02b      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003282:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003286:	d820      	bhi.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003288:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800328c:	d012      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800328e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003292:	d81a      	bhi.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003294:	2b00      	cmp	r3, #0
 8003296:	d022      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003298:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800329c:	d115      	bne.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800329e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032a2:	3308      	adds	r3, #8
 80032a4:	2101      	movs	r1, #1
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 fee8 	bl	800407c <RCCEx_PLL2_Config>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80032b2:	e015      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b8:	3328      	adds	r3, #40	@ 0x28
 80032ba:	2101      	movs	r1, #1
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 ff8f 	bl	80041e0 <RCCEx_PLL3_Config>
 80032c2:	4603      	mov	r3, r0
 80032c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80032c8:	e00a      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032d0:	e006      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80032d2:	bf00      	nop
 80032d4:	e004      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80032d6:	bf00      	nop
 80032d8:	e002      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80032da:	bf00      	nop
 80032dc:	e000      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80032de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10b      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80032e8:	4ba3      	ldr	r3, [pc, #652]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ec:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80032f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80032f8:	4a9f      	ldr	r2, [pc, #636]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032fa:	430b      	orrs	r3, r1
 80032fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80032fe:	e003      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003300:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003304:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800330c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003310:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003314:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003318:	2300      	movs	r3, #0
 800331a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800331e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003322:	460b      	mov	r3, r1
 8003324:	4313      	orrs	r3, r2
 8003326:	d037      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800332c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800332e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003332:	d00e      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003334:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003338:	d816      	bhi.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800333a:	2b00      	cmp	r3, #0
 800333c:	d018      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800333e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003342:	d111      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003344:	4b8c      	ldr	r3, [pc, #560]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003348:	4a8b      	ldr	r2, [pc, #556]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800334a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800334e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003350:	e00f      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003356:	3308      	adds	r3, #8
 8003358:	2101      	movs	r1, #1
 800335a:	4618      	mov	r0, r3
 800335c:	f000 fe8e 	bl	800407c <RCCEx_PLL2_Config>
 8003360:	4603      	mov	r3, r0
 8003362:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003366:	e004      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800336e:	e000      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003370:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10a      	bne.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800337a:	4b7f      	ldr	r3, [pc, #508]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800337c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800337e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003388:	4a7b      	ldr	r2, [pc, #492]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800338a:	430b      	orrs	r3, r1
 800338c:	6513      	str	r3, [r2, #80]	@ 0x50
 800338e:	e003      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003390:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003394:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800339c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80033a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033a8:	2300      	movs	r3, #0
 80033aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80033ae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4313      	orrs	r3, r2
 80033b6:	d039      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80033b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033be:	2b03      	cmp	r3, #3
 80033c0:	d81c      	bhi.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x794>
 80033c2:	a201      	add	r2, pc, #4	@ (adr r2, 80033c8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80033c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c8:	08003405 	.word	0x08003405
 80033cc:	080033d9 	.word	0x080033d9
 80033d0:	080033e7 	.word	0x080033e7
 80033d4:	08003405 	.word	0x08003405
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033d8:	4b67      	ldr	r3, [pc, #412]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033dc:	4a66      	ldr	r2, [pc, #408]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80033e4:	e00f      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ea:	3308      	adds	r3, #8
 80033ec:	2102      	movs	r1, #2
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 fe44 	bl	800407c <RCCEx_PLL2_Config>
 80033f4:	4603      	mov	r3, r0
 80033f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80033fa:	e004      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003402:	e000      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003404:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003406:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10a      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800340e:	4b5a      	ldr	r3, [pc, #360]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003412:	f023 0103 	bic.w	r1, r3, #3
 8003416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800341a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800341c:	4a56      	ldr	r2, [pc, #344]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800341e:	430b      	orrs	r3, r1
 8003420:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003422:	e003      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003424:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003428:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800342c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003434:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003438:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800343c:	2300      	movs	r3, #0
 800343e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003442:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003446:	460b      	mov	r3, r1
 8003448:	4313      	orrs	r3, r2
 800344a:	f000 809f 	beq.w	800358c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800344e:	4b4b      	ldr	r3, [pc, #300]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a4a      	ldr	r2, [pc, #296]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003458:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800345a:	f7fe f947 	bl	80016ec <HAL_GetTick>
 800345e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003462:	e00b      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003464:	f7fe f942 	bl	80016ec <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b64      	cmp	r3, #100	@ 0x64
 8003472:	d903      	bls.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800347a:	e005      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800347c:	4b3f      	ldr	r3, [pc, #252]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0ed      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003488:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800348c:	2b00      	cmp	r3, #0
 800348e:	d179      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003490:	4b39      	ldr	r3, [pc, #228]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003492:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003498:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800349c:	4053      	eors	r3, r2
 800349e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d015      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034a6:	4b34      	ldr	r3, [pc, #208]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034ae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034b2:	4b31      	ldr	r3, [pc, #196]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b6:	4a30      	ldr	r2, [pc, #192]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034bc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034be:	4b2e      	ldr	r3, [pc, #184]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c2:	4a2d      	ldr	r2, [pc, #180]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034c8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80034ca:	4a2b      	ldr	r2, [pc, #172]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034d0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80034d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80034da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034de:	d118      	bne.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e0:	f7fe f904 	bl	80016ec <HAL_GetTick>
 80034e4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034e8:	e00d      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ea:	f7fe f8ff 	bl	80016ec <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80034f4:	1ad2      	subs	r2, r2, r3
 80034f6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d903      	bls.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003504:	e005      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003506:	4b1c      	ldr	r3, [pc, #112]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0eb      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003516:	2b00      	cmp	r3, #0
 8003518:	d129      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800351a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800351e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003522:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003526:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800352a:	d10e      	bne.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800352c:	4b12      	ldr	r3, [pc, #72]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003538:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800353c:	091a      	lsrs	r2, r3, #4
 800353e:	4b10      	ldr	r3, [pc, #64]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003540:	4013      	ands	r3, r2
 8003542:	4a0d      	ldr	r2, [pc, #52]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003544:	430b      	orrs	r3, r1
 8003546:	6113      	str	r3, [r2, #16]
 8003548:	e005      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800354a:	4b0b      	ldr	r3, [pc, #44]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	4a0a      	ldr	r2, [pc, #40]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003550:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003554:	6113      	str	r3, [r2, #16]
 8003556:	4b08      	ldr	r3, [pc, #32]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003558:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800355a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800355e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003562:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003566:	4a04      	ldr	r2, [pc, #16]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003568:	430b      	orrs	r3, r1
 800356a:	6713      	str	r3, [r2, #112]	@ 0x70
 800356c:	e00e      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800356e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003572:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003576:	e009      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003578:	58024400 	.word	0x58024400
 800357c:	58024800 	.word	0x58024800
 8003580:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003584:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003588:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800358c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003594:	f002 0301 	and.w	r3, r2, #1
 8003598:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800359c:	2300      	movs	r3, #0
 800359e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80035a2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80035a6:	460b      	mov	r3, r1
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f000 8089 	beq.w	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80035ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035b4:	2b28      	cmp	r3, #40	@ 0x28
 80035b6:	d86b      	bhi.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80035b8:	a201      	add	r2, pc, #4	@ (adr r2, 80035c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80035ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035be:	bf00      	nop
 80035c0:	08003699 	.word	0x08003699
 80035c4:	08003691 	.word	0x08003691
 80035c8:	08003691 	.word	0x08003691
 80035cc:	08003691 	.word	0x08003691
 80035d0:	08003691 	.word	0x08003691
 80035d4:	08003691 	.word	0x08003691
 80035d8:	08003691 	.word	0x08003691
 80035dc:	08003691 	.word	0x08003691
 80035e0:	08003665 	.word	0x08003665
 80035e4:	08003691 	.word	0x08003691
 80035e8:	08003691 	.word	0x08003691
 80035ec:	08003691 	.word	0x08003691
 80035f0:	08003691 	.word	0x08003691
 80035f4:	08003691 	.word	0x08003691
 80035f8:	08003691 	.word	0x08003691
 80035fc:	08003691 	.word	0x08003691
 8003600:	0800367b 	.word	0x0800367b
 8003604:	08003691 	.word	0x08003691
 8003608:	08003691 	.word	0x08003691
 800360c:	08003691 	.word	0x08003691
 8003610:	08003691 	.word	0x08003691
 8003614:	08003691 	.word	0x08003691
 8003618:	08003691 	.word	0x08003691
 800361c:	08003691 	.word	0x08003691
 8003620:	08003699 	.word	0x08003699
 8003624:	08003691 	.word	0x08003691
 8003628:	08003691 	.word	0x08003691
 800362c:	08003691 	.word	0x08003691
 8003630:	08003691 	.word	0x08003691
 8003634:	08003691 	.word	0x08003691
 8003638:	08003691 	.word	0x08003691
 800363c:	08003691 	.word	0x08003691
 8003640:	08003699 	.word	0x08003699
 8003644:	08003691 	.word	0x08003691
 8003648:	08003691 	.word	0x08003691
 800364c:	08003691 	.word	0x08003691
 8003650:	08003691 	.word	0x08003691
 8003654:	08003691 	.word	0x08003691
 8003658:	08003691 	.word	0x08003691
 800365c:	08003691 	.word	0x08003691
 8003660:	08003699 	.word	0x08003699
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003668:	3308      	adds	r3, #8
 800366a:	2101      	movs	r1, #1
 800366c:	4618      	mov	r0, r3
 800366e:	f000 fd05 	bl	800407c <RCCEx_PLL2_Config>
 8003672:	4603      	mov	r3, r0
 8003674:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003678:	e00f      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800367a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367e:	3328      	adds	r3, #40	@ 0x28
 8003680:	2101      	movs	r1, #1
 8003682:	4618      	mov	r0, r3
 8003684:	f000 fdac 	bl	80041e0 <RCCEx_PLL3_Config>
 8003688:	4603      	mov	r3, r0
 800368a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800368e:	e004      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003696:	e000      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800369a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10a      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80036a2:	4bbf      	ldr	r3, [pc, #764]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80036a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80036aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036b0:	4abb      	ldr	r2, [pc, #748]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80036b2:	430b      	orrs	r3, r1
 80036b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80036b6:	e003      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80036c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c8:	f002 0302 	and.w	r3, r2, #2
 80036cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036d0:	2300      	movs	r3, #0
 80036d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80036d6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80036da:	460b      	mov	r3, r1
 80036dc:	4313      	orrs	r3, r2
 80036de:	d041      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80036e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036e6:	2b05      	cmp	r3, #5
 80036e8:	d824      	bhi.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80036ea:	a201      	add	r2, pc, #4	@ (adr r2, 80036f0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80036ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f0:	0800373d 	.word	0x0800373d
 80036f4:	08003709 	.word	0x08003709
 80036f8:	0800371f 	.word	0x0800371f
 80036fc:	0800373d 	.word	0x0800373d
 8003700:	0800373d 	.word	0x0800373d
 8003704:	0800373d 	.word	0x0800373d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800370c:	3308      	adds	r3, #8
 800370e:	2101      	movs	r1, #1
 8003710:	4618      	mov	r0, r3
 8003712:	f000 fcb3 	bl	800407c <RCCEx_PLL2_Config>
 8003716:	4603      	mov	r3, r0
 8003718:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800371c:	e00f      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800371e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003722:	3328      	adds	r3, #40	@ 0x28
 8003724:	2101      	movs	r1, #1
 8003726:	4618      	mov	r0, r3
 8003728:	f000 fd5a 	bl	80041e0 <RCCEx_PLL3_Config>
 800372c:	4603      	mov	r3, r0
 800372e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003732:	e004      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800373a:	e000      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800373c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800373e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10a      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003746:	4b96      	ldr	r3, [pc, #600]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800374a:	f023 0107 	bic.w	r1, r3, #7
 800374e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003752:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003754:	4a92      	ldr	r2, [pc, #584]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003756:	430b      	orrs	r3, r1
 8003758:	6553      	str	r3, [r2, #84]	@ 0x54
 800375a:	e003      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003760:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376c:	f002 0304 	and.w	r3, r2, #4
 8003770:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003774:	2300      	movs	r3, #0
 8003776:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800377a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800377e:	460b      	mov	r3, r1
 8003780:	4313      	orrs	r3, r2
 8003782:	d044      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003788:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800378c:	2b05      	cmp	r3, #5
 800378e:	d825      	bhi.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003790:	a201      	add	r2, pc, #4	@ (adr r2, 8003798 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003796:	bf00      	nop
 8003798:	080037e5 	.word	0x080037e5
 800379c:	080037b1 	.word	0x080037b1
 80037a0:	080037c7 	.word	0x080037c7
 80037a4:	080037e5 	.word	0x080037e5
 80037a8:	080037e5 	.word	0x080037e5
 80037ac:	080037e5 	.word	0x080037e5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b4:	3308      	adds	r3, #8
 80037b6:	2101      	movs	r1, #1
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 fc5f 	bl	800407c <RCCEx_PLL2_Config>
 80037be:	4603      	mov	r3, r0
 80037c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80037c4:	e00f      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ca:	3328      	adds	r3, #40	@ 0x28
 80037cc:	2101      	movs	r1, #1
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 fd06 	bl	80041e0 <RCCEx_PLL3_Config>
 80037d4:	4603      	mov	r3, r0
 80037d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80037da:	e004      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037e2:	e000      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80037e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10b      	bne.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037ee:	4b6c      	ldr	r3, [pc, #432]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f2:	f023 0107 	bic.w	r1, r3, #7
 80037f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037fe:	4a68      	ldr	r2, [pc, #416]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003800:	430b      	orrs	r3, r1
 8003802:	6593      	str	r3, [r2, #88]	@ 0x58
 8003804:	e003      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800380a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800380e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003816:	f002 0320 	and.w	r3, r2, #32
 800381a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800381e:	2300      	movs	r3, #0
 8003820:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003824:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003828:	460b      	mov	r3, r1
 800382a:	4313      	orrs	r3, r2
 800382c:	d055      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800382e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003836:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800383a:	d033      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800383c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003840:	d82c      	bhi.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003846:	d02f      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800384c:	d826      	bhi.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800384e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003852:	d02b      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003854:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003858:	d820      	bhi.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800385a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800385e:	d012      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003860:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003864:	d81a      	bhi.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003866:	2b00      	cmp	r3, #0
 8003868:	d022      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800386a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800386e:	d115      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003874:	3308      	adds	r3, #8
 8003876:	2100      	movs	r1, #0
 8003878:	4618      	mov	r0, r3
 800387a:	f000 fbff 	bl	800407c <RCCEx_PLL2_Config>
 800387e:	4603      	mov	r3, r0
 8003880:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003884:	e015      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800388a:	3328      	adds	r3, #40	@ 0x28
 800388c:	2102      	movs	r1, #2
 800388e:	4618      	mov	r0, r3
 8003890:	f000 fca6 	bl	80041e0 <RCCEx_PLL3_Config>
 8003894:	4603      	mov	r3, r0
 8003896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800389a:	e00a      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038a2:	e006      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80038a4:	bf00      	nop
 80038a6:	e004      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80038a8:	bf00      	nop
 80038aa:	e002      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80038ac:	bf00      	nop
 80038ae:	e000      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80038b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10b      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038ba:	4b39      	ldr	r3, [pc, #228]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038be:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80038c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ca:	4a35      	ldr	r2, [pc, #212]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038cc:	430b      	orrs	r3, r1
 80038ce:	6553      	str	r3, [r2, #84]	@ 0x54
 80038d0:	e003      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80038da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80038e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80038ea:	2300      	movs	r3, #0
 80038ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80038f0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80038f4:	460b      	mov	r3, r1
 80038f6:	4313      	orrs	r3, r2
 80038f8:	d058      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80038fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003902:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003906:	d033      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003908:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800390c:	d82c      	bhi.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800390e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003912:	d02f      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003914:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003918:	d826      	bhi.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800391a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800391e:	d02b      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003920:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003924:	d820      	bhi.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003926:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800392a:	d012      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800392c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003930:	d81a      	bhi.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003932:	2b00      	cmp	r3, #0
 8003934:	d022      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800393a:	d115      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800393c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003940:	3308      	adds	r3, #8
 8003942:	2100      	movs	r1, #0
 8003944:	4618      	mov	r0, r3
 8003946:	f000 fb99 	bl	800407c <RCCEx_PLL2_Config>
 800394a:	4603      	mov	r3, r0
 800394c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003950:	e015      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003956:	3328      	adds	r3, #40	@ 0x28
 8003958:	2102      	movs	r1, #2
 800395a:	4618      	mov	r0, r3
 800395c:	f000 fc40 	bl	80041e0 <RCCEx_PLL3_Config>
 8003960:	4603      	mov	r3, r0
 8003962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003966:	e00a      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800396e:	e006      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003970:	bf00      	nop
 8003972:	e004      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003974:	bf00      	nop
 8003976:	e002      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003978:	bf00      	nop
 800397a:	e000      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800397c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800397e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10e      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003986:	4b06      	ldr	r3, [pc, #24]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800398e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003992:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003996:	4a02      	ldr	r2, [pc, #8]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003998:	430b      	orrs	r3, r1
 800399a:	6593      	str	r3, [r2, #88]	@ 0x58
 800399c:	e006      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800399e:	bf00      	nop
 80039a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80039ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80039b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80039bc:	2300      	movs	r3, #0
 80039be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80039c2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80039c6:	460b      	mov	r3, r1
 80039c8:	4313      	orrs	r3, r2
 80039ca:	d055      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80039cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80039d4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80039d8:	d033      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80039da:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80039de:	d82c      	bhi.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80039e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039e4:	d02f      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80039e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039ea:	d826      	bhi.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80039ec:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80039f0:	d02b      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80039f2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80039f6:	d820      	bhi.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80039f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039fc:	d012      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80039fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a02:	d81a      	bhi.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d022      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003a08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a0c:	d115      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a12:	3308      	adds	r3, #8
 8003a14:	2100      	movs	r1, #0
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 fb30 	bl	800407c <RCCEx_PLL2_Config>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003a22:	e015      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a28:	3328      	adds	r3, #40	@ 0x28
 8003a2a:	2102      	movs	r1, #2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 fbd7 	bl	80041e0 <RCCEx_PLL3_Config>
 8003a32:	4603      	mov	r3, r0
 8003a34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003a38:	e00a      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a40:	e006      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003a42:	bf00      	nop
 8003a44:	e004      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003a46:	bf00      	nop
 8003a48:	e002      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003a4a:	bf00      	nop
 8003a4c:	e000      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003a4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10b      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003a58:	4ba1      	ldr	r3, [pc, #644]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003a68:	4a9d      	ldr	r2, [pc, #628]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a6e:	e003      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a80:	f002 0308 	and.w	r3, r2, #8
 8003a84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a8e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003a92:	460b      	mov	r3, r1
 8003a94:	4313      	orrs	r3, r2
 8003a96:	d01e      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003aa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aa4:	d10c      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aaa:	3328      	adds	r3, #40	@ 0x28
 8003aac:	2102      	movs	r1, #2
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 fb96 	bl	80041e0 <RCCEx_PLL3_Config>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003ac0:	4b87      	ldr	r3, [pc, #540]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ad0:	4a83      	ldr	r2, [pc, #524]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ad2:	430b      	orrs	r3, r1
 8003ad4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ade:	f002 0310 	and.w	r3, r2, #16
 8003ae2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003aec:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003af0:	460b      	mov	r3, r1
 8003af2:	4313      	orrs	r3, r2
 8003af4:	d01e      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003afe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b02:	d10c      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b08:	3328      	adds	r3, #40	@ 0x28
 8003b0a:	2102      	movs	r1, #2
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 fb67 	bl	80041e0 <RCCEx_PLL3_Config>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b1e:	4b70      	ldr	r3, [pc, #448]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b22:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b2e:	4a6c      	ldr	r2, [pc, #432]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b30:	430b      	orrs	r3, r1
 8003b32:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003b40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b44:	2300      	movs	r3, #0
 8003b46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b4a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4313      	orrs	r3, r2
 8003b52:	d03e      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003b5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b60:	d022      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003b62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b66:	d81b      	bhi.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d003      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003b6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b70:	d00b      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003b72:	e015      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b78:	3308      	adds	r3, #8
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 fa7d 	bl	800407c <RCCEx_PLL2_Config>
 8003b82:	4603      	mov	r3, r0
 8003b84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003b88:	e00f      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b8e:	3328      	adds	r3, #40	@ 0x28
 8003b90:	2102      	movs	r1, #2
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 fb24 	bl	80041e0 <RCCEx_PLL3_Config>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003b9e:	e004      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ba6:	e000      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003ba8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003baa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10b      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bb2:	4b4b      	ldr	r3, [pc, #300]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003bc2:	4a47      	ldr	r2, [pc, #284]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bc8:	e003      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bda:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003bde:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003be0:	2300      	movs	r3, #0
 8003be2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003be4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003be8:	460b      	mov	r3, r1
 8003bea:	4313      	orrs	r3, r2
 8003bec:	d03b      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003bfa:	d01f      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003bfc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c00:	d818      	bhi.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003c02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c06:	d003      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003c08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c0c:	d007      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003c0e:	e011      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c10:	4b33      	ldr	r3, [pc, #204]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c14:	4a32      	ldr	r2, [pc, #200]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003c1c:	e00f      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c22:	3328      	adds	r3, #40	@ 0x28
 8003c24:	2101      	movs	r1, #1
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fada 	bl	80041e0 <RCCEx_PLL3_Config>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003c32:	e004      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c3a:	e000      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10b      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c46:	4b26      	ldr	r3, [pc, #152]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c4a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c56:	4a22      	ldr	r2, [pc, #136]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c58:	430b      	orrs	r3, r1
 8003c5a:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c5c:	e003      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003c72:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c74:	2300      	movs	r3, #0
 8003c76:	677b      	str	r3, [r7, #116]	@ 0x74
 8003c78:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	d034      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c90:	d007      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003c92:	e011      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c94:	4b12      	ldr	r3, [pc, #72]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c98:	4a11      	ldr	r2, [pc, #68]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003ca0:	e00e      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca6:	3308      	adds	r3, #8
 8003ca8:	2102      	movs	r1, #2
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 f9e6 	bl	800407c <RCCEx_PLL2_Config>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003cb6:	e003      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10d      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003cc8:	4b05      	ldr	r3, [pc, #20]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ccc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cd6:	4a02      	ldr	r2, [pc, #8]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cdc:	e006      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003cde:	bf00      	nop
 8003ce0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ce8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003cf8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003cfe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003d02:	460b      	mov	r3, r1
 8003d04:	4313      	orrs	r3, r2
 8003d06:	d00c      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0c:	3328      	adds	r3, #40	@ 0x28
 8003d0e:	2102      	movs	r1, #2
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 fa65 	bl	80041e0 <RCCEx_PLL3_Config>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003d2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d30:	2300      	movs	r3, #0
 8003d32:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d34:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003d38:	460b      	mov	r3, r1
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	d038      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d4a:	d018      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003d4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d50:	d811      	bhi.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003d52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d56:	d014      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003d58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d5c:	d80b      	bhi.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d011      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003d62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d66:	d106      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d68:	4bc3      	ldr	r3, [pc, #780]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6c:	4ac2      	ldr	r2, [pc, #776]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003d74:	e008      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d7c:	e004      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003d7e:	bf00      	nop
 8003d80:	e002      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003d82:	bf00      	nop
 8003d84:	e000      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003d86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10b      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d90:	4bb9      	ldr	r3, [pc, #740]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d94:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003da0:	4ab5      	ldr	r2, [pc, #724]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003da2:	430b      	orrs	r3, r1
 8003da4:	6553      	str	r3, [r2, #84]	@ 0x54
 8003da6:	e003      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003dbc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003dc2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	d009      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003dcc:	4baa      	ldr	r3, [pc, #680]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dd0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dda:	4aa7      	ldr	r2, [pc, #668]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ddc:	430b      	orrs	r3, r1
 8003dde:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003dec:	653b      	str	r3, [r7, #80]	@ 0x50
 8003dee:	2300      	movs	r3, #0
 8003df0:	657b      	str	r3, [r7, #84]	@ 0x54
 8003df2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003df6:	460b      	mov	r3, r1
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	d00a      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003dfc:	4b9e      	ldr	r3, [pc, #632]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e08:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003e0c:	4a9a      	ldr	r2, [pc, #616]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e0e:	430b      	orrs	r3, r1
 8003e10:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003e1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e20:	2300      	movs	r3, #0
 8003e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e24:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	d009      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e2e:	4b92      	ldr	r3, [pc, #584]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e32:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e3c:	4a8e      	ldr	r2, [pc, #568]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e3e:	430b      	orrs	r3, r1
 8003e40:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003e4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e50:	2300      	movs	r3, #0
 8003e52:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e54:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003e58:	460b      	mov	r3, r1
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	d00e      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e5e:	4b86      	ldr	r3, [pc, #536]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	4a85      	ldr	r2, [pc, #532]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e64:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003e68:	6113      	str	r3, [r2, #16]
 8003e6a:	4b83      	ldr	r3, [pc, #524]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e6c:	6919      	ldr	r1, [r3, #16]
 8003e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e72:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003e76:	4a80      	ldr	r2, [pc, #512]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e78:	430b      	orrs	r3, r1
 8003e7a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e84:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003e88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e8e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003e92:	460b      	mov	r3, r1
 8003e94:	4313      	orrs	r3, r2
 8003e96:	d009      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003e98:	4b77      	ldr	r3, [pc, #476]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e9c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea6:	4a74      	ldr	r2, [pc, #464]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ea8:	430b      	orrs	r3, r1
 8003eaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003eb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003eba:	2300      	movs	r3, #0
 8003ebc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ebe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	d00a      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ec8:	4b6b      	ldr	r3, [pc, #428]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ecc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ed8:	4a67      	ldr	r2, [pc, #412]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003eda:	430b      	orrs	r3, r1
 8003edc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ef0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	d011      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efe:	3308      	adds	r3, #8
 8003f00:	2100      	movs	r1, #0
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 f8ba 	bl	800407c <RCCEx_PLL2_Config>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f26:	2100      	movs	r1, #0
 8003f28:	6239      	str	r1, [r7, #32]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f30:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003f34:	460b      	mov	r3, r1
 8003f36:	4313      	orrs	r3, r2
 8003f38:	d011      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3e:	3308      	adds	r3, #8
 8003f40:	2101      	movs	r1, #1
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 f89a 	bl	800407c <RCCEx_PLL2_Config>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f66:	2100      	movs	r1, #0
 8003f68:	61b9      	str	r1, [r7, #24]
 8003f6a:	f003 0304 	and.w	r3, r3, #4
 8003f6e:	61fb      	str	r3, [r7, #28]
 8003f70:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003f74:	460b      	mov	r3, r1
 8003f76:	4313      	orrs	r3, r2
 8003f78:	d011      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f7e:	3308      	adds	r3, #8
 8003f80:	2102      	movs	r1, #2
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 f87a 	bl	800407c <RCCEx_PLL2_Config>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003f8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	6139      	str	r1, [r7, #16]
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	d011      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fbe:	3328      	adds	r3, #40	@ 0x28
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 f90c 	bl	80041e0 <RCCEx_PLL3_Config>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003fce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d003      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	f003 0310 	and.w	r3, r3, #16
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	d011      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ffe:	3328      	adds	r3, #40	@ 0x28
 8004000:	2101      	movs	r1, #1
 8004002:	4618      	mov	r0, r3
 8004004:	f000 f8ec 	bl	80041e0 <RCCEx_PLL3_Config>
 8004008:	4603      	mov	r3, r0
 800400a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800400e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800401a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800401e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004026:	2100      	movs	r1, #0
 8004028:	6039      	str	r1, [r7, #0]
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	607b      	str	r3, [r7, #4]
 8004030:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004034:	460b      	mov	r3, r1
 8004036:	4313      	orrs	r3, r2
 8004038:	d011      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800403a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800403e:	3328      	adds	r3, #40	@ 0x28
 8004040:	2102      	movs	r1, #2
 8004042:	4618      	mov	r0, r3
 8004044:	f000 f8cc 	bl	80041e0 <RCCEx_PLL3_Config>
 8004048:	4603      	mov	r3, r0
 800404a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800404e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800405a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800405e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004066:	2300      	movs	r3, #0
 8004068:	e000      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
}
 800406c:	4618      	mov	r0, r3
 800406e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004072:	46bd      	mov	sp, r7
 8004074:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004078:	58024400 	.word	0x58024400

0800407c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800408a:	4b53      	ldr	r3, [pc, #332]	@ (80041d8 <RCCEx_PLL2_Config+0x15c>)
 800408c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	2b03      	cmp	r3, #3
 8004094:	d101      	bne.n	800409a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e099      	b.n	80041ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800409a:	4b4f      	ldr	r3, [pc, #316]	@ (80041d8 <RCCEx_PLL2_Config+0x15c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a4e      	ldr	r2, [pc, #312]	@ (80041d8 <RCCEx_PLL2_Config+0x15c>)
 80040a0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80040a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040a6:	f7fd fb21 	bl	80016ec <HAL_GetTick>
 80040aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80040ac:	e008      	b.n	80040c0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80040ae:	f7fd fb1d 	bl	80016ec <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e086      	b.n	80041ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80040c0:	4b45      	ldr	r3, [pc, #276]	@ (80041d8 <RCCEx_PLL2_Config+0x15c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1f0      	bne.n	80040ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80040cc:	4b42      	ldr	r3, [pc, #264]	@ (80041d8 <RCCEx_PLL2_Config+0x15c>)
 80040ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	031b      	lsls	r3, r3, #12
 80040da:	493f      	ldr	r1, [pc, #252]	@ (80041d8 <RCCEx_PLL2_Config+0x15c>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	628b      	str	r3, [r1, #40]	@ 0x28
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	3b01      	subs	r3, #1
 80040e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	025b      	lsls	r3, r3, #9
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	431a      	orrs	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	041b      	lsls	r3, r3, #16
 80040fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	3b01      	subs	r3, #1
 800410a:	061b      	lsls	r3, r3, #24
 800410c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004110:	4931      	ldr	r1, [pc, #196]	@ (80041d8 <RCCEx_PLL2_Config+0x15c>)
 8004112:	4313      	orrs	r3, r2
 8004114:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004116:	4b30      	ldr	r3, [pc, #192]	@ (80041d8 <RCCEx_PLL2_Config+0x15c>)
 8004118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	492d      	ldr	r1, [pc, #180]	@ (80041d8 <RCCEx_PLL2_Config+0x15c>)
 8004124:	4313      	orrs	r3, r2
 8004126:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004128:	4b2b      	ldr	r3, [pc, #172]	@ (80041d8 <RCCEx_PLL2_Config+0x15c>)
 800412a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800412c:	f023 0220 	bic.w	r2, r3, #32
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	4928      	ldr	r1, [pc, #160]	@ (80041d8 <RCCEx_PLL2_Config+0x15c>)
 8004136:	4313      	orrs	r3, r2
 8004138:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800413a:	4b27      	ldr	r3, [pc, #156]	@ (80041d8 <RCCEx_PLL2_Config+0x15c>)
 800413c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413e:	4a26      	ldr	r2, [pc, #152]	@ (80041d8 <RCCEx_PLL2_Config+0x15c>)
 8004140:	f023 0310 	bic.w	r3, r3, #16
 8004144:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004146:	4b24      	ldr	r3, [pc, #144]	@ (80041d8 <RCCEx_PLL2_Config+0x15c>)
 8004148:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800414a:	4b24      	ldr	r3, [pc, #144]	@ (80041dc <RCCEx_PLL2_Config+0x160>)
 800414c:	4013      	ands	r3, r2
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	69d2      	ldr	r2, [r2, #28]
 8004152:	00d2      	lsls	r2, r2, #3
 8004154:	4920      	ldr	r1, [pc, #128]	@ (80041d8 <RCCEx_PLL2_Config+0x15c>)
 8004156:	4313      	orrs	r3, r2
 8004158:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800415a:	4b1f      	ldr	r3, [pc, #124]	@ (80041d8 <RCCEx_PLL2_Config+0x15c>)
 800415c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415e:	4a1e      	ldr	r2, [pc, #120]	@ (80041d8 <RCCEx_PLL2_Config+0x15c>)
 8004160:	f043 0310 	orr.w	r3, r3, #16
 8004164:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d106      	bne.n	800417a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800416c:	4b1a      	ldr	r3, [pc, #104]	@ (80041d8 <RCCEx_PLL2_Config+0x15c>)
 800416e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004170:	4a19      	ldr	r2, [pc, #100]	@ (80041d8 <RCCEx_PLL2_Config+0x15c>)
 8004172:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004176:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004178:	e00f      	b.n	800419a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d106      	bne.n	800418e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004180:	4b15      	ldr	r3, [pc, #84]	@ (80041d8 <RCCEx_PLL2_Config+0x15c>)
 8004182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004184:	4a14      	ldr	r2, [pc, #80]	@ (80041d8 <RCCEx_PLL2_Config+0x15c>)
 8004186:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800418a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800418c:	e005      	b.n	800419a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800418e:	4b12      	ldr	r3, [pc, #72]	@ (80041d8 <RCCEx_PLL2_Config+0x15c>)
 8004190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004192:	4a11      	ldr	r2, [pc, #68]	@ (80041d8 <RCCEx_PLL2_Config+0x15c>)
 8004194:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004198:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800419a:	4b0f      	ldr	r3, [pc, #60]	@ (80041d8 <RCCEx_PLL2_Config+0x15c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a0e      	ldr	r2, [pc, #56]	@ (80041d8 <RCCEx_PLL2_Config+0x15c>)
 80041a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80041a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a6:	f7fd faa1 	bl	80016ec <HAL_GetTick>
 80041aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80041ac:	e008      	b.n	80041c0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80041ae:	f7fd fa9d 	bl	80016ec <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e006      	b.n	80041ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80041c0:	4b05      	ldr	r3, [pc, #20]	@ (80041d8 <RCCEx_PLL2_Config+0x15c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0f0      	beq.n	80041ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	58024400 	.word	0x58024400
 80041dc:	ffff0007 	.word	0xffff0007

080041e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041ea:	2300      	movs	r3, #0
 80041ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041ee:	4b53      	ldr	r3, [pc, #332]	@ (800433c <RCCEx_PLL3_Config+0x15c>)
 80041f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	2b03      	cmp	r3, #3
 80041f8:	d101      	bne.n	80041fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e099      	b.n	8004332 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80041fe:	4b4f      	ldr	r3, [pc, #316]	@ (800433c <RCCEx_PLL3_Config+0x15c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a4e      	ldr	r2, [pc, #312]	@ (800433c <RCCEx_PLL3_Config+0x15c>)
 8004204:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004208:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800420a:	f7fd fa6f 	bl	80016ec <HAL_GetTick>
 800420e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004210:	e008      	b.n	8004224 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004212:	f7fd fa6b 	bl	80016ec <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e086      	b.n	8004332 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004224:	4b45      	ldr	r3, [pc, #276]	@ (800433c <RCCEx_PLL3_Config+0x15c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1f0      	bne.n	8004212 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004230:	4b42      	ldr	r3, [pc, #264]	@ (800433c <RCCEx_PLL3_Config+0x15c>)
 8004232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004234:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	051b      	lsls	r3, r3, #20
 800423e:	493f      	ldr	r1, [pc, #252]	@ (800433c <RCCEx_PLL3_Config+0x15c>)
 8004240:	4313      	orrs	r3, r2
 8004242:	628b      	str	r3, [r1, #40]	@ 0x28
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	3b01      	subs	r3, #1
 800424a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	3b01      	subs	r3, #1
 8004254:	025b      	lsls	r3, r3, #9
 8004256:	b29b      	uxth	r3, r3
 8004258:	431a      	orrs	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	3b01      	subs	r3, #1
 8004260:	041b      	lsls	r3, r3, #16
 8004262:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	3b01      	subs	r3, #1
 800426e:	061b      	lsls	r3, r3, #24
 8004270:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004274:	4931      	ldr	r1, [pc, #196]	@ (800433c <RCCEx_PLL3_Config+0x15c>)
 8004276:	4313      	orrs	r3, r2
 8004278:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800427a:	4b30      	ldr	r3, [pc, #192]	@ (800433c <RCCEx_PLL3_Config+0x15c>)
 800427c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	492d      	ldr	r1, [pc, #180]	@ (800433c <RCCEx_PLL3_Config+0x15c>)
 8004288:	4313      	orrs	r3, r2
 800428a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800428c:	4b2b      	ldr	r3, [pc, #172]	@ (800433c <RCCEx_PLL3_Config+0x15c>)
 800428e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004290:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	4928      	ldr	r1, [pc, #160]	@ (800433c <RCCEx_PLL3_Config+0x15c>)
 800429a:	4313      	orrs	r3, r2
 800429c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800429e:	4b27      	ldr	r3, [pc, #156]	@ (800433c <RCCEx_PLL3_Config+0x15c>)
 80042a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a2:	4a26      	ldr	r2, [pc, #152]	@ (800433c <RCCEx_PLL3_Config+0x15c>)
 80042a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80042aa:	4b24      	ldr	r3, [pc, #144]	@ (800433c <RCCEx_PLL3_Config+0x15c>)
 80042ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042ae:	4b24      	ldr	r3, [pc, #144]	@ (8004340 <RCCEx_PLL3_Config+0x160>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	69d2      	ldr	r2, [r2, #28]
 80042b6:	00d2      	lsls	r2, r2, #3
 80042b8:	4920      	ldr	r1, [pc, #128]	@ (800433c <RCCEx_PLL3_Config+0x15c>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80042be:	4b1f      	ldr	r3, [pc, #124]	@ (800433c <RCCEx_PLL3_Config+0x15c>)
 80042c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c2:	4a1e      	ldr	r2, [pc, #120]	@ (800433c <RCCEx_PLL3_Config+0x15c>)
 80042c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d106      	bne.n	80042de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80042d0:	4b1a      	ldr	r3, [pc, #104]	@ (800433c <RCCEx_PLL3_Config+0x15c>)
 80042d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d4:	4a19      	ldr	r2, [pc, #100]	@ (800433c <RCCEx_PLL3_Config+0x15c>)
 80042d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80042da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80042dc:	e00f      	b.n	80042fe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d106      	bne.n	80042f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80042e4:	4b15      	ldr	r3, [pc, #84]	@ (800433c <RCCEx_PLL3_Config+0x15c>)
 80042e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e8:	4a14      	ldr	r2, [pc, #80]	@ (800433c <RCCEx_PLL3_Config+0x15c>)
 80042ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80042f0:	e005      	b.n	80042fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80042f2:	4b12      	ldr	r3, [pc, #72]	@ (800433c <RCCEx_PLL3_Config+0x15c>)
 80042f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f6:	4a11      	ldr	r2, [pc, #68]	@ (800433c <RCCEx_PLL3_Config+0x15c>)
 80042f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80042fe:	4b0f      	ldr	r3, [pc, #60]	@ (800433c <RCCEx_PLL3_Config+0x15c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a0e      	ldr	r2, [pc, #56]	@ (800433c <RCCEx_PLL3_Config+0x15c>)
 8004304:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004308:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800430a:	f7fd f9ef 	bl	80016ec <HAL_GetTick>
 800430e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004310:	e008      	b.n	8004324 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004312:	f7fd f9eb 	bl	80016ec <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e006      	b.n	8004332 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004324:	4b05      	ldr	r3, [pc, #20]	@ (800433c <RCCEx_PLL3_Config+0x15c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0f0      	beq.n	8004312 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004330:	7bfb      	ldrb	r3, [r7, #15]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	58024400 	.word	0x58024400
 8004340:	ffff0007 	.word	0xffff0007

08004344 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d071      	beq.n	800443a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fc fe9e 	bl	80010ac <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f003 0310 	and.w	r3, r3, #16
 8004382:	2b10      	cmp	r3, #16
 8004384:	d050      	beq.n	8004428 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	22ca      	movs	r2, #202	@ 0xca
 800438c:	625a      	str	r2, [r3, #36]	@ 0x24
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2253      	movs	r2, #83	@ 0x53
 8004394:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 fa4a 	bl	8004830 <RTC_EnterInitMode>
 800439c:	4603      	mov	r3, r0
 800439e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d124      	bne.n	80043f0 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6899      	ldr	r1, [r3, #8]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	4b24      	ldr	r3, [pc, #144]	@ (8004444 <HAL_RTC_Init+0x100>)
 80043b2:	400b      	ands	r3, r1
 80043b4:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6899      	ldr	r1, [r3, #8]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	431a      	orrs	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	0419      	lsls	r1, r3, #16
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 fa56 	bl	8004898 <RTC_ExitInitMode>
 80043ec:	4603      	mov	r3, r0
 80043ee:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d113      	bne.n	800441e <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0203 	bic.w	r2, r2, #3
 8004404:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	69da      	ldr	r2, [r3, #28]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	22ff      	movs	r2, #255	@ 0xff
 8004424:	625a      	str	r2, [r3, #36]	@ 0x24
 8004426:	e001      	b.n	800442c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004428:	2300      	movs	r3, #0
 800442a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800442c:	7bfb      	ldrb	r3, [r7, #15]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d103      	bne.n	800443a <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 800443a:	7bfb      	ldrb	r3, [r7, #15]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	ff8fffbf 	.word	0xff8fffbf

08004448 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004448:	b590      	push	{r4, r7, lr}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f893 3020 	ldrb.w	r3, [r3, #32]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d101      	bne.n	8004462 <HAL_RTC_SetTime+0x1a>
 800445e:	2302      	movs	r3, #2
 8004460:	e089      	b.n	8004576 <HAL_RTC_SetTime+0x12e>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2202      	movs	r2, #2
 800446e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	22ca      	movs	r2, #202	@ 0xca
 8004478:	625a      	str	r2, [r3, #36]	@ 0x24
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2253      	movs	r2, #83	@ 0x53
 8004480:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 f9d4 	bl	8004830 <RTC_EnterInitMode>
 8004488:	4603      	mov	r3, r0
 800448a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800448c:	7cfb      	ldrb	r3, [r7, #19]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d161      	bne.n	8004556 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d126      	bne.n	80044e6 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d102      	bne.n	80044ac <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2200      	movs	r2, #0
 80044aa:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 fa2f 	bl	8004914 <RTC_ByteToBcd2>
 80044b6:	4603      	mov	r3, r0
 80044b8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	785b      	ldrb	r3, [r3, #1]
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 fa28 	bl	8004914 <RTC_ByteToBcd2>
 80044c4:	4603      	mov	r3, r0
 80044c6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80044c8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	789b      	ldrb	r3, [r3, #2]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 fa20 	bl	8004914 <RTC_ByteToBcd2>
 80044d4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80044d6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	78db      	ldrb	r3, [r3, #3]
 80044de:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80044e0:	4313      	orrs	r3, r2
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	e018      	b.n	8004518 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d102      	bne.n	80044fa <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2200      	movs	r2, #0
 80044f8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	785b      	ldrb	r3, [r3, #1]
 8004504:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004506:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800450c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	78db      	ldrb	r3, [r3, #3]
 8004512:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004514:	4313      	orrs	r3, r2
 8004516:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	6979      	ldr	r1, [r7, #20]
 800451e:	4b18      	ldr	r3, [pc, #96]	@ (8004580 <HAL_RTC_SetTime+0x138>)
 8004520:	400b      	ands	r3, r1
 8004522:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004532:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6899      	ldr	r1, [r3, #8]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	431a      	orrs	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 f9a3 	bl	8004898 <RTC_ExitInitMode>
 8004552:	4603      	mov	r3, r0
 8004554:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	22ff      	movs	r2, #255	@ 0xff
 800455c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800455e:	7cfb      	ldrb	r3, [r7, #19]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d103      	bne.n	800456c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004574:	7cfb      	ldrb	r3, [r7, #19]
}
 8004576:	4618      	mov	r0, r3
 8004578:	371c      	adds	r7, #28
 800457a:	46bd      	mov	sp, r7
 800457c:	bd90      	pop	{r4, r7, pc}
 800457e:	bf00      	nop
 8004580:	007f7f7f 	.word	0x007f7f7f

08004584 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	4b22      	ldr	r3, [pc, #136]	@ (8004638 <HAL_RTC_GetTime+0xb4>)
 80045b0:	4013      	ands	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	0c1b      	lsrs	r3, r3, #16
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	0a1b      	lsrs	r3, r3, #8
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	0d9b      	lsrs	r3, r3, #22
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d11a      	bne.n	800462e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 f9a9 	bl	8004954 <RTC_Bcd2ToByte>
 8004602:	4603      	mov	r3, r0
 8004604:	461a      	mov	r2, r3
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	785b      	ldrb	r3, [r3, #1]
 800460e:	4618      	mov	r0, r3
 8004610:	f000 f9a0 	bl	8004954 <RTC_Bcd2ToByte>
 8004614:	4603      	mov	r3, r0
 8004616:	461a      	mov	r2, r3
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	789b      	ldrb	r3, [r3, #2]
 8004620:	4618      	mov	r0, r3
 8004622:	f000 f997 	bl	8004954 <RTC_Bcd2ToByte>
 8004626:	4603      	mov	r3, r0
 8004628:	461a      	mov	r2, r3
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3718      	adds	r7, #24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	007f7f7f 	.word	0x007f7f7f

0800463c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800463c:	b590      	push	{r4, r7, lr}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d101      	bne.n	8004656 <HAL_RTC_SetDate+0x1a>
 8004652:	2302      	movs	r3, #2
 8004654:	e073      	b.n	800473e <HAL_RTC_SetDate+0x102>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2202      	movs	r2, #2
 8004662:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10e      	bne.n	800468a <HAL_RTC_SetDate+0x4e>
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	785b      	ldrb	r3, [r3, #1]
 8004670:	f003 0310 	and.w	r3, r3, #16
 8004674:	2b00      	cmp	r3, #0
 8004676:	d008      	beq.n	800468a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	785b      	ldrb	r3, [r3, #1]
 800467c:	f023 0310 	bic.w	r3, r3, #16
 8004680:	b2db      	uxtb	r3, r3
 8004682:	330a      	adds	r3, #10
 8004684:	b2da      	uxtb	r2, r3
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d11c      	bne.n	80046ca <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	78db      	ldrb	r3, [r3, #3]
 8004694:	4618      	mov	r0, r3
 8004696:	f000 f93d 	bl	8004914 <RTC_ByteToBcd2>
 800469a:	4603      	mov	r3, r0
 800469c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	785b      	ldrb	r3, [r3, #1]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 f936 	bl	8004914 <RTC_ByteToBcd2>
 80046a8:	4603      	mov	r3, r0
 80046aa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80046ac:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	789b      	ldrb	r3, [r3, #2]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 f92e 	bl	8004914 <RTC_ByteToBcd2>
 80046b8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80046ba:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80046c4:	4313      	orrs	r3, r2
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	e00e      	b.n	80046e8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	78db      	ldrb	r3, [r3, #3]
 80046ce:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	785b      	ldrb	r3, [r3, #1]
 80046d4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80046d6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80046dc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80046e4:	4313      	orrs	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	22ca      	movs	r2, #202	@ 0xca
 80046ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2253      	movs	r2, #83	@ 0x53
 80046f6:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 f899 	bl	8004830 <RTC_EnterInitMode>
 80046fe:	4603      	mov	r3, r0
 8004700:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004702:	7cfb      	ldrb	r3, [r7, #19]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10a      	bne.n	800471e <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	6979      	ldr	r1, [r7, #20]
 800470e:	4b0e      	ldr	r3, [pc, #56]	@ (8004748 <HAL_RTC_SetDate+0x10c>)
 8004710:	400b      	ands	r3, r1
 8004712:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 f8bf 	bl	8004898 <RTC_ExitInitMode>
 800471a:	4603      	mov	r3, r0
 800471c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	22ff      	movs	r2, #255	@ 0xff
 8004724:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8004726:	7cfb      	ldrb	r3, [r7, #19]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d103      	bne.n	8004734 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800473c:	7cfb      	ldrb	r3, [r7, #19]


}
 800473e:	4618      	mov	r0, r3
 8004740:	371c      	adds	r7, #28
 8004742:	46bd      	mov	sp, r7
 8004744:	bd90      	pop	{r4, r7, pc}
 8004746:	bf00      	nop
 8004748:	00ffff3f 	.word	0x00ffff3f

0800474c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	4b21      	ldr	r3, [pc, #132]	@ (80047e4 <HAL_RTC_GetDate+0x98>)
 8004760:	4013      	ands	r3, r2
 8004762:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	0c1b      	lsrs	r3, r3, #16
 8004768:	b2da      	uxtb	r2, r3
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	0a1b      	lsrs	r3, r3, #8
 8004772:	b2db      	uxtb	r3, r3
 8004774:	f003 031f 	and.w	r3, r3, #31
 8004778:	b2da      	uxtb	r2, r3
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	b2db      	uxtb	r3, r3
 8004782:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004786:	b2da      	uxtb	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	0b5b      	lsrs	r3, r3, #13
 8004790:	b2db      	uxtb	r3, r3
 8004792:	f003 0307 	and.w	r3, r3, #7
 8004796:	b2da      	uxtb	r2, r3
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d11a      	bne.n	80047d8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	78db      	ldrb	r3, [r3, #3]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 f8d4 	bl	8004954 <RTC_Bcd2ToByte>
 80047ac:	4603      	mov	r3, r0
 80047ae:	461a      	mov	r2, r3
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	785b      	ldrb	r3, [r3, #1]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 f8cb 	bl	8004954 <RTC_Bcd2ToByte>
 80047be:	4603      	mov	r3, r0
 80047c0:	461a      	mov	r2, r3
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	789b      	ldrb	r3, [r3, #2]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 f8c2 	bl	8004954 <RTC_Bcd2ToByte>
 80047d0:	4603      	mov	r3, r0
 80047d2:	461a      	mov	r2, r3
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	00ffff3f 	.word	0x00ffff3f

080047e8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a0d      	ldr	r2, [pc, #52]	@ (800482c <HAL_RTC_WaitForSynchro+0x44>)
 80047f6:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 80047f8:	f7fc ff78 	bl	80016ec <HAL_GetTick>
 80047fc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80047fe:	e009      	b.n	8004814 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004800:	f7fc ff74 	bl	80016ec <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800480e:	d901      	bls.n	8004814 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e007      	b.n	8004824 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f003 0320 	and.w	r3, r3, #32
 800481e:	2b00      	cmp	r3, #0
 8004820:	d0ee      	beq.n	8004800 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	0003ff5f 	.word	0x0003ff5f

08004830 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004838:	2300      	movs	r3, #0
 800483a:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004846:	2b00      	cmp	r3, #0
 8004848:	d120      	bne.n	800488c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f04f 32ff 	mov.w	r2, #4294967295
 8004852:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004854:	f7fc ff4a 	bl	80016ec <HAL_GetTick>
 8004858:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800485a:	e00d      	b.n	8004878 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800485c:	f7fc ff46 	bl	80016ec <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800486a:	d905      	bls.n	8004878 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2203      	movs	r2, #3
 8004874:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004882:	2b00      	cmp	r3, #0
 8004884:	d102      	bne.n	800488c <RTC_EnterInitMode+0x5c>
 8004886:	7bfb      	ldrb	r3, [r7, #15]
 8004888:	2b03      	cmp	r3, #3
 800488a:	d1e7      	bne.n	800485c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800488c:	7bfb      	ldrb	r3, [r7, #15]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
	...

08004898 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80048a4:	4b1a      	ldr	r3, [pc, #104]	@ (8004910 <RTC_ExitInitMode+0x78>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	4a19      	ldr	r2, [pc, #100]	@ (8004910 <RTC_ExitInitMode+0x78>)
 80048aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048ae:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80048b0:	4b17      	ldr	r3, [pc, #92]	@ (8004910 <RTC_ExitInitMode+0x78>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 0320 	and.w	r3, r3, #32
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10c      	bne.n	80048d6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7ff ff93 	bl	80047e8 <HAL_RTC_WaitForSynchro>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d01e      	beq.n	8004906 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2203      	movs	r2, #3
 80048cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	73fb      	strb	r3, [r7, #15]
 80048d4:	e017      	b.n	8004906 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80048d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004910 <RTC_ExitInitMode+0x78>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	4a0d      	ldr	r2, [pc, #52]	@ (8004910 <RTC_ExitInitMode+0x78>)
 80048dc:	f023 0320 	bic.w	r3, r3, #32
 80048e0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7ff ff80 	bl	80047e8 <HAL_RTC_WaitForSynchro>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d005      	beq.n	80048fa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2203      	movs	r2, #3
 80048f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80048fa:	4b05      	ldr	r3, [pc, #20]	@ (8004910 <RTC_ExitInitMode+0x78>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	4a04      	ldr	r2, [pc, #16]	@ (8004910 <RTC_ExitInitMode+0x78>)
 8004900:	f043 0320 	orr.w	r3, r3, #32
 8004904:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004906:	7bfb      	ldrb	r3, [r7, #15]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	58004000 	.word	0x58004000

08004914 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	4603      	mov	r3, r0
 800491c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800491e:	2300      	movs	r3, #0
 8004920:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8004922:	79fb      	ldrb	r3, [r7, #7]
 8004924:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8004926:	e005      	b.n	8004934 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	3301      	adds	r3, #1
 800492c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800492e:	7afb      	ldrb	r3, [r7, #11]
 8004930:	3b0a      	subs	r3, #10
 8004932:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8004934:	7afb      	ldrb	r3, [r7, #11]
 8004936:	2b09      	cmp	r3, #9
 8004938:	d8f6      	bhi.n	8004928 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	b2db      	uxtb	r3, r3
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	b2da      	uxtb	r2, r3
 8004942:	7afb      	ldrb	r3, [r7, #11]
 8004944:	4313      	orrs	r3, r2
 8004946:	b2db      	uxtb	r3, r3
}
 8004948:	4618      	mov	r0, r3
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	4603      	mov	r3, r0
 800495c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800495e:	79fb      	ldrb	r3, [r7, #7]
 8004960:	091b      	lsrs	r3, r3, #4
 8004962:	b2db      	uxtb	r3, r3
 8004964:	461a      	mov	r2, r3
 8004966:	0092      	lsls	r2, r2, #2
 8004968:	4413      	add	r3, r2
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800496e:	79fb      	ldrb	r3, [r7, #7]
 8004970:	f003 030f 	and.w	r3, r3, #15
 8004974:	b2da      	uxtb	r2, r3
 8004976:	7bfb      	ldrb	r3, [r7, #15]
 8004978:	4413      	add	r3, r2
 800497a:	b2db      	uxtb	r3, r3
}
 800497c:	4618      	mov	r0, r3
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e10f      	b.n	8004bba <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a87      	ldr	r2, [pc, #540]	@ (8004bc4 <HAL_SPI_Init+0x23c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d00f      	beq.n	80049ca <HAL_SPI_Init+0x42>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a86      	ldr	r2, [pc, #536]	@ (8004bc8 <HAL_SPI_Init+0x240>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d00a      	beq.n	80049ca <HAL_SPI_Init+0x42>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a84      	ldr	r2, [pc, #528]	@ (8004bcc <HAL_SPI_Init+0x244>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d005      	beq.n	80049ca <HAL_SPI_Init+0x42>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	2b0f      	cmp	r3, #15
 80049c4:	d901      	bls.n	80049ca <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e0f7      	b.n	8004bba <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 fbbc 	bl	8005148 <SPI_GetPacketSize>
 80049d0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a7b      	ldr	r2, [pc, #492]	@ (8004bc4 <HAL_SPI_Init+0x23c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d00c      	beq.n	80049f6 <HAL_SPI_Init+0x6e>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a79      	ldr	r2, [pc, #484]	@ (8004bc8 <HAL_SPI_Init+0x240>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d007      	beq.n	80049f6 <HAL_SPI_Init+0x6e>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a78      	ldr	r2, [pc, #480]	@ (8004bcc <HAL_SPI_Init+0x244>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d002      	beq.n	80049f6 <HAL_SPI_Init+0x6e>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	d811      	bhi.n	8004a1a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80049fa:	4a72      	ldr	r2, [pc, #456]	@ (8004bc4 <HAL_SPI_Init+0x23c>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d009      	beq.n	8004a14 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a70      	ldr	r2, [pc, #448]	@ (8004bc8 <HAL_SPI_Init+0x240>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d004      	beq.n	8004a14 <HAL_SPI_Init+0x8c>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a6f      	ldr	r2, [pc, #444]	@ (8004bcc <HAL_SPI_Init+0x244>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d104      	bne.n	8004a1e <HAL_SPI_Init+0x96>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b10      	cmp	r3, #16
 8004a18:	d901      	bls.n	8004a1e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e0cd      	b.n	8004bba <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d106      	bne.n	8004a38 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7fc fb6c 	bl	8001110 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0201 	bic.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8004a5a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a64:	d119      	bne.n	8004a9a <HAL_SPI_Init+0x112>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a6e:	d103      	bne.n	8004a78 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d008      	beq.n	8004a8a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10c      	bne.n	8004a9a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004a84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a88:	d107      	bne.n	8004a9a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004a98:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00f      	beq.n	8004ac6 <HAL_SPI_Init+0x13e>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	2b06      	cmp	r3, #6
 8004aac:	d90b      	bls.n	8004ac6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	e007      	b.n	8004ad6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ad4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	69da      	ldr	r2, [r3, #28]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ae8:	ea42 0103 	orr.w	r1, r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b00:	431a      	orrs	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b06:	431a      	orrs	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	431a      	orrs	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	431a      	orrs	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b36:	ea42 0103 	orr.w	r1, r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d113      	bne.n	8004b76 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b60:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b74:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0201 	bic.w	r2, r2, #1
 8004b84:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00a      	beq.n	8004ba8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	40013000 	.word	0x40013000
 8004bc8:	40003800 	.word	0x40003800
 8004bcc:	40003c00 	.word	0x40003c00

08004bd0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b088      	sub	sp, #32
 8004bd4:	af02      	add	r7, sp, #8
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	603b      	str	r3, [r7, #0]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	3320      	adds	r3, #32
 8004be6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004be8:	f7fc fd80 	bl	80016ec <HAL_GetTick>
 8004bec:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d001      	beq.n	8004bfe <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	e1d1      	b.n	8004fa2 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d002      	beq.n	8004c0a <HAL_SPI_Transmit+0x3a>
 8004c04:	88fb      	ldrh	r3, [r7, #6]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e1c9      	b.n	8004fa2 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d101      	bne.n	8004c1c <HAL_SPI_Transmit+0x4c>
 8004c18:	2302      	movs	r3, #2
 8004c1a:	e1c2      	b.n	8004fa2 <HAL_SPI_Transmit+0x3d2>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2203      	movs	r2, #3
 8004c28:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	88fa      	ldrh	r2, [r7, #6]
 8004c3e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	88fa      	ldrh	r2, [r7, #6]
 8004c46:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8004c74:	d108      	bne.n	8004c88 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	e009      	b.n	8004c9c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004c9a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	4b96      	ldr	r3, [pc, #600]	@ (8004efc <HAL_SPI_Transmit+0x32c>)
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	88f9      	ldrh	r1, [r7, #6]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	6812      	ldr	r2, [r2, #0]
 8004cac:	430b      	orrs	r3, r1
 8004cae:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0201 	orr.w	r2, r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cc8:	d107      	bne.n	8004cda <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cd8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	2b0f      	cmp	r3, #15
 8004ce0:	d947      	bls.n	8004d72 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004ce2:	e03f      	b.n	8004d64 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d114      	bne.n	8004d1c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6812      	ldr	r2, [r2, #0]
 8004cfc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d02:	1d1a      	adds	r2, r3, #4
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004d1a:	e023      	b.n	8004d64 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d1c:	f7fc fce6 	bl	80016ec <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d803      	bhi.n	8004d34 <HAL_SPI_Transmit+0x164>
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d32:	d102      	bne.n	8004d3a <HAL_SPI_Transmit+0x16a>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d114      	bne.n	8004d64 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 f936 	bl	8004fac <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d46:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e11e      	b.n	8004fa2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1b9      	bne.n	8004ce4 <HAL_SPI_Transmit+0x114>
 8004d70:	e0f1      	b.n	8004f56 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	2b07      	cmp	r3, #7
 8004d78:	f240 80e6 	bls.w	8004f48 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004d7c:	e05d      	b.n	8004e3a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d132      	bne.n	8004df2 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d918      	bls.n	8004dca <HAL_SPI_Transmit+0x1fa>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d014      	beq.n	8004dca <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6812      	ldr	r2, [r2, #0]
 8004daa:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004db0:	1d1a      	adds	r2, r3, #4
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	3b02      	subs	r3, #2
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004dc8:	e037      	b.n	8004e3a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dce:	881a      	ldrh	r2, [r3, #0]
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dd8:	1c9a      	adds	r2, r3, #2
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	3b01      	subs	r3, #1
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004df0:	e023      	b.n	8004e3a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004df2:	f7fc fc7b 	bl	80016ec <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d803      	bhi.n	8004e0a <HAL_SPI_Transmit+0x23a>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e08:	d102      	bne.n	8004e10 <HAL_SPI_Transmit+0x240>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d114      	bne.n	8004e3a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 f8cb 	bl	8004fac <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e1c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e0b3      	b.n	8004fa2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d19b      	bne.n	8004d7e <HAL_SPI_Transmit+0x1ae>
 8004e46:	e086      	b.n	8004f56 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d154      	bne.n	8004f00 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	2b03      	cmp	r3, #3
 8004e60:	d918      	bls.n	8004e94 <HAL_SPI_Transmit+0x2c4>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e66:	2b40      	cmp	r3, #64	@ 0x40
 8004e68:	d914      	bls.n	8004e94 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6812      	ldr	r2, [r2, #0]
 8004e74:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e7a:	1d1a      	adds	r2, r3, #4
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	3b04      	subs	r3, #4
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004e92:	e059      	b.n	8004f48 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d917      	bls.n	8004ed0 <HAL_SPI_Transmit+0x300>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d013      	beq.n	8004ed0 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eac:	881a      	ldrh	r2, [r3, #0]
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eb6:	1c9a      	adds	r2, r3, #2
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	3b02      	subs	r3, #2
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004ece:	e03b      	b.n	8004f48 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	3320      	adds	r3, #32
 8004eda:	7812      	ldrb	r2, [r2, #0]
 8004edc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ee2:	1c5a      	adds	r2, r3, #1
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004efa:	e025      	b.n	8004f48 <HAL_SPI_Transmit+0x378>
 8004efc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f00:	f7fc fbf4 	bl	80016ec <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d803      	bhi.n	8004f18 <HAL_SPI_Transmit+0x348>
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f16:	d102      	bne.n	8004f1e <HAL_SPI_Transmit+0x34e>
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d114      	bne.n	8004f48 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 f844 	bl	8004fac <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f2a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e02c      	b.n	8004fa2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f47f af79 	bne.w	8004e48 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	2108      	movs	r1, #8
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 f8c3 	bl	80050ec <SPI_WaitOnFlagUntilTimeout>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d007      	beq.n	8004f7c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f72:	f043 0220 	orr.w	r2, r3, #32
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 f815 	bl	8004fac <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d001      	beq.n	8004fa0 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e000      	b.n	8004fa2 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
  }
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3718      	adds	r7, #24
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop

08004fac <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	699a      	ldr	r2, [r3, #24]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f042 0208 	orr.w	r2, r2, #8
 8004fca:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	699a      	ldr	r2, [r3, #24]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f042 0210 	orr.w	r2, r2, #16
 8004fda:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 0201 	bic.w	r2, r2, #1
 8004fea:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6919      	ldr	r1, [r3, #16]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	4b3c      	ldr	r3, [pc, #240]	@ (80050e8 <SPI_CloseTransfer+0x13c>)
 8004ff8:	400b      	ands	r3, r1
 8004ffa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689a      	ldr	r2, [r3, #8]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800500a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b04      	cmp	r3, #4
 8005016:	d014      	beq.n	8005042 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f003 0320 	and.w	r3, r3, #32
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00f      	beq.n	8005042 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005028:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	699a      	ldr	r2, [r3, #24]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f042 0220 	orr.w	r2, r2, #32
 8005040:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b03      	cmp	r3, #3
 800504c:	d014      	beq.n	8005078 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00f      	beq.n	8005078 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800505e:	f043 0204 	orr.w	r2, r3, #4
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699a      	ldr	r2, [r3, #24]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005076:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00f      	beq.n	80050a2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005088:	f043 0201 	orr.w	r2, r3, #1
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	699a      	ldr	r2, [r3, #24]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050a0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00f      	beq.n	80050cc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050b2:	f043 0208 	orr.w	r2, r3, #8
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	699a      	ldr	r2, [r3, #24]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050ca:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80050dc:	bf00      	nop
 80050de:	3714      	adds	r7, #20
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	fffffc90 	.word	0xfffffc90

080050ec <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	603b      	str	r3, [r7, #0]
 80050f8:	4613      	mov	r3, r2
 80050fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80050fc:	e010      	b.n	8005120 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050fe:	f7fc faf5 	bl	80016ec <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	429a      	cmp	r2, r3
 800510c:	d803      	bhi.n	8005116 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005114:	d102      	bne.n	800511c <SPI_WaitOnFlagUntilTimeout+0x30>
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e00f      	b.n	8005140 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	695a      	ldr	r2, [r3, #20]
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	4013      	ands	r3, r2
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	429a      	cmp	r2, r3
 800512e:	bf0c      	ite	eq
 8005130:	2301      	moveq	r3, #1
 8005132:	2300      	movne	r3, #0
 8005134:	b2db      	uxtb	r3, r3
 8005136:	461a      	mov	r2, r3
 8005138:	79fb      	ldrb	r3, [r7, #7]
 800513a:	429a      	cmp	r2, r3
 800513c:	d0df      	beq.n	80050fe <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005154:	095b      	lsrs	r3, r3, #5
 8005156:	3301      	adds	r3, #1
 8005158:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	3301      	adds	r3, #1
 8005160:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	3307      	adds	r3, #7
 8005166:	08db      	lsrs	r3, r3, #3
 8005168:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	fb02 f303 	mul.w	r3, r2, r3
}
 8005172:	4618      	mov	r0, r3
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <__cvt>:
 800517e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005180:	ed2d 8b02 	vpush	{d8}
 8005184:	eeb0 8b40 	vmov.f64	d8, d0
 8005188:	b085      	sub	sp, #20
 800518a:	4617      	mov	r7, r2
 800518c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800518e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005190:	ee18 2a90 	vmov	r2, s17
 8005194:	f025 0520 	bic.w	r5, r5, #32
 8005198:	2a00      	cmp	r2, #0
 800519a:	bfb6      	itet	lt
 800519c:	222d      	movlt	r2, #45	@ 0x2d
 800519e:	2200      	movge	r2, #0
 80051a0:	eeb1 8b40 	vneglt.f64	d8, d0
 80051a4:	2d46      	cmp	r5, #70	@ 0x46
 80051a6:	460c      	mov	r4, r1
 80051a8:	701a      	strb	r2, [r3, #0]
 80051aa:	d004      	beq.n	80051b6 <__cvt+0x38>
 80051ac:	2d45      	cmp	r5, #69	@ 0x45
 80051ae:	d100      	bne.n	80051b2 <__cvt+0x34>
 80051b0:	3401      	adds	r4, #1
 80051b2:	2102      	movs	r1, #2
 80051b4:	e000      	b.n	80051b8 <__cvt+0x3a>
 80051b6:	2103      	movs	r1, #3
 80051b8:	ab03      	add	r3, sp, #12
 80051ba:	9301      	str	r3, [sp, #4]
 80051bc:	ab02      	add	r3, sp, #8
 80051be:	9300      	str	r3, [sp, #0]
 80051c0:	4622      	mov	r2, r4
 80051c2:	4633      	mov	r3, r6
 80051c4:	eeb0 0b48 	vmov.f64	d0, d8
 80051c8:	f001 f896 	bl	80062f8 <_dtoa_r>
 80051cc:	2d47      	cmp	r5, #71	@ 0x47
 80051ce:	d114      	bne.n	80051fa <__cvt+0x7c>
 80051d0:	07fb      	lsls	r3, r7, #31
 80051d2:	d50a      	bpl.n	80051ea <__cvt+0x6c>
 80051d4:	1902      	adds	r2, r0, r4
 80051d6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80051da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051de:	bf08      	it	eq
 80051e0:	9203      	streq	r2, [sp, #12]
 80051e2:	2130      	movs	r1, #48	@ 0x30
 80051e4:	9b03      	ldr	r3, [sp, #12]
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d319      	bcc.n	800521e <__cvt+0xa0>
 80051ea:	9b03      	ldr	r3, [sp, #12]
 80051ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80051ee:	1a1b      	subs	r3, r3, r0
 80051f0:	6013      	str	r3, [r2, #0]
 80051f2:	b005      	add	sp, #20
 80051f4:	ecbd 8b02 	vpop	{d8}
 80051f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051fa:	2d46      	cmp	r5, #70	@ 0x46
 80051fc:	eb00 0204 	add.w	r2, r0, r4
 8005200:	d1e9      	bne.n	80051d6 <__cvt+0x58>
 8005202:	7803      	ldrb	r3, [r0, #0]
 8005204:	2b30      	cmp	r3, #48	@ 0x30
 8005206:	d107      	bne.n	8005218 <__cvt+0x9a>
 8005208:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800520c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005210:	bf1c      	itt	ne
 8005212:	f1c4 0401 	rsbne	r4, r4, #1
 8005216:	6034      	strne	r4, [r6, #0]
 8005218:	6833      	ldr	r3, [r6, #0]
 800521a:	441a      	add	r2, r3
 800521c:	e7db      	b.n	80051d6 <__cvt+0x58>
 800521e:	1c5c      	adds	r4, r3, #1
 8005220:	9403      	str	r4, [sp, #12]
 8005222:	7019      	strb	r1, [r3, #0]
 8005224:	e7de      	b.n	80051e4 <__cvt+0x66>

08005226 <__exponent>:
 8005226:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005228:	2900      	cmp	r1, #0
 800522a:	bfba      	itte	lt
 800522c:	4249      	neglt	r1, r1
 800522e:	232d      	movlt	r3, #45	@ 0x2d
 8005230:	232b      	movge	r3, #43	@ 0x2b
 8005232:	2909      	cmp	r1, #9
 8005234:	7002      	strb	r2, [r0, #0]
 8005236:	7043      	strb	r3, [r0, #1]
 8005238:	dd29      	ble.n	800528e <__exponent+0x68>
 800523a:	f10d 0307 	add.w	r3, sp, #7
 800523e:	461d      	mov	r5, r3
 8005240:	270a      	movs	r7, #10
 8005242:	461a      	mov	r2, r3
 8005244:	fbb1 f6f7 	udiv	r6, r1, r7
 8005248:	fb07 1416 	mls	r4, r7, r6, r1
 800524c:	3430      	adds	r4, #48	@ 0x30
 800524e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005252:	460c      	mov	r4, r1
 8005254:	2c63      	cmp	r4, #99	@ 0x63
 8005256:	f103 33ff 	add.w	r3, r3, #4294967295
 800525a:	4631      	mov	r1, r6
 800525c:	dcf1      	bgt.n	8005242 <__exponent+0x1c>
 800525e:	3130      	adds	r1, #48	@ 0x30
 8005260:	1e94      	subs	r4, r2, #2
 8005262:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005266:	1c41      	adds	r1, r0, #1
 8005268:	4623      	mov	r3, r4
 800526a:	42ab      	cmp	r3, r5
 800526c:	d30a      	bcc.n	8005284 <__exponent+0x5e>
 800526e:	f10d 0309 	add.w	r3, sp, #9
 8005272:	1a9b      	subs	r3, r3, r2
 8005274:	42ac      	cmp	r4, r5
 8005276:	bf88      	it	hi
 8005278:	2300      	movhi	r3, #0
 800527a:	3302      	adds	r3, #2
 800527c:	4403      	add	r3, r0
 800527e:	1a18      	subs	r0, r3, r0
 8005280:	b003      	add	sp, #12
 8005282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005284:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005288:	f801 6f01 	strb.w	r6, [r1, #1]!
 800528c:	e7ed      	b.n	800526a <__exponent+0x44>
 800528e:	2330      	movs	r3, #48	@ 0x30
 8005290:	3130      	adds	r1, #48	@ 0x30
 8005292:	7083      	strb	r3, [r0, #2]
 8005294:	70c1      	strb	r1, [r0, #3]
 8005296:	1d03      	adds	r3, r0, #4
 8005298:	e7f1      	b.n	800527e <__exponent+0x58>
 800529a:	0000      	movs	r0, r0
 800529c:	0000      	movs	r0, r0
	...

080052a0 <_printf_float>:
 80052a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052a4:	b08d      	sub	sp, #52	@ 0x34
 80052a6:	460c      	mov	r4, r1
 80052a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80052ac:	4616      	mov	r6, r2
 80052ae:	461f      	mov	r7, r3
 80052b0:	4605      	mov	r5, r0
 80052b2:	f000 ff19 	bl	80060e8 <_localeconv_r>
 80052b6:	f8d0 b000 	ldr.w	fp, [r0]
 80052ba:	4658      	mov	r0, fp
 80052bc:	f7fb f860 	bl	8000380 <strlen>
 80052c0:	2300      	movs	r3, #0
 80052c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80052c4:	f8d8 3000 	ldr.w	r3, [r8]
 80052c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80052cc:	6822      	ldr	r2, [r4, #0]
 80052ce:	9005      	str	r0, [sp, #20]
 80052d0:	3307      	adds	r3, #7
 80052d2:	f023 0307 	bic.w	r3, r3, #7
 80052d6:	f103 0108 	add.w	r1, r3, #8
 80052da:	f8c8 1000 	str.w	r1, [r8]
 80052de:	ed93 0b00 	vldr	d0, [r3]
 80052e2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8005540 <_printf_float+0x2a0>
 80052e6:	eeb0 7bc0 	vabs.f64	d7, d0
 80052ea:	eeb4 7b46 	vcmp.f64	d7, d6
 80052ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052f2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80052f6:	dd24      	ble.n	8005342 <_printf_float+0xa2>
 80052f8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80052fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005300:	d502      	bpl.n	8005308 <_printf_float+0x68>
 8005302:	232d      	movs	r3, #45	@ 0x2d
 8005304:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005308:	498f      	ldr	r1, [pc, #572]	@ (8005548 <_printf_float+0x2a8>)
 800530a:	4b90      	ldr	r3, [pc, #576]	@ (800554c <_printf_float+0x2ac>)
 800530c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8005310:	bf8c      	ite	hi
 8005312:	4688      	movhi	r8, r1
 8005314:	4698      	movls	r8, r3
 8005316:	f022 0204 	bic.w	r2, r2, #4
 800531a:	2303      	movs	r3, #3
 800531c:	6123      	str	r3, [r4, #16]
 800531e:	6022      	str	r2, [r4, #0]
 8005320:	f04f 0a00 	mov.w	sl, #0
 8005324:	9700      	str	r7, [sp, #0]
 8005326:	4633      	mov	r3, r6
 8005328:	aa0b      	add	r2, sp, #44	@ 0x2c
 800532a:	4621      	mov	r1, r4
 800532c:	4628      	mov	r0, r5
 800532e:	f000 f9d1 	bl	80056d4 <_printf_common>
 8005332:	3001      	adds	r0, #1
 8005334:	f040 8089 	bne.w	800544a <_printf_float+0x1aa>
 8005338:	f04f 30ff 	mov.w	r0, #4294967295
 800533c:	b00d      	add	sp, #52	@ 0x34
 800533e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005342:	eeb4 0b40 	vcmp.f64	d0, d0
 8005346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800534a:	d709      	bvc.n	8005360 <_printf_float+0xc0>
 800534c:	ee10 3a90 	vmov	r3, s1
 8005350:	2b00      	cmp	r3, #0
 8005352:	bfbc      	itt	lt
 8005354:	232d      	movlt	r3, #45	@ 0x2d
 8005356:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800535a:	497d      	ldr	r1, [pc, #500]	@ (8005550 <_printf_float+0x2b0>)
 800535c:	4b7d      	ldr	r3, [pc, #500]	@ (8005554 <_printf_float+0x2b4>)
 800535e:	e7d5      	b.n	800530c <_printf_float+0x6c>
 8005360:	6863      	ldr	r3, [r4, #4]
 8005362:	1c59      	adds	r1, r3, #1
 8005364:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8005368:	d139      	bne.n	80053de <_printf_float+0x13e>
 800536a:	2306      	movs	r3, #6
 800536c:	6063      	str	r3, [r4, #4]
 800536e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005372:	2300      	movs	r3, #0
 8005374:	6022      	str	r2, [r4, #0]
 8005376:	9303      	str	r3, [sp, #12]
 8005378:	ab0a      	add	r3, sp, #40	@ 0x28
 800537a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800537e:	ab09      	add	r3, sp, #36	@ 0x24
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	6861      	ldr	r1, [r4, #4]
 8005384:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005388:	4628      	mov	r0, r5
 800538a:	f7ff fef8 	bl	800517e <__cvt>
 800538e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005392:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005394:	4680      	mov	r8, r0
 8005396:	d129      	bne.n	80053ec <_printf_float+0x14c>
 8005398:	1cc8      	adds	r0, r1, #3
 800539a:	db02      	blt.n	80053a2 <_printf_float+0x102>
 800539c:	6863      	ldr	r3, [r4, #4]
 800539e:	4299      	cmp	r1, r3
 80053a0:	dd41      	ble.n	8005426 <_printf_float+0x186>
 80053a2:	f1a9 0902 	sub.w	r9, r9, #2
 80053a6:	fa5f f989 	uxtb.w	r9, r9
 80053aa:	3901      	subs	r1, #1
 80053ac:	464a      	mov	r2, r9
 80053ae:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80053b2:	9109      	str	r1, [sp, #36]	@ 0x24
 80053b4:	f7ff ff37 	bl	8005226 <__exponent>
 80053b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80053ba:	1813      	adds	r3, r2, r0
 80053bc:	2a01      	cmp	r2, #1
 80053be:	4682      	mov	sl, r0
 80053c0:	6123      	str	r3, [r4, #16]
 80053c2:	dc02      	bgt.n	80053ca <_printf_float+0x12a>
 80053c4:	6822      	ldr	r2, [r4, #0]
 80053c6:	07d2      	lsls	r2, r2, #31
 80053c8:	d501      	bpl.n	80053ce <_printf_float+0x12e>
 80053ca:	3301      	adds	r3, #1
 80053cc:	6123      	str	r3, [r4, #16]
 80053ce:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d0a6      	beq.n	8005324 <_printf_float+0x84>
 80053d6:	232d      	movs	r3, #45	@ 0x2d
 80053d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053dc:	e7a2      	b.n	8005324 <_printf_float+0x84>
 80053de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80053e2:	d1c4      	bne.n	800536e <_printf_float+0xce>
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1c2      	bne.n	800536e <_printf_float+0xce>
 80053e8:	2301      	movs	r3, #1
 80053ea:	e7bf      	b.n	800536c <_printf_float+0xcc>
 80053ec:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80053f0:	d9db      	bls.n	80053aa <_printf_float+0x10a>
 80053f2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80053f6:	d118      	bne.n	800542a <_printf_float+0x18a>
 80053f8:	2900      	cmp	r1, #0
 80053fa:	6863      	ldr	r3, [r4, #4]
 80053fc:	dd0b      	ble.n	8005416 <_printf_float+0x176>
 80053fe:	6121      	str	r1, [r4, #16]
 8005400:	b913      	cbnz	r3, 8005408 <_printf_float+0x168>
 8005402:	6822      	ldr	r2, [r4, #0]
 8005404:	07d0      	lsls	r0, r2, #31
 8005406:	d502      	bpl.n	800540e <_printf_float+0x16e>
 8005408:	3301      	adds	r3, #1
 800540a:	440b      	add	r3, r1
 800540c:	6123      	str	r3, [r4, #16]
 800540e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005410:	f04f 0a00 	mov.w	sl, #0
 8005414:	e7db      	b.n	80053ce <_printf_float+0x12e>
 8005416:	b913      	cbnz	r3, 800541e <_printf_float+0x17e>
 8005418:	6822      	ldr	r2, [r4, #0]
 800541a:	07d2      	lsls	r2, r2, #31
 800541c:	d501      	bpl.n	8005422 <_printf_float+0x182>
 800541e:	3302      	adds	r3, #2
 8005420:	e7f4      	b.n	800540c <_printf_float+0x16c>
 8005422:	2301      	movs	r3, #1
 8005424:	e7f2      	b.n	800540c <_printf_float+0x16c>
 8005426:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800542a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800542c:	4299      	cmp	r1, r3
 800542e:	db05      	blt.n	800543c <_printf_float+0x19c>
 8005430:	6823      	ldr	r3, [r4, #0]
 8005432:	6121      	str	r1, [r4, #16]
 8005434:	07d8      	lsls	r0, r3, #31
 8005436:	d5ea      	bpl.n	800540e <_printf_float+0x16e>
 8005438:	1c4b      	adds	r3, r1, #1
 800543a:	e7e7      	b.n	800540c <_printf_float+0x16c>
 800543c:	2900      	cmp	r1, #0
 800543e:	bfd4      	ite	le
 8005440:	f1c1 0202 	rsble	r2, r1, #2
 8005444:	2201      	movgt	r2, #1
 8005446:	4413      	add	r3, r2
 8005448:	e7e0      	b.n	800540c <_printf_float+0x16c>
 800544a:	6823      	ldr	r3, [r4, #0]
 800544c:	055a      	lsls	r2, r3, #21
 800544e:	d407      	bmi.n	8005460 <_printf_float+0x1c0>
 8005450:	6923      	ldr	r3, [r4, #16]
 8005452:	4642      	mov	r2, r8
 8005454:	4631      	mov	r1, r6
 8005456:	4628      	mov	r0, r5
 8005458:	47b8      	blx	r7
 800545a:	3001      	adds	r0, #1
 800545c:	d12a      	bne.n	80054b4 <_printf_float+0x214>
 800545e:	e76b      	b.n	8005338 <_printf_float+0x98>
 8005460:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8005464:	f240 80e0 	bls.w	8005628 <_printf_float+0x388>
 8005468:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800546c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005474:	d133      	bne.n	80054de <_printf_float+0x23e>
 8005476:	4a38      	ldr	r2, [pc, #224]	@ (8005558 <_printf_float+0x2b8>)
 8005478:	2301      	movs	r3, #1
 800547a:	4631      	mov	r1, r6
 800547c:	4628      	mov	r0, r5
 800547e:	47b8      	blx	r7
 8005480:	3001      	adds	r0, #1
 8005482:	f43f af59 	beq.w	8005338 <_printf_float+0x98>
 8005486:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800548a:	4543      	cmp	r3, r8
 800548c:	db02      	blt.n	8005494 <_printf_float+0x1f4>
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	07d8      	lsls	r0, r3, #31
 8005492:	d50f      	bpl.n	80054b4 <_printf_float+0x214>
 8005494:	9b05      	ldr	r3, [sp, #20]
 8005496:	465a      	mov	r2, fp
 8005498:	4631      	mov	r1, r6
 800549a:	4628      	mov	r0, r5
 800549c:	47b8      	blx	r7
 800549e:	3001      	adds	r0, #1
 80054a0:	f43f af4a 	beq.w	8005338 <_printf_float+0x98>
 80054a4:	f04f 0900 	mov.w	r9, #0
 80054a8:	f108 38ff 	add.w	r8, r8, #4294967295
 80054ac:	f104 0a1a 	add.w	sl, r4, #26
 80054b0:	45c8      	cmp	r8, r9
 80054b2:	dc09      	bgt.n	80054c8 <_printf_float+0x228>
 80054b4:	6823      	ldr	r3, [r4, #0]
 80054b6:	079b      	lsls	r3, r3, #30
 80054b8:	f100 8107 	bmi.w	80056ca <_printf_float+0x42a>
 80054bc:	68e0      	ldr	r0, [r4, #12]
 80054be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054c0:	4298      	cmp	r0, r3
 80054c2:	bfb8      	it	lt
 80054c4:	4618      	movlt	r0, r3
 80054c6:	e739      	b.n	800533c <_printf_float+0x9c>
 80054c8:	2301      	movs	r3, #1
 80054ca:	4652      	mov	r2, sl
 80054cc:	4631      	mov	r1, r6
 80054ce:	4628      	mov	r0, r5
 80054d0:	47b8      	blx	r7
 80054d2:	3001      	adds	r0, #1
 80054d4:	f43f af30 	beq.w	8005338 <_printf_float+0x98>
 80054d8:	f109 0901 	add.w	r9, r9, #1
 80054dc:	e7e8      	b.n	80054b0 <_printf_float+0x210>
 80054de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	dc3b      	bgt.n	800555c <_printf_float+0x2bc>
 80054e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005558 <_printf_float+0x2b8>)
 80054e6:	2301      	movs	r3, #1
 80054e8:	4631      	mov	r1, r6
 80054ea:	4628      	mov	r0, r5
 80054ec:	47b8      	blx	r7
 80054ee:	3001      	adds	r0, #1
 80054f0:	f43f af22 	beq.w	8005338 <_printf_float+0x98>
 80054f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80054f8:	ea59 0303 	orrs.w	r3, r9, r3
 80054fc:	d102      	bne.n	8005504 <_printf_float+0x264>
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	07d9      	lsls	r1, r3, #31
 8005502:	d5d7      	bpl.n	80054b4 <_printf_float+0x214>
 8005504:	9b05      	ldr	r3, [sp, #20]
 8005506:	465a      	mov	r2, fp
 8005508:	4631      	mov	r1, r6
 800550a:	4628      	mov	r0, r5
 800550c:	47b8      	blx	r7
 800550e:	3001      	adds	r0, #1
 8005510:	f43f af12 	beq.w	8005338 <_printf_float+0x98>
 8005514:	f04f 0a00 	mov.w	sl, #0
 8005518:	f104 0b1a 	add.w	fp, r4, #26
 800551c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800551e:	425b      	negs	r3, r3
 8005520:	4553      	cmp	r3, sl
 8005522:	dc01      	bgt.n	8005528 <_printf_float+0x288>
 8005524:	464b      	mov	r3, r9
 8005526:	e794      	b.n	8005452 <_printf_float+0x1b2>
 8005528:	2301      	movs	r3, #1
 800552a:	465a      	mov	r2, fp
 800552c:	4631      	mov	r1, r6
 800552e:	4628      	mov	r0, r5
 8005530:	47b8      	blx	r7
 8005532:	3001      	adds	r0, #1
 8005534:	f43f af00 	beq.w	8005338 <_printf_float+0x98>
 8005538:	f10a 0a01 	add.w	sl, sl, #1
 800553c:	e7ee      	b.n	800551c <_printf_float+0x27c>
 800553e:	bf00      	nop
 8005540:	ffffffff 	.word	0xffffffff
 8005544:	7fefffff 	.word	0x7fefffff
 8005548:	08009814 	.word	0x08009814
 800554c:	08009810 	.word	0x08009810
 8005550:	0800981c 	.word	0x0800981c
 8005554:	08009818 	.word	0x08009818
 8005558:	08009820 	.word	0x08009820
 800555c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800555e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005562:	4553      	cmp	r3, sl
 8005564:	bfa8      	it	ge
 8005566:	4653      	movge	r3, sl
 8005568:	2b00      	cmp	r3, #0
 800556a:	4699      	mov	r9, r3
 800556c:	dc37      	bgt.n	80055de <_printf_float+0x33e>
 800556e:	2300      	movs	r3, #0
 8005570:	9307      	str	r3, [sp, #28]
 8005572:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005576:	f104 021a 	add.w	r2, r4, #26
 800557a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800557c:	9907      	ldr	r1, [sp, #28]
 800557e:	9306      	str	r3, [sp, #24]
 8005580:	eba3 0309 	sub.w	r3, r3, r9
 8005584:	428b      	cmp	r3, r1
 8005586:	dc31      	bgt.n	80055ec <_printf_float+0x34c>
 8005588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800558a:	459a      	cmp	sl, r3
 800558c:	dc3b      	bgt.n	8005606 <_printf_float+0x366>
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	07da      	lsls	r2, r3, #31
 8005592:	d438      	bmi.n	8005606 <_printf_float+0x366>
 8005594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005596:	ebaa 0903 	sub.w	r9, sl, r3
 800559a:	9b06      	ldr	r3, [sp, #24]
 800559c:	ebaa 0303 	sub.w	r3, sl, r3
 80055a0:	4599      	cmp	r9, r3
 80055a2:	bfa8      	it	ge
 80055a4:	4699      	movge	r9, r3
 80055a6:	f1b9 0f00 	cmp.w	r9, #0
 80055aa:	dc34      	bgt.n	8005616 <_printf_float+0x376>
 80055ac:	f04f 0800 	mov.w	r8, #0
 80055b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055b4:	f104 0b1a 	add.w	fp, r4, #26
 80055b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055ba:	ebaa 0303 	sub.w	r3, sl, r3
 80055be:	eba3 0309 	sub.w	r3, r3, r9
 80055c2:	4543      	cmp	r3, r8
 80055c4:	f77f af76 	ble.w	80054b4 <_printf_float+0x214>
 80055c8:	2301      	movs	r3, #1
 80055ca:	465a      	mov	r2, fp
 80055cc:	4631      	mov	r1, r6
 80055ce:	4628      	mov	r0, r5
 80055d0:	47b8      	blx	r7
 80055d2:	3001      	adds	r0, #1
 80055d4:	f43f aeb0 	beq.w	8005338 <_printf_float+0x98>
 80055d8:	f108 0801 	add.w	r8, r8, #1
 80055dc:	e7ec      	b.n	80055b8 <_printf_float+0x318>
 80055de:	4642      	mov	r2, r8
 80055e0:	4631      	mov	r1, r6
 80055e2:	4628      	mov	r0, r5
 80055e4:	47b8      	blx	r7
 80055e6:	3001      	adds	r0, #1
 80055e8:	d1c1      	bne.n	800556e <_printf_float+0x2ce>
 80055ea:	e6a5      	b.n	8005338 <_printf_float+0x98>
 80055ec:	2301      	movs	r3, #1
 80055ee:	4631      	mov	r1, r6
 80055f0:	4628      	mov	r0, r5
 80055f2:	9206      	str	r2, [sp, #24]
 80055f4:	47b8      	blx	r7
 80055f6:	3001      	adds	r0, #1
 80055f8:	f43f ae9e 	beq.w	8005338 <_printf_float+0x98>
 80055fc:	9b07      	ldr	r3, [sp, #28]
 80055fe:	9a06      	ldr	r2, [sp, #24]
 8005600:	3301      	adds	r3, #1
 8005602:	9307      	str	r3, [sp, #28]
 8005604:	e7b9      	b.n	800557a <_printf_float+0x2da>
 8005606:	9b05      	ldr	r3, [sp, #20]
 8005608:	465a      	mov	r2, fp
 800560a:	4631      	mov	r1, r6
 800560c:	4628      	mov	r0, r5
 800560e:	47b8      	blx	r7
 8005610:	3001      	adds	r0, #1
 8005612:	d1bf      	bne.n	8005594 <_printf_float+0x2f4>
 8005614:	e690      	b.n	8005338 <_printf_float+0x98>
 8005616:	9a06      	ldr	r2, [sp, #24]
 8005618:	464b      	mov	r3, r9
 800561a:	4442      	add	r2, r8
 800561c:	4631      	mov	r1, r6
 800561e:	4628      	mov	r0, r5
 8005620:	47b8      	blx	r7
 8005622:	3001      	adds	r0, #1
 8005624:	d1c2      	bne.n	80055ac <_printf_float+0x30c>
 8005626:	e687      	b.n	8005338 <_printf_float+0x98>
 8005628:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800562c:	f1b9 0f01 	cmp.w	r9, #1
 8005630:	dc01      	bgt.n	8005636 <_printf_float+0x396>
 8005632:	07db      	lsls	r3, r3, #31
 8005634:	d536      	bpl.n	80056a4 <_printf_float+0x404>
 8005636:	2301      	movs	r3, #1
 8005638:	4642      	mov	r2, r8
 800563a:	4631      	mov	r1, r6
 800563c:	4628      	mov	r0, r5
 800563e:	47b8      	blx	r7
 8005640:	3001      	adds	r0, #1
 8005642:	f43f ae79 	beq.w	8005338 <_printf_float+0x98>
 8005646:	9b05      	ldr	r3, [sp, #20]
 8005648:	465a      	mov	r2, fp
 800564a:	4631      	mov	r1, r6
 800564c:	4628      	mov	r0, r5
 800564e:	47b8      	blx	r7
 8005650:	3001      	adds	r0, #1
 8005652:	f43f ae71 	beq.w	8005338 <_printf_float+0x98>
 8005656:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800565a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800565e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005662:	f109 39ff 	add.w	r9, r9, #4294967295
 8005666:	d018      	beq.n	800569a <_printf_float+0x3fa>
 8005668:	464b      	mov	r3, r9
 800566a:	f108 0201 	add.w	r2, r8, #1
 800566e:	4631      	mov	r1, r6
 8005670:	4628      	mov	r0, r5
 8005672:	47b8      	blx	r7
 8005674:	3001      	adds	r0, #1
 8005676:	d10c      	bne.n	8005692 <_printf_float+0x3f2>
 8005678:	e65e      	b.n	8005338 <_printf_float+0x98>
 800567a:	2301      	movs	r3, #1
 800567c:	465a      	mov	r2, fp
 800567e:	4631      	mov	r1, r6
 8005680:	4628      	mov	r0, r5
 8005682:	47b8      	blx	r7
 8005684:	3001      	adds	r0, #1
 8005686:	f43f ae57 	beq.w	8005338 <_printf_float+0x98>
 800568a:	f108 0801 	add.w	r8, r8, #1
 800568e:	45c8      	cmp	r8, r9
 8005690:	dbf3      	blt.n	800567a <_printf_float+0x3da>
 8005692:	4653      	mov	r3, sl
 8005694:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005698:	e6dc      	b.n	8005454 <_printf_float+0x1b4>
 800569a:	f04f 0800 	mov.w	r8, #0
 800569e:	f104 0b1a 	add.w	fp, r4, #26
 80056a2:	e7f4      	b.n	800568e <_printf_float+0x3ee>
 80056a4:	2301      	movs	r3, #1
 80056a6:	4642      	mov	r2, r8
 80056a8:	e7e1      	b.n	800566e <_printf_float+0x3ce>
 80056aa:	2301      	movs	r3, #1
 80056ac:	464a      	mov	r2, r9
 80056ae:	4631      	mov	r1, r6
 80056b0:	4628      	mov	r0, r5
 80056b2:	47b8      	blx	r7
 80056b4:	3001      	adds	r0, #1
 80056b6:	f43f ae3f 	beq.w	8005338 <_printf_float+0x98>
 80056ba:	f108 0801 	add.w	r8, r8, #1
 80056be:	68e3      	ldr	r3, [r4, #12]
 80056c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80056c2:	1a5b      	subs	r3, r3, r1
 80056c4:	4543      	cmp	r3, r8
 80056c6:	dcf0      	bgt.n	80056aa <_printf_float+0x40a>
 80056c8:	e6f8      	b.n	80054bc <_printf_float+0x21c>
 80056ca:	f04f 0800 	mov.w	r8, #0
 80056ce:	f104 0919 	add.w	r9, r4, #25
 80056d2:	e7f4      	b.n	80056be <_printf_float+0x41e>

080056d4 <_printf_common>:
 80056d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056d8:	4616      	mov	r6, r2
 80056da:	4698      	mov	r8, r3
 80056dc:	688a      	ldr	r2, [r1, #8]
 80056de:	690b      	ldr	r3, [r1, #16]
 80056e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056e4:	4293      	cmp	r3, r2
 80056e6:	bfb8      	it	lt
 80056e8:	4613      	movlt	r3, r2
 80056ea:	6033      	str	r3, [r6, #0]
 80056ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80056f0:	4607      	mov	r7, r0
 80056f2:	460c      	mov	r4, r1
 80056f4:	b10a      	cbz	r2, 80056fa <_printf_common+0x26>
 80056f6:	3301      	adds	r3, #1
 80056f8:	6033      	str	r3, [r6, #0]
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	0699      	lsls	r1, r3, #26
 80056fe:	bf42      	ittt	mi
 8005700:	6833      	ldrmi	r3, [r6, #0]
 8005702:	3302      	addmi	r3, #2
 8005704:	6033      	strmi	r3, [r6, #0]
 8005706:	6825      	ldr	r5, [r4, #0]
 8005708:	f015 0506 	ands.w	r5, r5, #6
 800570c:	d106      	bne.n	800571c <_printf_common+0x48>
 800570e:	f104 0a19 	add.w	sl, r4, #25
 8005712:	68e3      	ldr	r3, [r4, #12]
 8005714:	6832      	ldr	r2, [r6, #0]
 8005716:	1a9b      	subs	r3, r3, r2
 8005718:	42ab      	cmp	r3, r5
 800571a:	dc26      	bgt.n	800576a <_printf_common+0x96>
 800571c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005720:	6822      	ldr	r2, [r4, #0]
 8005722:	3b00      	subs	r3, #0
 8005724:	bf18      	it	ne
 8005726:	2301      	movne	r3, #1
 8005728:	0692      	lsls	r2, r2, #26
 800572a:	d42b      	bmi.n	8005784 <_printf_common+0xb0>
 800572c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005730:	4641      	mov	r1, r8
 8005732:	4638      	mov	r0, r7
 8005734:	47c8      	blx	r9
 8005736:	3001      	adds	r0, #1
 8005738:	d01e      	beq.n	8005778 <_printf_common+0xa4>
 800573a:	6823      	ldr	r3, [r4, #0]
 800573c:	6922      	ldr	r2, [r4, #16]
 800573e:	f003 0306 	and.w	r3, r3, #6
 8005742:	2b04      	cmp	r3, #4
 8005744:	bf02      	ittt	eq
 8005746:	68e5      	ldreq	r5, [r4, #12]
 8005748:	6833      	ldreq	r3, [r6, #0]
 800574a:	1aed      	subeq	r5, r5, r3
 800574c:	68a3      	ldr	r3, [r4, #8]
 800574e:	bf0c      	ite	eq
 8005750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005754:	2500      	movne	r5, #0
 8005756:	4293      	cmp	r3, r2
 8005758:	bfc4      	itt	gt
 800575a:	1a9b      	subgt	r3, r3, r2
 800575c:	18ed      	addgt	r5, r5, r3
 800575e:	2600      	movs	r6, #0
 8005760:	341a      	adds	r4, #26
 8005762:	42b5      	cmp	r5, r6
 8005764:	d11a      	bne.n	800579c <_printf_common+0xc8>
 8005766:	2000      	movs	r0, #0
 8005768:	e008      	b.n	800577c <_printf_common+0xa8>
 800576a:	2301      	movs	r3, #1
 800576c:	4652      	mov	r2, sl
 800576e:	4641      	mov	r1, r8
 8005770:	4638      	mov	r0, r7
 8005772:	47c8      	blx	r9
 8005774:	3001      	adds	r0, #1
 8005776:	d103      	bne.n	8005780 <_printf_common+0xac>
 8005778:	f04f 30ff 	mov.w	r0, #4294967295
 800577c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005780:	3501      	adds	r5, #1
 8005782:	e7c6      	b.n	8005712 <_printf_common+0x3e>
 8005784:	18e1      	adds	r1, r4, r3
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	2030      	movs	r0, #48	@ 0x30
 800578a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800578e:	4422      	add	r2, r4
 8005790:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005794:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005798:	3302      	adds	r3, #2
 800579a:	e7c7      	b.n	800572c <_printf_common+0x58>
 800579c:	2301      	movs	r3, #1
 800579e:	4622      	mov	r2, r4
 80057a0:	4641      	mov	r1, r8
 80057a2:	4638      	mov	r0, r7
 80057a4:	47c8      	blx	r9
 80057a6:	3001      	adds	r0, #1
 80057a8:	d0e6      	beq.n	8005778 <_printf_common+0xa4>
 80057aa:	3601      	adds	r6, #1
 80057ac:	e7d9      	b.n	8005762 <_printf_common+0x8e>
	...

080057b0 <_printf_i>:
 80057b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057b4:	7e0f      	ldrb	r7, [r1, #24]
 80057b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80057b8:	2f78      	cmp	r7, #120	@ 0x78
 80057ba:	4691      	mov	r9, r2
 80057bc:	4680      	mov	r8, r0
 80057be:	460c      	mov	r4, r1
 80057c0:	469a      	mov	sl, r3
 80057c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80057c6:	d807      	bhi.n	80057d8 <_printf_i+0x28>
 80057c8:	2f62      	cmp	r7, #98	@ 0x62
 80057ca:	d80a      	bhi.n	80057e2 <_printf_i+0x32>
 80057cc:	2f00      	cmp	r7, #0
 80057ce:	f000 80d1 	beq.w	8005974 <_printf_i+0x1c4>
 80057d2:	2f58      	cmp	r7, #88	@ 0x58
 80057d4:	f000 80b8 	beq.w	8005948 <_printf_i+0x198>
 80057d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80057e0:	e03a      	b.n	8005858 <_printf_i+0xa8>
 80057e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80057e6:	2b15      	cmp	r3, #21
 80057e8:	d8f6      	bhi.n	80057d8 <_printf_i+0x28>
 80057ea:	a101      	add	r1, pc, #4	@ (adr r1, 80057f0 <_printf_i+0x40>)
 80057ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057f0:	08005849 	.word	0x08005849
 80057f4:	0800585d 	.word	0x0800585d
 80057f8:	080057d9 	.word	0x080057d9
 80057fc:	080057d9 	.word	0x080057d9
 8005800:	080057d9 	.word	0x080057d9
 8005804:	080057d9 	.word	0x080057d9
 8005808:	0800585d 	.word	0x0800585d
 800580c:	080057d9 	.word	0x080057d9
 8005810:	080057d9 	.word	0x080057d9
 8005814:	080057d9 	.word	0x080057d9
 8005818:	080057d9 	.word	0x080057d9
 800581c:	0800595b 	.word	0x0800595b
 8005820:	08005887 	.word	0x08005887
 8005824:	08005915 	.word	0x08005915
 8005828:	080057d9 	.word	0x080057d9
 800582c:	080057d9 	.word	0x080057d9
 8005830:	0800597d 	.word	0x0800597d
 8005834:	080057d9 	.word	0x080057d9
 8005838:	08005887 	.word	0x08005887
 800583c:	080057d9 	.word	0x080057d9
 8005840:	080057d9 	.word	0x080057d9
 8005844:	0800591d 	.word	0x0800591d
 8005848:	6833      	ldr	r3, [r6, #0]
 800584a:	1d1a      	adds	r2, r3, #4
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6032      	str	r2, [r6, #0]
 8005850:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005854:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005858:	2301      	movs	r3, #1
 800585a:	e09c      	b.n	8005996 <_printf_i+0x1e6>
 800585c:	6833      	ldr	r3, [r6, #0]
 800585e:	6820      	ldr	r0, [r4, #0]
 8005860:	1d19      	adds	r1, r3, #4
 8005862:	6031      	str	r1, [r6, #0]
 8005864:	0606      	lsls	r6, r0, #24
 8005866:	d501      	bpl.n	800586c <_printf_i+0xbc>
 8005868:	681d      	ldr	r5, [r3, #0]
 800586a:	e003      	b.n	8005874 <_printf_i+0xc4>
 800586c:	0645      	lsls	r5, r0, #25
 800586e:	d5fb      	bpl.n	8005868 <_printf_i+0xb8>
 8005870:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005874:	2d00      	cmp	r5, #0
 8005876:	da03      	bge.n	8005880 <_printf_i+0xd0>
 8005878:	232d      	movs	r3, #45	@ 0x2d
 800587a:	426d      	negs	r5, r5
 800587c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005880:	4858      	ldr	r0, [pc, #352]	@ (80059e4 <_printf_i+0x234>)
 8005882:	230a      	movs	r3, #10
 8005884:	e011      	b.n	80058aa <_printf_i+0xfa>
 8005886:	6821      	ldr	r1, [r4, #0]
 8005888:	6833      	ldr	r3, [r6, #0]
 800588a:	0608      	lsls	r0, r1, #24
 800588c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005890:	d402      	bmi.n	8005898 <_printf_i+0xe8>
 8005892:	0649      	lsls	r1, r1, #25
 8005894:	bf48      	it	mi
 8005896:	b2ad      	uxthmi	r5, r5
 8005898:	2f6f      	cmp	r7, #111	@ 0x6f
 800589a:	4852      	ldr	r0, [pc, #328]	@ (80059e4 <_printf_i+0x234>)
 800589c:	6033      	str	r3, [r6, #0]
 800589e:	bf14      	ite	ne
 80058a0:	230a      	movne	r3, #10
 80058a2:	2308      	moveq	r3, #8
 80058a4:	2100      	movs	r1, #0
 80058a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80058aa:	6866      	ldr	r6, [r4, #4]
 80058ac:	60a6      	str	r6, [r4, #8]
 80058ae:	2e00      	cmp	r6, #0
 80058b0:	db05      	blt.n	80058be <_printf_i+0x10e>
 80058b2:	6821      	ldr	r1, [r4, #0]
 80058b4:	432e      	orrs	r6, r5
 80058b6:	f021 0104 	bic.w	r1, r1, #4
 80058ba:	6021      	str	r1, [r4, #0]
 80058bc:	d04b      	beq.n	8005956 <_printf_i+0x1a6>
 80058be:	4616      	mov	r6, r2
 80058c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80058c4:	fb03 5711 	mls	r7, r3, r1, r5
 80058c8:	5dc7      	ldrb	r7, [r0, r7]
 80058ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058ce:	462f      	mov	r7, r5
 80058d0:	42bb      	cmp	r3, r7
 80058d2:	460d      	mov	r5, r1
 80058d4:	d9f4      	bls.n	80058c0 <_printf_i+0x110>
 80058d6:	2b08      	cmp	r3, #8
 80058d8:	d10b      	bne.n	80058f2 <_printf_i+0x142>
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	07df      	lsls	r7, r3, #31
 80058de:	d508      	bpl.n	80058f2 <_printf_i+0x142>
 80058e0:	6923      	ldr	r3, [r4, #16]
 80058e2:	6861      	ldr	r1, [r4, #4]
 80058e4:	4299      	cmp	r1, r3
 80058e6:	bfde      	ittt	le
 80058e8:	2330      	movle	r3, #48	@ 0x30
 80058ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80058ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80058f2:	1b92      	subs	r2, r2, r6
 80058f4:	6122      	str	r2, [r4, #16]
 80058f6:	f8cd a000 	str.w	sl, [sp]
 80058fa:	464b      	mov	r3, r9
 80058fc:	aa03      	add	r2, sp, #12
 80058fe:	4621      	mov	r1, r4
 8005900:	4640      	mov	r0, r8
 8005902:	f7ff fee7 	bl	80056d4 <_printf_common>
 8005906:	3001      	adds	r0, #1
 8005908:	d14a      	bne.n	80059a0 <_printf_i+0x1f0>
 800590a:	f04f 30ff 	mov.w	r0, #4294967295
 800590e:	b004      	add	sp, #16
 8005910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005914:	6823      	ldr	r3, [r4, #0]
 8005916:	f043 0320 	orr.w	r3, r3, #32
 800591a:	6023      	str	r3, [r4, #0]
 800591c:	4832      	ldr	r0, [pc, #200]	@ (80059e8 <_printf_i+0x238>)
 800591e:	2778      	movs	r7, #120	@ 0x78
 8005920:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005924:	6823      	ldr	r3, [r4, #0]
 8005926:	6831      	ldr	r1, [r6, #0]
 8005928:	061f      	lsls	r7, r3, #24
 800592a:	f851 5b04 	ldr.w	r5, [r1], #4
 800592e:	d402      	bmi.n	8005936 <_printf_i+0x186>
 8005930:	065f      	lsls	r7, r3, #25
 8005932:	bf48      	it	mi
 8005934:	b2ad      	uxthmi	r5, r5
 8005936:	6031      	str	r1, [r6, #0]
 8005938:	07d9      	lsls	r1, r3, #31
 800593a:	bf44      	itt	mi
 800593c:	f043 0320 	orrmi.w	r3, r3, #32
 8005940:	6023      	strmi	r3, [r4, #0]
 8005942:	b11d      	cbz	r5, 800594c <_printf_i+0x19c>
 8005944:	2310      	movs	r3, #16
 8005946:	e7ad      	b.n	80058a4 <_printf_i+0xf4>
 8005948:	4826      	ldr	r0, [pc, #152]	@ (80059e4 <_printf_i+0x234>)
 800594a:	e7e9      	b.n	8005920 <_printf_i+0x170>
 800594c:	6823      	ldr	r3, [r4, #0]
 800594e:	f023 0320 	bic.w	r3, r3, #32
 8005952:	6023      	str	r3, [r4, #0]
 8005954:	e7f6      	b.n	8005944 <_printf_i+0x194>
 8005956:	4616      	mov	r6, r2
 8005958:	e7bd      	b.n	80058d6 <_printf_i+0x126>
 800595a:	6833      	ldr	r3, [r6, #0]
 800595c:	6825      	ldr	r5, [r4, #0]
 800595e:	6961      	ldr	r1, [r4, #20]
 8005960:	1d18      	adds	r0, r3, #4
 8005962:	6030      	str	r0, [r6, #0]
 8005964:	062e      	lsls	r6, r5, #24
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	d501      	bpl.n	800596e <_printf_i+0x1be>
 800596a:	6019      	str	r1, [r3, #0]
 800596c:	e002      	b.n	8005974 <_printf_i+0x1c4>
 800596e:	0668      	lsls	r0, r5, #25
 8005970:	d5fb      	bpl.n	800596a <_printf_i+0x1ba>
 8005972:	8019      	strh	r1, [r3, #0]
 8005974:	2300      	movs	r3, #0
 8005976:	6123      	str	r3, [r4, #16]
 8005978:	4616      	mov	r6, r2
 800597a:	e7bc      	b.n	80058f6 <_printf_i+0x146>
 800597c:	6833      	ldr	r3, [r6, #0]
 800597e:	1d1a      	adds	r2, r3, #4
 8005980:	6032      	str	r2, [r6, #0]
 8005982:	681e      	ldr	r6, [r3, #0]
 8005984:	6862      	ldr	r2, [r4, #4]
 8005986:	2100      	movs	r1, #0
 8005988:	4630      	mov	r0, r6
 800598a:	f7fa fca9 	bl	80002e0 <memchr>
 800598e:	b108      	cbz	r0, 8005994 <_printf_i+0x1e4>
 8005990:	1b80      	subs	r0, r0, r6
 8005992:	6060      	str	r0, [r4, #4]
 8005994:	6863      	ldr	r3, [r4, #4]
 8005996:	6123      	str	r3, [r4, #16]
 8005998:	2300      	movs	r3, #0
 800599a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800599e:	e7aa      	b.n	80058f6 <_printf_i+0x146>
 80059a0:	6923      	ldr	r3, [r4, #16]
 80059a2:	4632      	mov	r2, r6
 80059a4:	4649      	mov	r1, r9
 80059a6:	4640      	mov	r0, r8
 80059a8:	47d0      	blx	sl
 80059aa:	3001      	adds	r0, #1
 80059ac:	d0ad      	beq.n	800590a <_printf_i+0x15a>
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	079b      	lsls	r3, r3, #30
 80059b2:	d413      	bmi.n	80059dc <_printf_i+0x22c>
 80059b4:	68e0      	ldr	r0, [r4, #12]
 80059b6:	9b03      	ldr	r3, [sp, #12]
 80059b8:	4298      	cmp	r0, r3
 80059ba:	bfb8      	it	lt
 80059bc:	4618      	movlt	r0, r3
 80059be:	e7a6      	b.n	800590e <_printf_i+0x15e>
 80059c0:	2301      	movs	r3, #1
 80059c2:	4632      	mov	r2, r6
 80059c4:	4649      	mov	r1, r9
 80059c6:	4640      	mov	r0, r8
 80059c8:	47d0      	blx	sl
 80059ca:	3001      	adds	r0, #1
 80059cc:	d09d      	beq.n	800590a <_printf_i+0x15a>
 80059ce:	3501      	adds	r5, #1
 80059d0:	68e3      	ldr	r3, [r4, #12]
 80059d2:	9903      	ldr	r1, [sp, #12]
 80059d4:	1a5b      	subs	r3, r3, r1
 80059d6:	42ab      	cmp	r3, r5
 80059d8:	dcf2      	bgt.n	80059c0 <_printf_i+0x210>
 80059da:	e7eb      	b.n	80059b4 <_printf_i+0x204>
 80059dc:	2500      	movs	r5, #0
 80059de:	f104 0619 	add.w	r6, r4, #25
 80059e2:	e7f5      	b.n	80059d0 <_printf_i+0x220>
 80059e4:	08009822 	.word	0x08009822
 80059e8:	08009833 	.word	0x08009833

080059ec <_scanf_float>:
 80059ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f0:	b087      	sub	sp, #28
 80059f2:	4691      	mov	r9, r2
 80059f4:	9303      	str	r3, [sp, #12]
 80059f6:	688b      	ldr	r3, [r1, #8]
 80059f8:	1e5a      	subs	r2, r3, #1
 80059fa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80059fe:	bf81      	itttt	hi
 8005a00:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005a04:	eb03 0b05 	addhi.w	fp, r3, r5
 8005a08:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005a0c:	608b      	strhi	r3, [r1, #8]
 8005a0e:	680b      	ldr	r3, [r1, #0]
 8005a10:	460a      	mov	r2, r1
 8005a12:	f04f 0500 	mov.w	r5, #0
 8005a16:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005a1a:	f842 3b1c 	str.w	r3, [r2], #28
 8005a1e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005a22:	4680      	mov	r8, r0
 8005a24:	460c      	mov	r4, r1
 8005a26:	bf98      	it	ls
 8005a28:	f04f 0b00 	movls.w	fp, #0
 8005a2c:	9201      	str	r2, [sp, #4]
 8005a2e:	4616      	mov	r6, r2
 8005a30:	46aa      	mov	sl, r5
 8005a32:	462f      	mov	r7, r5
 8005a34:	9502      	str	r5, [sp, #8]
 8005a36:	68a2      	ldr	r2, [r4, #8]
 8005a38:	b15a      	cbz	r2, 8005a52 <_scanf_float+0x66>
 8005a3a:	f8d9 3000 	ldr.w	r3, [r9]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	2b4e      	cmp	r3, #78	@ 0x4e
 8005a42:	d863      	bhi.n	8005b0c <_scanf_float+0x120>
 8005a44:	2b40      	cmp	r3, #64	@ 0x40
 8005a46:	d83b      	bhi.n	8005ac0 <_scanf_float+0xd4>
 8005a48:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005a4c:	b2c8      	uxtb	r0, r1
 8005a4e:	280e      	cmp	r0, #14
 8005a50:	d939      	bls.n	8005ac6 <_scanf_float+0xda>
 8005a52:	b11f      	cbz	r7, 8005a5c <_scanf_float+0x70>
 8005a54:	6823      	ldr	r3, [r4, #0]
 8005a56:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a5a:	6023      	str	r3, [r4, #0]
 8005a5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a60:	f1ba 0f01 	cmp.w	sl, #1
 8005a64:	f200 8114 	bhi.w	8005c90 <_scanf_float+0x2a4>
 8005a68:	9b01      	ldr	r3, [sp, #4]
 8005a6a:	429e      	cmp	r6, r3
 8005a6c:	f200 8105 	bhi.w	8005c7a <_scanf_float+0x28e>
 8005a70:	2001      	movs	r0, #1
 8005a72:	b007      	add	sp, #28
 8005a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a78:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005a7c:	2a0d      	cmp	r2, #13
 8005a7e:	d8e8      	bhi.n	8005a52 <_scanf_float+0x66>
 8005a80:	a101      	add	r1, pc, #4	@ (adr r1, 8005a88 <_scanf_float+0x9c>)
 8005a82:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005a86:	bf00      	nop
 8005a88:	08005bd1 	.word	0x08005bd1
 8005a8c:	08005a53 	.word	0x08005a53
 8005a90:	08005a53 	.word	0x08005a53
 8005a94:	08005a53 	.word	0x08005a53
 8005a98:	08005c2d 	.word	0x08005c2d
 8005a9c:	08005c07 	.word	0x08005c07
 8005aa0:	08005a53 	.word	0x08005a53
 8005aa4:	08005a53 	.word	0x08005a53
 8005aa8:	08005bdf 	.word	0x08005bdf
 8005aac:	08005a53 	.word	0x08005a53
 8005ab0:	08005a53 	.word	0x08005a53
 8005ab4:	08005a53 	.word	0x08005a53
 8005ab8:	08005a53 	.word	0x08005a53
 8005abc:	08005b9b 	.word	0x08005b9b
 8005ac0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005ac4:	e7da      	b.n	8005a7c <_scanf_float+0x90>
 8005ac6:	290e      	cmp	r1, #14
 8005ac8:	d8c3      	bhi.n	8005a52 <_scanf_float+0x66>
 8005aca:	a001      	add	r0, pc, #4	@ (adr r0, 8005ad0 <_scanf_float+0xe4>)
 8005acc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005ad0:	08005b8b 	.word	0x08005b8b
 8005ad4:	08005a53 	.word	0x08005a53
 8005ad8:	08005b8b 	.word	0x08005b8b
 8005adc:	08005c1b 	.word	0x08005c1b
 8005ae0:	08005a53 	.word	0x08005a53
 8005ae4:	08005b2d 	.word	0x08005b2d
 8005ae8:	08005b71 	.word	0x08005b71
 8005aec:	08005b71 	.word	0x08005b71
 8005af0:	08005b71 	.word	0x08005b71
 8005af4:	08005b71 	.word	0x08005b71
 8005af8:	08005b71 	.word	0x08005b71
 8005afc:	08005b71 	.word	0x08005b71
 8005b00:	08005b71 	.word	0x08005b71
 8005b04:	08005b71 	.word	0x08005b71
 8005b08:	08005b71 	.word	0x08005b71
 8005b0c:	2b6e      	cmp	r3, #110	@ 0x6e
 8005b0e:	d809      	bhi.n	8005b24 <_scanf_float+0x138>
 8005b10:	2b60      	cmp	r3, #96	@ 0x60
 8005b12:	d8b1      	bhi.n	8005a78 <_scanf_float+0x8c>
 8005b14:	2b54      	cmp	r3, #84	@ 0x54
 8005b16:	d07b      	beq.n	8005c10 <_scanf_float+0x224>
 8005b18:	2b59      	cmp	r3, #89	@ 0x59
 8005b1a:	d19a      	bne.n	8005a52 <_scanf_float+0x66>
 8005b1c:	2d07      	cmp	r5, #7
 8005b1e:	d198      	bne.n	8005a52 <_scanf_float+0x66>
 8005b20:	2508      	movs	r5, #8
 8005b22:	e02f      	b.n	8005b84 <_scanf_float+0x198>
 8005b24:	2b74      	cmp	r3, #116	@ 0x74
 8005b26:	d073      	beq.n	8005c10 <_scanf_float+0x224>
 8005b28:	2b79      	cmp	r3, #121	@ 0x79
 8005b2a:	e7f6      	b.n	8005b1a <_scanf_float+0x12e>
 8005b2c:	6821      	ldr	r1, [r4, #0]
 8005b2e:	05c8      	lsls	r0, r1, #23
 8005b30:	d51e      	bpl.n	8005b70 <_scanf_float+0x184>
 8005b32:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005b36:	6021      	str	r1, [r4, #0]
 8005b38:	3701      	adds	r7, #1
 8005b3a:	f1bb 0f00 	cmp.w	fp, #0
 8005b3e:	d003      	beq.n	8005b48 <_scanf_float+0x15c>
 8005b40:	3201      	adds	r2, #1
 8005b42:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b46:	60a2      	str	r2, [r4, #8]
 8005b48:	68a3      	ldr	r3, [r4, #8]
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	60a3      	str	r3, [r4, #8]
 8005b4e:	6923      	ldr	r3, [r4, #16]
 8005b50:	3301      	adds	r3, #1
 8005b52:	6123      	str	r3, [r4, #16]
 8005b54:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f8c9 3004 	str.w	r3, [r9, #4]
 8005b60:	f340 8082 	ble.w	8005c68 <_scanf_float+0x27c>
 8005b64:	f8d9 3000 	ldr.w	r3, [r9]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	f8c9 3000 	str.w	r3, [r9]
 8005b6e:	e762      	b.n	8005a36 <_scanf_float+0x4a>
 8005b70:	eb1a 0105 	adds.w	r1, sl, r5
 8005b74:	f47f af6d 	bne.w	8005a52 <_scanf_float+0x66>
 8005b78:	6822      	ldr	r2, [r4, #0]
 8005b7a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005b7e:	6022      	str	r2, [r4, #0]
 8005b80:	460d      	mov	r5, r1
 8005b82:	468a      	mov	sl, r1
 8005b84:	f806 3b01 	strb.w	r3, [r6], #1
 8005b88:	e7de      	b.n	8005b48 <_scanf_float+0x15c>
 8005b8a:	6822      	ldr	r2, [r4, #0]
 8005b8c:	0610      	lsls	r0, r2, #24
 8005b8e:	f57f af60 	bpl.w	8005a52 <_scanf_float+0x66>
 8005b92:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b96:	6022      	str	r2, [r4, #0]
 8005b98:	e7f4      	b.n	8005b84 <_scanf_float+0x198>
 8005b9a:	f1ba 0f00 	cmp.w	sl, #0
 8005b9e:	d10c      	bne.n	8005bba <_scanf_float+0x1ce>
 8005ba0:	b977      	cbnz	r7, 8005bc0 <_scanf_float+0x1d4>
 8005ba2:	6822      	ldr	r2, [r4, #0]
 8005ba4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005ba8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005bac:	d108      	bne.n	8005bc0 <_scanf_float+0x1d4>
 8005bae:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005bb2:	6022      	str	r2, [r4, #0]
 8005bb4:	f04f 0a01 	mov.w	sl, #1
 8005bb8:	e7e4      	b.n	8005b84 <_scanf_float+0x198>
 8005bba:	f1ba 0f02 	cmp.w	sl, #2
 8005bbe:	d050      	beq.n	8005c62 <_scanf_float+0x276>
 8005bc0:	2d01      	cmp	r5, #1
 8005bc2:	d002      	beq.n	8005bca <_scanf_float+0x1de>
 8005bc4:	2d04      	cmp	r5, #4
 8005bc6:	f47f af44 	bne.w	8005a52 <_scanf_float+0x66>
 8005bca:	3501      	adds	r5, #1
 8005bcc:	b2ed      	uxtb	r5, r5
 8005bce:	e7d9      	b.n	8005b84 <_scanf_float+0x198>
 8005bd0:	f1ba 0f01 	cmp.w	sl, #1
 8005bd4:	f47f af3d 	bne.w	8005a52 <_scanf_float+0x66>
 8005bd8:	f04f 0a02 	mov.w	sl, #2
 8005bdc:	e7d2      	b.n	8005b84 <_scanf_float+0x198>
 8005bde:	b975      	cbnz	r5, 8005bfe <_scanf_float+0x212>
 8005be0:	2f00      	cmp	r7, #0
 8005be2:	f47f af37 	bne.w	8005a54 <_scanf_float+0x68>
 8005be6:	6822      	ldr	r2, [r4, #0]
 8005be8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005bec:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005bf0:	f040 80fc 	bne.w	8005dec <_scanf_float+0x400>
 8005bf4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005bf8:	6022      	str	r2, [r4, #0]
 8005bfa:	2501      	movs	r5, #1
 8005bfc:	e7c2      	b.n	8005b84 <_scanf_float+0x198>
 8005bfe:	2d03      	cmp	r5, #3
 8005c00:	d0e3      	beq.n	8005bca <_scanf_float+0x1de>
 8005c02:	2d05      	cmp	r5, #5
 8005c04:	e7df      	b.n	8005bc6 <_scanf_float+0x1da>
 8005c06:	2d02      	cmp	r5, #2
 8005c08:	f47f af23 	bne.w	8005a52 <_scanf_float+0x66>
 8005c0c:	2503      	movs	r5, #3
 8005c0e:	e7b9      	b.n	8005b84 <_scanf_float+0x198>
 8005c10:	2d06      	cmp	r5, #6
 8005c12:	f47f af1e 	bne.w	8005a52 <_scanf_float+0x66>
 8005c16:	2507      	movs	r5, #7
 8005c18:	e7b4      	b.n	8005b84 <_scanf_float+0x198>
 8005c1a:	6822      	ldr	r2, [r4, #0]
 8005c1c:	0591      	lsls	r1, r2, #22
 8005c1e:	f57f af18 	bpl.w	8005a52 <_scanf_float+0x66>
 8005c22:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005c26:	6022      	str	r2, [r4, #0]
 8005c28:	9702      	str	r7, [sp, #8]
 8005c2a:	e7ab      	b.n	8005b84 <_scanf_float+0x198>
 8005c2c:	6822      	ldr	r2, [r4, #0]
 8005c2e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005c32:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005c36:	d005      	beq.n	8005c44 <_scanf_float+0x258>
 8005c38:	0550      	lsls	r0, r2, #21
 8005c3a:	f57f af0a 	bpl.w	8005a52 <_scanf_float+0x66>
 8005c3e:	2f00      	cmp	r7, #0
 8005c40:	f000 80d4 	beq.w	8005dec <_scanf_float+0x400>
 8005c44:	0591      	lsls	r1, r2, #22
 8005c46:	bf58      	it	pl
 8005c48:	9902      	ldrpl	r1, [sp, #8]
 8005c4a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005c4e:	bf58      	it	pl
 8005c50:	1a79      	subpl	r1, r7, r1
 8005c52:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005c56:	bf58      	it	pl
 8005c58:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005c5c:	6022      	str	r2, [r4, #0]
 8005c5e:	2700      	movs	r7, #0
 8005c60:	e790      	b.n	8005b84 <_scanf_float+0x198>
 8005c62:	f04f 0a03 	mov.w	sl, #3
 8005c66:	e78d      	b.n	8005b84 <_scanf_float+0x198>
 8005c68:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005c6c:	4649      	mov	r1, r9
 8005c6e:	4640      	mov	r0, r8
 8005c70:	4798      	blx	r3
 8005c72:	2800      	cmp	r0, #0
 8005c74:	f43f aedf 	beq.w	8005a36 <_scanf_float+0x4a>
 8005c78:	e6eb      	b.n	8005a52 <_scanf_float+0x66>
 8005c7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005c7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c82:	464a      	mov	r2, r9
 8005c84:	4640      	mov	r0, r8
 8005c86:	4798      	blx	r3
 8005c88:	6923      	ldr	r3, [r4, #16]
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	6123      	str	r3, [r4, #16]
 8005c8e:	e6eb      	b.n	8005a68 <_scanf_float+0x7c>
 8005c90:	1e6b      	subs	r3, r5, #1
 8005c92:	2b06      	cmp	r3, #6
 8005c94:	d824      	bhi.n	8005ce0 <_scanf_float+0x2f4>
 8005c96:	2d02      	cmp	r5, #2
 8005c98:	d836      	bhi.n	8005d08 <_scanf_float+0x31c>
 8005c9a:	9b01      	ldr	r3, [sp, #4]
 8005c9c:	429e      	cmp	r6, r3
 8005c9e:	f67f aee7 	bls.w	8005a70 <_scanf_float+0x84>
 8005ca2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005ca6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005caa:	464a      	mov	r2, r9
 8005cac:	4640      	mov	r0, r8
 8005cae:	4798      	blx	r3
 8005cb0:	6923      	ldr	r3, [r4, #16]
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	6123      	str	r3, [r4, #16]
 8005cb6:	e7f0      	b.n	8005c9a <_scanf_float+0x2ae>
 8005cb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005cbc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005cc0:	464a      	mov	r2, r9
 8005cc2:	4640      	mov	r0, r8
 8005cc4:	4798      	blx	r3
 8005cc6:	6923      	ldr	r3, [r4, #16]
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	6123      	str	r3, [r4, #16]
 8005ccc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005cd0:	fa5f fa8a 	uxtb.w	sl, sl
 8005cd4:	f1ba 0f02 	cmp.w	sl, #2
 8005cd8:	d1ee      	bne.n	8005cb8 <_scanf_float+0x2cc>
 8005cda:	3d03      	subs	r5, #3
 8005cdc:	b2ed      	uxtb	r5, r5
 8005cde:	1b76      	subs	r6, r6, r5
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	05da      	lsls	r2, r3, #23
 8005ce4:	d530      	bpl.n	8005d48 <_scanf_float+0x35c>
 8005ce6:	055b      	lsls	r3, r3, #21
 8005ce8:	d511      	bpl.n	8005d0e <_scanf_float+0x322>
 8005cea:	9b01      	ldr	r3, [sp, #4]
 8005cec:	429e      	cmp	r6, r3
 8005cee:	f67f aebf 	bls.w	8005a70 <_scanf_float+0x84>
 8005cf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005cf6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005cfa:	464a      	mov	r2, r9
 8005cfc:	4640      	mov	r0, r8
 8005cfe:	4798      	blx	r3
 8005d00:	6923      	ldr	r3, [r4, #16]
 8005d02:	3b01      	subs	r3, #1
 8005d04:	6123      	str	r3, [r4, #16]
 8005d06:	e7f0      	b.n	8005cea <_scanf_float+0x2fe>
 8005d08:	46aa      	mov	sl, r5
 8005d0a:	46b3      	mov	fp, r6
 8005d0c:	e7de      	b.n	8005ccc <_scanf_float+0x2e0>
 8005d0e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005d12:	6923      	ldr	r3, [r4, #16]
 8005d14:	2965      	cmp	r1, #101	@ 0x65
 8005d16:	f103 33ff 	add.w	r3, r3, #4294967295
 8005d1a:	f106 35ff 	add.w	r5, r6, #4294967295
 8005d1e:	6123      	str	r3, [r4, #16]
 8005d20:	d00c      	beq.n	8005d3c <_scanf_float+0x350>
 8005d22:	2945      	cmp	r1, #69	@ 0x45
 8005d24:	d00a      	beq.n	8005d3c <_scanf_float+0x350>
 8005d26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005d2a:	464a      	mov	r2, r9
 8005d2c:	4640      	mov	r0, r8
 8005d2e:	4798      	blx	r3
 8005d30:	6923      	ldr	r3, [r4, #16]
 8005d32:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	1eb5      	subs	r5, r6, #2
 8005d3a:	6123      	str	r3, [r4, #16]
 8005d3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005d40:	464a      	mov	r2, r9
 8005d42:	4640      	mov	r0, r8
 8005d44:	4798      	blx	r3
 8005d46:	462e      	mov	r6, r5
 8005d48:	6822      	ldr	r2, [r4, #0]
 8005d4a:	f012 0210 	ands.w	r2, r2, #16
 8005d4e:	d001      	beq.n	8005d54 <_scanf_float+0x368>
 8005d50:	2000      	movs	r0, #0
 8005d52:	e68e      	b.n	8005a72 <_scanf_float+0x86>
 8005d54:	7032      	strb	r2, [r6, #0]
 8005d56:	6823      	ldr	r3, [r4, #0]
 8005d58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005d5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d60:	d123      	bne.n	8005daa <_scanf_float+0x3be>
 8005d62:	9b02      	ldr	r3, [sp, #8]
 8005d64:	429f      	cmp	r7, r3
 8005d66:	d00a      	beq.n	8005d7e <_scanf_float+0x392>
 8005d68:	1bda      	subs	r2, r3, r7
 8005d6a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005d6e:	429e      	cmp	r6, r3
 8005d70:	bf28      	it	cs
 8005d72:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005d76:	491e      	ldr	r1, [pc, #120]	@ (8005df0 <_scanf_float+0x404>)
 8005d78:	4630      	mov	r0, r6
 8005d7a:	f000 f935 	bl	8005fe8 <siprintf>
 8005d7e:	9901      	ldr	r1, [sp, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	4640      	mov	r0, r8
 8005d84:	f002 fb72 	bl	800846c <_strtod_r>
 8005d88:	9b03      	ldr	r3, [sp, #12]
 8005d8a:	6821      	ldr	r1, [r4, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f011 0f02 	tst.w	r1, #2
 8005d92:	f103 0204 	add.w	r2, r3, #4
 8005d96:	d015      	beq.n	8005dc4 <_scanf_float+0x3d8>
 8005d98:	9903      	ldr	r1, [sp, #12]
 8005d9a:	600a      	str	r2, [r1, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	ed83 0b00 	vstr	d0, [r3]
 8005da2:	68e3      	ldr	r3, [r4, #12]
 8005da4:	3301      	adds	r3, #1
 8005da6:	60e3      	str	r3, [r4, #12]
 8005da8:	e7d2      	b.n	8005d50 <_scanf_float+0x364>
 8005daa:	9b04      	ldr	r3, [sp, #16]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d0e6      	beq.n	8005d7e <_scanf_float+0x392>
 8005db0:	9905      	ldr	r1, [sp, #20]
 8005db2:	230a      	movs	r3, #10
 8005db4:	3101      	adds	r1, #1
 8005db6:	4640      	mov	r0, r8
 8005db8:	f002 fbd8 	bl	800856c <_strtol_r>
 8005dbc:	9b04      	ldr	r3, [sp, #16]
 8005dbe:	9e05      	ldr	r6, [sp, #20]
 8005dc0:	1ac2      	subs	r2, r0, r3
 8005dc2:	e7d2      	b.n	8005d6a <_scanf_float+0x37e>
 8005dc4:	f011 0f04 	tst.w	r1, #4
 8005dc8:	9903      	ldr	r1, [sp, #12]
 8005dca:	600a      	str	r2, [r1, #0]
 8005dcc:	d1e6      	bne.n	8005d9c <_scanf_float+0x3b0>
 8005dce:	eeb4 0b40 	vcmp.f64	d0, d0
 8005dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dd6:	681d      	ldr	r5, [r3, #0]
 8005dd8:	d705      	bvc.n	8005de6 <_scanf_float+0x3fa>
 8005dda:	4806      	ldr	r0, [pc, #24]	@ (8005df4 <_scanf_float+0x408>)
 8005ddc:	f000 f9fc 	bl	80061d8 <nanf>
 8005de0:	ed85 0a00 	vstr	s0, [r5]
 8005de4:	e7dd      	b.n	8005da2 <_scanf_float+0x3b6>
 8005de6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8005dea:	e7f9      	b.n	8005de0 <_scanf_float+0x3f4>
 8005dec:	2700      	movs	r7, #0
 8005dee:	e635      	b.n	8005a5c <_scanf_float+0x70>
 8005df0:	08009844 	.word	0x08009844
 8005df4:	08009985 	.word	0x08009985

08005df8 <std>:
 8005df8:	2300      	movs	r3, #0
 8005dfa:	b510      	push	{r4, lr}
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	e9c0 3300 	strd	r3, r3, [r0]
 8005e02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e06:	6083      	str	r3, [r0, #8]
 8005e08:	8181      	strh	r1, [r0, #12]
 8005e0a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005e0c:	81c2      	strh	r2, [r0, #14]
 8005e0e:	6183      	str	r3, [r0, #24]
 8005e10:	4619      	mov	r1, r3
 8005e12:	2208      	movs	r2, #8
 8005e14:	305c      	adds	r0, #92	@ 0x5c
 8005e16:	f000 f94c 	bl	80060b2 <memset>
 8005e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e50 <std+0x58>)
 8005e1c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e54 <std+0x5c>)
 8005e20:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005e22:	4b0d      	ldr	r3, [pc, #52]	@ (8005e58 <std+0x60>)
 8005e24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005e26:	4b0d      	ldr	r3, [pc, #52]	@ (8005e5c <std+0x64>)
 8005e28:	6323      	str	r3, [r4, #48]	@ 0x30
 8005e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e60 <std+0x68>)
 8005e2c:	6224      	str	r4, [r4, #32]
 8005e2e:	429c      	cmp	r4, r3
 8005e30:	d006      	beq.n	8005e40 <std+0x48>
 8005e32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005e36:	4294      	cmp	r4, r2
 8005e38:	d002      	beq.n	8005e40 <std+0x48>
 8005e3a:	33d0      	adds	r3, #208	@ 0xd0
 8005e3c:	429c      	cmp	r4, r3
 8005e3e:	d105      	bne.n	8005e4c <std+0x54>
 8005e40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e48:	f000 b9c2 	b.w	80061d0 <__retarget_lock_init_recursive>
 8005e4c:	bd10      	pop	{r4, pc}
 8005e4e:	bf00      	nop
 8005e50:	0800602d 	.word	0x0800602d
 8005e54:	0800604f 	.word	0x0800604f
 8005e58:	08006087 	.word	0x08006087
 8005e5c:	080060ab 	.word	0x080060ab
 8005e60:	240008c0 	.word	0x240008c0

08005e64 <stdio_exit_handler>:
 8005e64:	4a02      	ldr	r2, [pc, #8]	@ (8005e70 <stdio_exit_handler+0xc>)
 8005e66:	4903      	ldr	r1, [pc, #12]	@ (8005e74 <stdio_exit_handler+0x10>)
 8005e68:	4803      	ldr	r0, [pc, #12]	@ (8005e78 <stdio_exit_handler+0x14>)
 8005e6a:	f000 b869 	b.w	8005f40 <_fwalk_sglue>
 8005e6e:	bf00      	nop
 8005e70:	24000228 	.word	0x24000228
 8005e74:	08008929 	.word	0x08008929
 8005e78:	24000238 	.word	0x24000238

08005e7c <cleanup_stdio>:
 8005e7c:	6841      	ldr	r1, [r0, #4]
 8005e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8005eb0 <cleanup_stdio+0x34>)
 8005e80:	4299      	cmp	r1, r3
 8005e82:	b510      	push	{r4, lr}
 8005e84:	4604      	mov	r4, r0
 8005e86:	d001      	beq.n	8005e8c <cleanup_stdio+0x10>
 8005e88:	f002 fd4e 	bl	8008928 <_fflush_r>
 8005e8c:	68a1      	ldr	r1, [r4, #8]
 8005e8e:	4b09      	ldr	r3, [pc, #36]	@ (8005eb4 <cleanup_stdio+0x38>)
 8005e90:	4299      	cmp	r1, r3
 8005e92:	d002      	beq.n	8005e9a <cleanup_stdio+0x1e>
 8005e94:	4620      	mov	r0, r4
 8005e96:	f002 fd47 	bl	8008928 <_fflush_r>
 8005e9a:	68e1      	ldr	r1, [r4, #12]
 8005e9c:	4b06      	ldr	r3, [pc, #24]	@ (8005eb8 <cleanup_stdio+0x3c>)
 8005e9e:	4299      	cmp	r1, r3
 8005ea0:	d004      	beq.n	8005eac <cleanup_stdio+0x30>
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ea8:	f002 bd3e 	b.w	8008928 <_fflush_r>
 8005eac:	bd10      	pop	{r4, pc}
 8005eae:	bf00      	nop
 8005eb0:	240008c0 	.word	0x240008c0
 8005eb4:	24000928 	.word	0x24000928
 8005eb8:	24000990 	.word	0x24000990

08005ebc <global_stdio_init.part.0>:
 8005ebc:	b510      	push	{r4, lr}
 8005ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8005eec <global_stdio_init.part.0+0x30>)
 8005ec0:	4c0b      	ldr	r4, [pc, #44]	@ (8005ef0 <global_stdio_init.part.0+0x34>)
 8005ec2:	4a0c      	ldr	r2, [pc, #48]	@ (8005ef4 <global_stdio_init.part.0+0x38>)
 8005ec4:	601a      	str	r2, [r3, #0]
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	2200      	movs	r2, #0
 8005eca:	2104      	movs	r1, #4
 8005ecc:	f7ff ff94 	bl	8005df8 <std>
 8005ed0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	2109      	movs	r1, #9
 8005ed8:	f7ff ff8e 	bl	8005df8 <std>
 8005edc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ee6:	2112      	movs	r1, #18
 8005ee8:	f7ff bf86 	b.w	8005df8 <std>
 8005eec:	240009f8 	.word	0x240009f8
 8005ef0:	240008c0 	.word	0x240008c0
 8005ef4:	08005e65 	.word	0x08005e65

08005ef8 <__sfp_lock_acquire>:
 8005ef8:	4801      	ldr	r0, [pc, #4]	@ (8005f00 <__sfp_lock_acquire+0x8>)
 8005efa:	f000 b96a 	b.w	80061d2 <__retarget_lock_acquire_recursive>
 8005efe:	bf00      	nop
 8005f00:	24000a01 	.word	0x24000a01

08005f04 <__sfp_lock_release>:
 8005f04:	4801      	ldr	r0, [pc, #4]	@ (8005f0c <__sfp_lock_release+0x8>)
 8005f06:	f000 b965 	b.w	80061d4 <__retarget_lock_release_recursive>
 8005f0a:	bf00      	nop
 8005f0c:	24000a01 	.word	0x24000a01

08005f10 <__sinit>:
 8005f10:	b510      	push	{r4, lr}
 8005f12:	4604      	mov	r4, r0
 8005f14:	f7ff fff0 	bl	8005ef8 <__sfp_lock_acquire>
 8005f18:	6a23      	ldr	r3, [r4, #32]
 8005f1a:	b11b      	cbz	r3, 8005f24 <__sinit+0x14>
 8005f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f20:	f7ff bff0 	b.w	8005f04 <__sfp_lock_release>
 8005f24:	4b04      	ldr	r3, [pc, #16]	@ (8005f38 <__sinit+0x28>)
 8005f26:	6223      	str	r3, [r4, #32]
 8005f28:	4b04      	ldr	r3, [pc, #16]	@ (8005f3c <__sinit+0x2c>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1f5      	bne.n	8005f1c <__sinit+0xc>
 8005f30:	f7ff ffc4 	bl	8005ebc <global_stdio_init.part.0>
 8005f34:	e7f2      	b.n	8005f1c <__sinit+0xc>
 8005f36:	bf00      	nop
 8005f38:	08005e7d 	.word	0x08005e7d
 8005f3c:	240009f8 	.word	0x240009f8

08005f40 <_fwalk_sglue>:
 8005f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f44:	4607      	mov	r7, r0
 8005f46:	4688      	mov	r8, r1
 8005f48:	4614      	mov	r4, r2
 8005f4a:	2600      	movs	r6, #0
 8005f4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f50:	f1b9 0901 	subs.w	r9, r9, #1
 8005f54:	d505      	bpl.n	8005f62 <_fwalk_sglue+0x22>
 8005f56:	6824      	ldr	r4, [r4, #0]
 8005f58:	2c00      	cmp	r4, #0
 8005f5a:	d1f7      	bne.n	8005f4c <_fwalk_sglue+0xc>
 8005f5c:	4630      	mov	r0, r6
 8005f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f62:	89ab      	ldrh	r3, [r5, #12]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d907      	bls.n	8005f78 <_fwalk_sglue+0x38>
 8005f68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	d003      	beq.n	8005f78 <_fwalk_sglue+0x38>
 8005f70:	4629      	mov	r1, r5
 8005f72:	4638      	mov	r0, r7
 8005f74:	47c0      	blx	r8
 8005f76:	4306      	orrs	r6, r0
 8005f78:	3568      	adds	r5, #104	@ 0x68
 8005f7a:	e7e9      	b.n	8005f50 <_fwalk_sglue+0x10>

08005f7c <sniprintf>:
 8005f7c:	b40c      	push	{r2, r3}
 8005f7e:	b530      	push	{r4, r5, lr}
 8005f80:	4b18      	ldr	r3, [pc, #96]	@ (8005fe4 <sniprintf+0x68>)
 8005f82:	1e0c      	subs	r4, r1, #0
 8005f84:	681d      	ldr	r5, [r3, #0]
 8005f86:	b09d      	sub	sp, #116	@ 0x74
 8005f88:	da08      	bge.n	8005f9c <sniprintf+0x20>
 8005f8a:	238b      	movs	r3, #139	@ 0x8b
 8005f8c:	602b      	str	r3, [r5, #0]
 8005f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f92:	b01d      	add	sp, #116	@ 0x74
 8005f94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f98:	b002      	add	sp, #8
 8005f9a:	4770      	bx	lr
 8005f9c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005fa0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005fa4:	f04f 0300 	mov.w	r3, #0
 8005fa8:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005faa:	bf14      	ite	ne
 8005fac:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005fb0:	4623      	moveq	r3, r4
 8005fb2:	9304      	str	r3, [sp, #16]
 8005fb4:	9307      	str	r3, [sp, #28]
 8005fb6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005fba:	9002      	str	r0, [sp, #8]
 8005fbc:	9006      	str	r0, [sp, #24]
 8005fbe:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005fc2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005fc4:	ab21      	add	r3, sp, #132	@ 0x84
 8005fc6:	a902      	add	r1, sp, #8
 8005fc8:	4628      	mov	r0, r5
 8005fca:	9301      	str	r3, [sp, #4]
 8005fcc:	f002 fb2c 	bl	8008628 <_svfiprintf_r>
 8005fd0:	1c43      	adds	r3, r0, #1
 8005fd2:	bfbc      	itt	lt
 8005fd4:	238b      	movlt	r3, #139	@ 0x8b
 8005fd6:	602b      	strlt	r3, [r5, #0]
 8005fd8:	2c00      	cmp	r4, #0
 8005fda:	d0da      	beq.n	8005f92 <sniprintf+0x16>
 8005fdc:	9b02      	ldr	r3, [sp, #8]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	701a      	strb	r2, [r3, #0]
 8005fe2:	e7d6      	b.n	8005f92 <sniprintf+0x16>
 8005fe4:	24000234 	.word	0x24000234

08005fe8 <siprintf>:
 8005fe8:	b40e      	push	{r1, r2, r3}
 8005fea:	b510      	push	{r4, lr}
 8005fec:	b09d      	sub	sp, #116	@ 0x74
 8005fee:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005ff0:	9002      	str	r0, [sp, #8]
 8005ff2:	9006      	str	r0, [sp, #24]
 8005ff4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005ff8:	480a      	ldr	r0, [pc, #40]	@ (8006024 <siprintf+0x3c>)
 8005ffa:	9107      	str	r1, [sp, #28]
 8005ffc:	9104      	str	r1, [sp, #16]
 8005ffe:	490a      	ldr	r1, [pc, #40]	@ (8006028 <siprintf+0x40>)
 8006000:	f853 2b04 	ldr.w	r2, [r3], #4
 8006004:	9105      	str	r1, [sp, #20]
 8006006:	2400      	movs	r4, #0
 8006008:	a902      	add	r1, sp, #8
 800600a:	6800      	ldr	r0, [r0, #0]
 800600c:	9301      	str	r3, [sp, #4]
 800600e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006010:	f002 fb0a 	bl	8008628 <_svfiprintf_r>
 8006014:	9b02      	ldr	r3, [sp, #8]
 8006016:	701c      	strb	r4, [r3, #0]
 8006018:	b01d      	add	sp, #116	@ 0x74
 800601a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800601e:	b003      	add	sp, #12
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	24000234 	.word	0x24000234
 8006028:	ffff0208 	.word	0xffff0208

0800602c <__sread>:
 800602c:	b510      	push	{r4, lr}
 800602e:	460c      	mov	r4, r1
 8006030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006034:	f000 f87e 	bl	8006134 <_read_r>
 8006038:	2800      	cmp	r0, #0
 800603a:	bfab      	itete	ge
 800603c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800603e:	89a3      	ldrhlt	r3, [r4, #12]
 8006040:	181b      	addge	r3, r3, r0
 8006042:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006046:	bfac      	ite	ge
 8006048:	6563      	strge	r3, [r4, #84]	@ 0x54
 800604a:	81a3      	strhlt	r3, [r4, #12]
 800604c:	bd10      	pop	{r4, pc}

0800604e <__swrite>:
 800604e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006052:	461f      	mov	r7, r3
 8006054:	898b      	ldrh	r3, [r1, #12]
 8006056:	05db      	lsls	r3, r3, #23
 8006058:	4605      	mov	r5, r0
 800605a:	460c      	mov	r4, r1
 800605c:	4616      	mov	r6, r2
 800605e:	d505      	bpl.n	800606c <__swrite+0x1e>
 8006060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006064:	2302      	movs	r3, #2
 8006066:	2200      	movs	r2, #0
 8006068:	f000 f852 	bl	8006110 <_lseek_r>
 800606c:	89a3      	ldrh	r3, [r4, #12]
 800606e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006072:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006076:	81a3      	strh	r3, [r4, #12]
 8006078:	4632      	mov	r2, r6
 800607a:	463b      	mov	r3, r7
 800607c:	4628      	mov	r0, r5
 800607e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006082:	f000 b869 	b.w	8006158 <_write_r>

08006086 <__sseek>:
 8006086:	b510      	push	{r4, lr}
 8006088:	460c      	mov	r4, r1
 800608a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800608e:	f000 f83f 	bl	8006110 <_lseek_r>
 8006092:	1c43      	adds	r3, r0, #1
 8006094:	89a3      	ldrh	r3, [r4, #12]
 8006096:	bf15      	itete	ne
 8006098:	6560      	strne	r0, [r4, #84]	@ 0x54
 800609a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800609e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80060a2:	81a3      	strheq	r3, [r4, #12]
 80060a4:	bf18      	it	ne
 80060a6:	81a3      	strhne	r3, [r4, #12]
 80060a8:	bd10      	pop	{r4, pc}

080060aa <__sclose>:
 80060aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ae:	f000 b81f 	b.w	80060f0 <_close_r>

080060b2 <memset>:
 80060b2:	4402      	add	r2, r0
 80060b4:	4603      	mov	r3, r0
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d100      	bne.n	80060bc <memset+0xa>
 80060ba:	4770      	bx	lr
 80060bc:	f803 1b01 	strb.w	r1, [r3], #1
 80060c0:	e7f9      	b.n	80060b6 <memset+0x4>

080060c2 <strncat>:
 80060c2:	b530      	push	{r4, r5, lr}
 80060c4:	4604      	mov	r4, r0
 80060c6:	7825      	ldrb	r5, [r4, #0]
 80060c8:	4623      	mov	r3, r4
 80060ca:	3401      	adds	r4, #1
 80060cc:	2d00      	cmp	r5, #0
 80060ce:	d1fa      	bne.n	80060c6 <strncat+0x4>
 80060d0:	3a01      	subs	r2, #1
 80060d2:	d304      	bcc.n	80060de <strncat+0x1c>
 80060d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060d8:	f803 4b01 	strb.w	r4, [r3], #1
 80060dc:	b904      	cbnz	r4, 80060e0 <strncat+0x1e>
 80060de:	bd30      	pop	{r4, r5, pc}
 80060e0:	2a00      	cmp	r2, #0
 80060e2:	d1f5      	bne.n	80060d0 <strncat+0xe>
 80060e4:	701a      	strb	r2, [r3, #0]
 80060e6:	e7f3      	b.n	80060d0 <strncat+0xe>

080060e8 <_localeconv_r>:
 80060e8:	4800      	ldr	r0, [pc, #0]	@ (80060ec <_localeconv_r+0x4>)
 80060ea:	4770      	bx	lr
 80060ec:	24000374 	.word	0x24000374

080060f0 <_close_r>:
 80060f0:	b538      	push	{r3, r4, r5, lr}
 80060f2:	4d06      	ldr	r5, [pc, #24]	@ (800610c <_close_r+0x1c>)
 80060f4:	2300      	movs	r3, #0
 80060f6:	4604      	mov	r4, r0
 80060f8:	4608      	mov	r0, r1
 80060fa:	602b      	str	r3, [r5, #0]
 80060fc:	f7fb f921 	bl	8001342 <_close>
 8006100:	1c43      	adds	r3, r0, #1
 8006102:	d102      	bne.n	800610a <_close_r+0x1a>
 8006104:	682b      	ldr	r3, [r5, #0]
 8006106:	b103      	cbz	r3, 800610a <_close_r+0x1a>
 8006108:	6023      	str	r3, [r4, #0]
 800610a:	bd38      	pop	{r3, r4, r5, pc}
 800610c:	240009fc 	.word	0x240009fc

08006110 <_lseek_r>:
 8006110:	b538      	push	{r3, r4, r5, lr}
 8006112:	4d07      	ldr	r5, [pc, #28]	@ (8006130 <_lseek_r+0x20>)
 8006114:	4604      	mov	r4, r0
 8006116:	4608      	mov	r0, r1
 8006118:	4611      	mov	r1, r2
 800611a:	2200      	movs	r2, #0
 800611c:	602a      	str	r2, [r5, #0]
 800611e:	461a      	mov	r2, r3
 8006120:	f7fb f936 	bl	8001390 <_lseek>
 8006124:	1c43      	adds	r3, r0, #1
 8006126:	d102      	bne.n	800612e <_lseek_r+0x1e>
 8006128:	682b      	ldr	r3, [r5, #0]
 800612a:	b103      	cbz	r3, 800612e <_lseek_r+0x1e>
 800612c:	6023      	str	r3, [r4, #0]
 800612e:	bd38      	pop	{r3, r4, r5, pc}
 8006130:	240009fc 	.word	0x240009fc

08006134 <_read_r>:
 8006134:	b538      	push	{r3, r4, r5, lr}
 8006136:	4d07      	ldr	r5, [pc, #28]	@ (8006154 <_read_r+0x20>)
 8006138:	4604      	mov	r4, r0
 800613a:	4608      	mov	r0, r1
 800613c:	4611      	mov	r1, r2
 800613e:	2200      	movs	r2, #0
 8006140:	602a      	str	r2, [r5, #0]
 8006142:	461a      	mov	r2, r3
 8006144:	f7fb f8c4 	bl	80012d0 <_read>
 8006148:	1c43      	adds	r3, r0, #1
 800614a:	d102      	bne.n	8006152 <_read_r+0x1e>
 800614c:	682b      	ldr	r3, [r5, #0]
 800614e:	b103      	cbz	r3, 8006152 <_read_r+0x1e>
 8006150:	6023      	str	r3, [r4, #0]
 8006152:	bd38      	pop	{r3, r4, r5, pc}
 8006154:	240009fc 	.word	0x240009fc

08006158 <_write_r>:
 8006158:	b538      	push	{r3, r4, r5, lr}
 800615a:	4d07      	ldr	r5, [pc, #28]	@ (8006178 <_write_r+0x20>)
 800615c:	4604      	mov	r4, r0
 800615e:	4608      	mov	r0, r1
 8006160:	4611      	mov	r1, r2
 8006162:	2200      	movs	r2, #0
 8006164:	602a      	str	r2, [r5, #0]
 8006166:	461a      	mov	r2, r3
 8006168:	f7fb f8cf 	bl	800130a <_write>
 800616c:	1c43      	adds	r3, r0, #1
 800616e:	d102      	bne.n	8006176 <_write_r+0x1e>
 8006170:	682b      	ldr	r3, [r5, #0]
 8006172:	b103      	cbz	r3, 8006176 <_write_r+0x1e>
 8006174:	6023      	str	r3, [r4, #0]
 8006176:	bd38      	pop	{r3, r4, r5, pc}
 8006178:	240009fc 	.word	0x240009fc

0800617c <__errno>:
 800617c:	4b01      	ldr	r3, [pc, #4]	@ (8006184 <__errno+0x8>)
 800617e:	6818      	ldr	r0, [r3, #0]
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	24000234 	.word	0x24000234

08006188 <__libc_init_array>:
 8006188:	b570      	push	{r4, r5, r6, lr}
 800618a:	4d0d      	ldr	r5, [pc, #52]	@ (80061c0 <__libc_init_array+0x38>)
 800618c:	4c0d      	ldr	r4, [pc, #52]	@ (80061c4 <__libc_init_array+0x3c>)
 800618e:	1b64      	subs	r4, r4, r5
 8006190:	10a4      	asrs	r4, r4, #2
 8006192:	2600      	movs	r6, #0
 8006194:	42a6      	cmp	r6, r4
 8006196:	d109      	bne.n	80061ac <__libc_init_array+0x24>
 8006198:	4d0b      	ldr	r5, [pc, #44]	@ (80061c8 <__libc_init_array+0x40>)
 800619a:	4c0c      	ldr	r4, [pc, #48]	@ (80061cc <__libc_init_array+0x44>)
 800619c:	f003 fab6 	bl	800970c <_init>
 80061a0:	1b64      	subs	r4, r4, r5
 80061a2:	10a4      	asrs	r4, r4, #2
 80061a4:	2600      	movs	r6, #0
 80061a6:	42a6      	cmp	r6, r4
 80061a8:	d105      	bne.n	80061b6 <__libc_init_array+0x2e>
 80061aa:	bd70      	pop	{r4, r5, r6, pc}
 80061ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80061b0:	4798      	blx	r3
 80061b2:	3601      	adds	r6, #1
 80061b4:	e7ee      	b.n	8006194 <__libc_init_array+0xc>
 80061b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ba:	4798      	blx	r3
 80061bc:	3601      	adds	r6, #1
 80061be:	e7f2      	b.n	80061a6 <__libc_init_array+0x1e>
 80061c0:	08009c44 	.word	0x08009c44
 80061c4:	08009c44 	.word	0x08009c44
 80061c8:	08009c44 	.word	0x08009c44
 80061cc:	08009c48 	.word	0x08009c48

080061d0 <__retarget_lock_init_recursive>:
 80061d0:	4770      	bx	lr

080061d2 <__retarget_lock_acquire_recursive>:
 80061d2:	4770      	bx	lr

080061d4 <__retarget_lock_release_recursive>:
 80061d4:	4770      	bx	lr
	...

080061d8 <nanf>:
 80061d8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80061e0 <nanf+0x8>
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	7fc00000 	.word	0x7fc00000

080061e4 <quorem>:
 80061e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e8:	6903      	ldr	r3, [r0, #16]
 80061ea:	690c      	ldr	r4, [r1, #16]
 80061ec:	42a3      	cmp	r3, r4
 80061ee:	4607      	mov	r7, r0
 80061f0:	db7e      	blt.n	80062f0 <quorem+0x10c>
 80061f2:	3c01      	subs	r4, #1
 80061f4:	f101 0814 	add.w	r8, r1, #20
 80061f8:	00a3      	lsls	r3, r4, #2
 80061fa:	f100 0514 	add.w	r5, r0, #20
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006204:	9301      	str	r3, [sp, #4]
 8006206:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800620a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800620e:	3301      	adds	r3, #1
 8006210:	429a      	cmp	r2, r3
 8006212:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006216:	fbb2 f6f3 	udiv	r6, r2, r3
 800621a:	d32e      	bcc.n	800627a <quorem+0x96>
 800621c:	f04f 0a00 	mov.w	sl, #0
 8006220:	46c4      	mov	ip, r8
 8006222:	46ae      	mov	lr, r5
 8006224:	46d3      	mov	fp, sl
 8006226:	f85c 3b04 	ldr.w	r3, [ip], #4
 800622a:	b298      	uxth	r0, r3
 800622c:	fb06 a000 	mla	r0, r6, r0, sl
 8006230:	0c02      	lsrs	r2, r0, #16
 8006232:	0c1b      	lsrs	r3, r3, #16
 8006234:	fb06 2303 	mla	r3, r6, r3, r2
 8006238:	f8de 2000 	ldr.w	r2, [lr]
 800623c:	b280      	uxth	r0, r0
 800623e:	b292      	uxth	r2, r2
 8006240:	1a12      	subs	r2, r2, r0
 8006242:	445a      	add	r2, fp
 8006244:	f8de 0000 	ldr.w	r0, [lr]
 8006248:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800624c:	b29b      	uxth	r3, r3
 800624e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006252:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006256:	b292      	uxth	r2, r2
 8006258:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800625c:	45e1      	cmp	r9, ip
 800625e:	f84e 2b04 	str.w	r2, [lr], #4
 8006262:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006266:	d2de      	bcs.n	8006226 <quorem+0x42>
 8006268:	9b00      	ldr	r3, [sp, #0]
 800626a:	58eb      	ldr	r3, [r5, r3]
 800626c:	b92b      	cbnz	r3, 800627a <quorem+0x96>
 800626e:	9b01      	ldr	r3, [sp, #4]
 8006270:	3b04      	subs	r3, #4
 8006272:	429d      	cmp	r5, r3
 8006274:	461a      	mov	r2, r3
 8006276:	d32f      	bcc.n	80062d8 <quorem+0xf4>
 8006278:	613c      	str	r4, [r7, #16]
 800627a:	4638      	mov	r0, r7
 800627c:	f001 f956 	bl	800752c <__mcmp>
 8006280:	2800      	cmp	r0, #0
 8006282:	db25      	blt.n	80062d0 <quorem+0xec>
 8006284:	4629      	mov	r1, r5
 8006286:	2000      	movs	r0, #0
 8006288:	f858 2b04 	ldr.w	r2, [r8], #4
 800628c:	f8d1 c000 	ldr.w	ip, [r1]
 8006290:	fa1f fe82 	uxth.w	lr, r2
 8006294:	fa1f f38c 	uxth.w	r3, ip
 8006298:	eba3 030e 	sub.w	r3, r3, lr
 800629c:	4403      	add	r3, r0
 800629e:	0c12      	lsrs	r2, r2, #16
 80062a0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80062a4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062ae:	45c1      	cmp	r9, r8
 80062b0:	f841 3b04 	str.w	r3, [r1], #4
 80062b4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80062b8:	d2e6      	bcs.n	8006288 <quorem+0xa4>
 80062ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062c2:	b922      	cbnz	r2, 80062ce <quorem+0xea>
 80062c4:	3b04      	subs	r3, #4
 80062c6:	429d      	cmp	r5, r3
 80062c8:	461a      	mov	r2, r3
 80062ca:	d30b      	bcc.n	80062e4 <quorem+0x100>
 80062cc:	613c      	str	r4, [r7, #16]
 80062ce:	3601      	adds	r6, #1
 80062d0:	4630      	mov	r0, r6
 80062d2:	b003      	add	sp, #12
 80062d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d8:	6812      	ldr	r2, [r2, #0]
 80062da:	3b04      	subs	r3, #4
 80062dc:	2a00      	cmp	r2, #0
 80062de:	d1cb      	bne.n	8006278 <quorem+0x94>
 80062e0:	3c01      	subs	r4, #1
 80062e2:	e7c6      	b.n	8006272 <quorem+0x8e>
 80062e4:	6812      	ldr	r2, [r2, #0]
 80062e6:	3b04      	subs	r3, #4
 80062e8:	2a00      	cmp	r2, #0
 80062ea:	d1ef      	bne.n	80062cc <quorem+0xe8>
 80062ec:	3c01      	subs	r4, #1
 80062ee:	e7ea      	b.n	80062c6 <quorem+0xe2>
 80062f0:	2000      	movs	r0, #0
 80062f2:	e7ee      	b.n	80062d2 <quorem+0xee>
 80062f4:	0000      	movs	r0, r0
	...

080062f8 <_dtoa_r>:
 80062f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062fc:	ed2d 8b02 	vpush	{d8}
 8006300:	69c7      	ldr	r7, [r0, #28]
 8006302:	b091      	sub	sp, #68	@ 0x44
 8006304:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006308:	ec55 4b10 	vmov	r4, r5, d0
 800630c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800630e:	9107      	str	r1, [sp, #28]
 8006310:	4681      	mov	r9, r0
 8006312:	9209      	str	r2, [sp, #36]	@ 0x24
 8006314:	930d      	str	r3, [sp, #52]	@ 0x34
 8006316:	b97f      	cbnz	r7, 8006338 <_dtoa_r+0x40>
 8006318:	2010      	movs	r0, #16
 800631a:	f000 fd95 	bl	8006e48 <malloc>
 800631e:	4602      	mov	r2, r0
 8006320:	f8c9 001c 	str.w	r0, [r9, #28]
 8006324:	b920      	cbnz	r0, 8006330 <_dtoa_r+0x38>
 8006326:	4ba0      	ldr	r3, [pc, #640]	@ (80065a8 <_dtoa_r+0x2b0>)
 8006328:	21ef      	movs	r1, #239	@ 0xef
 800632a:	48a0      	ldr	r0, [pc, #640]	@ (80065ac <_dtoa_r+0x2b4>)
 800632c:	f002 fb78 	bl	8008a20 <__assert_func>
 8006330:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006334:	6007      	str	r7, [r0, #0]
 8006336:	60c7      	str	r7, [r0, #12]
 8006338:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800633c:	6819      	ldr	r1, [r3, #0]
 800633e:	b159      	cbz	r1, 8006358 <_dtoa_r+0x60>
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	604a      	str	r2, [r1, #4]
 8006344:	2301      	movs	r3, #1
 8006346:	4093      	lsls	r3, r2
 8006348:	608b      	str	r3, [r1, #8]
 800634a:	4648      	mov	r0, r9
 800634c:	f000 fe72 	bl	8007034 <_Bfree>
 8006350:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006354:	2200      	movs	r2, #0
 8006356:	601a      	str	r2, [r3, #0]
 8006358:	1e2b      	subs	r3, r5, #0
 800635a:	bfbb      	ittet	lt
 800635c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006360:	9303      	strlt	r3, [sp, #12]
 8006362:	2300      	movge	r3, #0
 8006364:	2201      	movlt	r2, #1
 8006366:	bfac      	ite	ge
 8006368:	6033      	strge	r3, [r6, #0]
 800636a:	6032      	strlt	r2, [r6, #0]
 800636c:	4b90      	ldr	r3, [pc, #576]	@ (80065b0 <_dtoa_r+0x2b8>)
 800636e:	9e03      	ldr	r6, [sp, #12]
 8006370:	43b3      	bics	r3, r6
 8006372:	d110      	bne.n	8006396 <_dtoa_r+0x9e>
 8006374:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006376:	f242 730f 	movw	r3, #9999	@ 0x270f
 800637a:	6013      	str	r3, [r2, #0]
 800637c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8006380:	4323      	orrs	r3, r4
 8006382:	f000 84e6 	beq.w	8006d52 <_dtoa_r+0xa5a>
 8006386:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006388:	4f8a      	ldr	r7, [pc, #552]	@ (80065b4 <_dtoa_r+0x2bc>)
 800638a:	2b00      	cmp	r3, #0
 800638c:	f000 84e8 	beq.w	8006d60 <_dtoa_r+0xa68>
 8006390:	1cfb      	adds	r3, r7, #3
 8006392:	f000 bce3 	b.w	8006d5c <_dtoa_r+0xa64>
 8006396:	ed9d 8b02 	vldr	d8, [sp, #8]
 800639a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800639e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063a2:	d10a      	bne.n	80063ba <_dtoa_r+0xc2>
 80063a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80063a6:	2301      	movs	r3, #1
 80063a8:	6013      	str	r3, [r2, #0]
 80063aa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80063ac:	b113      	cbz	r3, 80063b4 <_dtoa_r+0xbc>
 80063ae:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80063b0:	4b81      	ldr	r3, [pc, #516]	@ (80065b8 <_dtoa_r+0x2c0>)
 80063b2:	6013      	str	r3, [r2, #0]
 80063b4:	4f81      	ldr	r7, [pc, #516]	@ (80065bc <_dtoa_r+0x2c4>)
 80063b6:	f000 bcd3 	b.w	8006d60 <_dtoa_r+0xa68>
 80063ba:	aa0e      	add	r2, sp, #56	@ 0x38
 80063bc:	a90f      	add	r1, sp, #60	@ 0x3c
 80063be:	4648      	mov	r0, r9
 80063c0:	eeb0 0b48 	vmov.f64	d0, d8
 80063c4:	f001 f9d2 	bl	800776c <__d2b>
 80063c8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80063cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80063ce:	9001      	str	r0, [sp, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d045      	beq.n	8006460 <_dtoa_r+0x168>
 80063d4:	eeb0 7b48 	vmov.f64	d7, d8
 80063d8:	ee18 1a90 	vmov	r1, s17
 80063dc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80063e0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80063e4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80063e8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80063ec:	2500      	movs	r5, #0
 80063ee:	ee07 1a90 	vmov	s15, r1
 80063f2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80063f6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8006590 <_dtoa_r+0x298>
 80063fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80063fe:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8006598 <_dtoa_r+0x2a0>
 8006402:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006406:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80065a0 <_dtoa_r+0x2a8>
 800640a:	ee07 3a90 	vmov	s15, r3
 800640e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8006412:	eeb0 7b46 	vmov.f64	d7, d6
 8006416:	eea4 7b05 	vfma.f64	d7, d4, d5
 800641a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800641e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006426:	ee16 8a90 	vmov	r8, s13
 800642a:	d508      	bpl.n	800643e <_dtoa_r+0x146>
 800642c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006430:	eeb4 6b47 	vcmp.f64	d6, d7
 8006434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006438:	bf18      	it	ne
 800643a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800643e:	f1b8 0f16 	cmp.w	r8, #22
 8006442:	d82b      	bhi.n	800649c <_dtoa_r+0x1a4>
 8006444:	495e      	ldr	r1, [pc, #376]	@ (80065c0 <_dtoa_r+0x2c8>)
 8006446:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800644a:	ed91 7b00 	vldr	d7, [r1]
 800644e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8006452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006456:	d501      	bpl.n	800645c <_dtoa_r+0x164>
 8006458:	f108 38ff 	add.w	r8, r8, #4294967295
 800645c:	2100      	movs	r1, #0
 800645e:	e01e      	b.n	800649e <_dtoa_r+0x1a6>
 8006460:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006462:	4413      	add	r3, r2
 8006464:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8006468:	2920      	cmp	r1, #32
 800646a:	bfc1      	itttt	gt
 800646c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8006470:	408e      	lslgt	r6, r1
 8006472:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8006476:	fa24 f101 	lsrgt.w	r1, r4, r1
 800647a:	bfd6      	itet	le
 800647c:	f1c1 0120 	rsble	r1, r1, #32
 8006480:	4331      	orrgt	r1, r6
 8006482:	fa04 f101 	lslle.w	r1, r4, r1
 8006486:	ee07 1a90 	vmov	s15, r1
 800648a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800648e:	3b01      	subs	r3, #1
 8006490:	ee17 1a90 	vmov	r1, s15
 8006494:	2501      	movs	r5, #1
 8006496:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800649a:	e7a8      	b.n	80063ee <_dtoa_r+0xf6>
 800649c:	2101      	movs	r1, #1
 800649e:	1ad2      	subs	r2, r2, r3
 80064a0:	1e53      	subs	r3, r2, #1
 80064a2:	9306      	str	r3, [sp, #24]
 80064a4:	bf45      	ittet	mi
 80064a6:	f1c2 0301 	rsbmi	r3, r2, #1
 80064aa:	9304      	strmi	r3, [sp, #16]
 80064ac:	2300      	movpl	r3, #0
 80064ae:	2300      	movmi	r3, #0
 80064b0:	bf4c      	ite	mi
 80064b2:	9306      	strmi	r3, [sp, #24]
 80064b4:	9304      	strpl	r3, [sp, #16]
 80064b6:	f1b8 0f00 	cmp.w	r8, #0
 80064ba:	910c      	str	r1, [sp, #48]	@ 0x30
 80064bc:	db18      	blt.n	80064f0 <_dtoa_r+0x1f8>
 80064be:	9b06      	ldr	r3, [sp, #24]
 80064c0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80064c4:	4443      	add	r3, r8
 80064c6:	9306      	str	r3, [sp, #24]
 80064c8:	2300      	movs	r3, #0
 80064ca:	9a07      	ldr	r2, [sp, #28]
 80064cc:	2a09      	cmp	r2, #9
 80064ce:	d845      	bhi.n	800655c <_dtoa_r+0x264>
 80064d0:	2a05      	cmp	r2, #5
 80064d2:	bfc4      	itt	gt
 80064d4:	3a04      	subgt	r2, #4
 80064d6:	9207      	strgt	r2, [sp, #28]
 80064d8:	9a07      	ldr	r2, [sp, #28]
 80064da:	f1a2 0202 	sub.w	r2, r2, #2
 80064de:	bfcc      	ite	gt
 80064e0:	2400      	movgt	r4, #0
 80064e2:	2401      	movle	r4, #1
 80064e4:	2a03      	cmp	r2, #3
 80064e6:	d844      	bhi.n	8006572 <_dtoa_r+0x27a>
 80064e8:	e8df f002 	tbb	[pc, r2]
 80064ec:	0b173634 	.word	0x0b173634
 80064f0:	9b04      	ldr	r3, [sp, #16]
 80064f2:	2200      	movs	r2, #0
 80064f4:	eba3 0308 	sub.w	r3, r3, r8
 80064f8:	9304      	str	r3, [sp, #16]
 80064fa:	920a      	str	r2, [sp, #40]	@ 0x28
 80064fc:	f1c8 0300 	rsb	r3, r8, #0
 8006500:	e7e3      	b.n	80064ca <_dtoa_r+0x1d2>
 8006502:	2201      	movs	r2, #1
 8006504:	9208      	str	r2, [sp, #32]
 8006506:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006508:	eb08 0b02 	add.w	fp, r8, r2
 800650c:	f10b 0a01 	add.w	sl, fp, #1
 8006510:	4652      	mov	r2, sl
 8006512:	2a01      	cmp	r2, #1
 8006514:	bfb8      	it	lt
 8006516:	2201      	movlt	r2, #1
 8006518:	e006      	b.n	8006528 <_dtoa_r+0x230>
 800651a:	2201      	movs	r2, #1
 800651c:	9208      	str	r2, [sp, #32]
 800651e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006520:	2a00      	cmp	r2, #0
 8006522:	dd29      	ble.n	8006578 <_dtoa_r+0x280>
 8006524:	4693      	mov	fp, r2
 8006526:	4692      	mov	sl, r2
 8006528:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800652c:	2100      	movs	r1, #0
 800652e:	2004      	movs	r0, #4
 8006530:	f100 0614 	add.w	r6, r0, #20
 8006534:	4296      	cmp	r6, r2
 8006536:	d926      	bls.n	8006586 <_dtoa_r+0x28e>
 8006538:	6079      	str	r1, [r7, #4]
 800653a:	4648      	mov	r0, r9
 800653c:	9305      	str	r3, [sp, #20]
 800653e:	f000 fd39 	bl	8006fb4 <_Balloc>
 8006542:	9b05      	ldr	r3, [sp, #20]
 8006544:	4607      	mov	r7, r0
 8006546:	2800      	cmp	r0, #0
 8006548:	d13e      	bne.n	80065c8 <_dtoa_r+0x2d0>
 800654a:	4b1e      	ldr	r3, [pc, #120]	@ (80065c4 <_dtoa_r+0x2cc>)
 800654c:	4602      	mov	r2, r0
 800654e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006552:	e6ea      	b.n	800632a <_dtoa_r+0x32>
 8006554:	2200      	movs	r2, #0
 8006556:	e7e1      	b.n	800651c <_dtoa_r+0x224>
 8006558:	2200      	movs	r2, #0
 800655a:	e7d3      	b.n	8006504 <_dtoa_r+0x20c>
 800655c:	2401      	movs	r4, #1
 800655e:	2200      	movs	r2, #0
 8006560:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8006564:	f04f 3bff 	mov.w	fp, #4294967295
 8006568:	2100      	movs	r1, #0
 800656a:	46da      	mov	sl, fp
 800656c:	2212      	movs	r2, #18
 800656e:	9109      	str	r1, [sp, #36]	@ 0x24
 8006570:	e7da      	b.n	8006528 <_dtoa_r+0x230>
 8006572:	2201      	movs	r2, #1
 8006574:	9208      	str	r2, [sp, #32]
 8006576:	e7f5      	b.n	8006564 <_dtoa_r+0x26c>
 8006578:	f04f 0b01 	mov.w	fp, #1
 800657c:	46da      	mov	sl, fp
 800657e:	465a      	mov	r2, fp
 8006580:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8006584:	e7d0      	b.n	8006528 <_dtoa_r+0x230>
 8006586:	3101      	adds	r1, #1
 8006588:	0040      	lsls	r0, r0, #1
 800658a:	e7d1      	b.n	8006530 <_dtoa_r+0x238>
 800658c:	f3af 8000 	nop.w
 8006590:	636f4361 	.word	0x636f4361
 8006594:	3fd287a7 	.word	0x3fd287a7
 8006598:	8b60c8b3 	.word	0x8b60c8b3
 800659c:	3fc68a28 	.word	0x3fc68a28
 80065a0:	509f79fb 	.word	0x509f79fb
 80065a4:	3fd34413 	.word	0x3fd34413
 80065a8:	08009856 	.word	0x08009856
 80065ac:	0800986d 	.word	0x0800986d
 80065b0:	7ff00000 	.word	0x7ff00000
 80065b4:	08009852 	.word	0x08009852
 80065b8:	08009821 	.word	0x08009821
 80065bc:	08009820 	.word	0x08009820
 80065c0:	08009a20 	.word	0x08009a20
 80065c4:	080098c5 	.word	0x080098c5
 80065c8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80065cc:	f1ba 0f0e 	cmp.w	sl, #14
 80065d0:	6010      	str	r0, [r2, #0]
 80065d2:	d86e      	bhi.n	80066b2 <_dtoa_r+0x3ba>
 80065d4:	2c00      	cmp	r4, #0
 80065d6:	d06c      	beq.n	80066b2 <_dtoa_r+0x3ba>
 80065d8:	f1b8 0f00 	cmp.w	r8, #0
 80065dc:	f340 80b4 	ble.w	8006748 <_dtoa_r+0x450>
 80065e0:	4ac8      	ldr	r2, [pc, #800]	@ (8006904 <_dtoa_r+0x60c>)
 80065e2:	f008 010f 	and.w	r1, r8, #15
 80065e6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80065ea:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80065ee:	ed92 7b00 	vldr	d7, [r2]
 80065f2:	ea4f 1128 	mov.w	r1, r8, asr #4
 80065f6:	f000 809b 	beq.w	8006730 <_dtoa_r+0x438>
 80065fa:	4ac3      	ldr	r2, [pc, #780]	@ (8006908 <_dtoa_r+0x610>)
 80065fc:	ed92 6b08 	vldr	d6, [r2, #32]
 8006600:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8006604:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006608:	f001 010f 	and.w	r1, r1, #15
 800660c:	2203      	movs	r2, #3
 800660e:	48be      	ldr	r0, [pc, #760]	@ (8006908 <_dtoa_r+0x610>)
 8006610:	2900      	cmp	r1, #0
 8006612:	f040 808f 	bne.w	8006734 <_dtoa_r+0x43c>
 8006616:	ed9d 6b02 	vldr	d6, [sp, #8]
 800661a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800661e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006622:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006624:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006628:	2900      	cmp	r1, #0
 800662a:	f000 80b3 	beq.w	8006794 <_dtoa_r+0x49c>
 800662e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8006632:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800663a:	f140 80ab 	bpl.w	8006794 <_dtoa_r+0x49c>
 800663e:	f1ba 0f00 	cmp.w	sl, #0
 8006642:	f000 80a7 	beq.w	8006794 <_dtoa_r+0x49c>
 8006646:	f1bb 0f00 	cmp.w	fp, #0
 800664a:	dd30      	ble.n	80066ae <_dtoa_r+0x3b6>
 800664c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8006650:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006654:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006658:	f108 31ff 	add.w	r1, r8, #4294967295
 800665c:	9105      	str	r1, [sp, #20]
 800665e:	3201      	adds	r2, #1
 8006660:	465c      	mov	r4, fp
 8006662:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006666:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800666a:	ee07 2a90 	vmov	s15, r2
 800666e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006672:	eea7 5b06 	vfma.f64	d5, d7, d6
 8006676:	ee15 2a90 	vmov	r2, s11
 800667a:	ec51 0b15 	vmov	r0, r1, d5
 800667e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8006682:	2c00      	cmp	r4, #0
 8006684:	f040 808a 	bne.w	800679c <_dtoa_r+0x4a4>
 8006688:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800668c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006690:	ec41 0b17 	vmov	d7, r0, r1
 8006694:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800669c:	f300 826a 	bgt.w	8006b74 <_dtoa_r+0x87c>
 80066a0:	eeb1 7b47 	vneg.f64	d7, d7
 80066a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80066a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ac:	d423      	bmi.n	80066f6 <_dtoa_r+0x3fe>
 80066ae:	ed8d 8b02 	vstr	d8, [sp, #8]
 80066b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80066b4:	2a00      	cmp	r2, #0
 80066b6:	f2c0 8129 	blt.w	800690c <_dtoa_r+0x614>
 80066ba:	f1b8 0f0e 	cmp.w	r8, #14
 80066be:	f300 8125 	bgt.w	800690c <_dtoa_r+0x614>
 80066c2:	4b90      	ldr	r3, [pc, #576]	@ (8006904 <_dtoa_r+0x60c>)
 80066c4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80066c8:	ed93 6b00 	vldr	d6, [r3]
 80066cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f280 80c8 	bge.w	8006864 <_dtoa_r+0x56c>
 80066d4:	f1ba 0f00 	cmp.w	sl, #0
 80066d8:	f300 80c4 	bgt.w	8006864 <_dtoa_r+0x56c>
 80066dc:	d10b      	bne.n	80066f6 <_dtoa_r+0x3fe>
 80066de:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80066e2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80066e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80066ea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80066ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066f2:	f2c0 823c 	blt.w	8006b6e <_dtoa_r+0x876>
 80066f6:	2400      	movs	r4, #0
 80066f8:	4625      	mov	r5, r4
 80066fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066fc:	43db      	mvns	r3, r3
 80066fe:	9305      	str	r3, [sp, #20]
 8006700:	463e      	mov	r6, r7
 8006702:	f04f 0800 	mov.w	r8, #0
 8006706:	4621      	mov	r1, r4
 8006708:	4648      	mov	r0, r9
 800670a:	f000 fc93 	bl	8007034 <_Bfree>
 800670e:	2d00      	cmp	r5, #0
 8006710:	f000 80a2 	beq.w	8006858 <_dtoa_r+0x560>
 8006714:	f1b8 0f00 	cmp.w	r8, #0
 8006718:	d005      	beq.n	8006726 <_dtoa_r+0x42e>
 800671a:	45a8      	cmp	r8, r5
 800671c:	d003      	beq.n	8006726 <_dtoa_r+0x42e>
 800671e:	4641      	mov	r1, r8
 8006720:	4648      	mov	r0, r9
 8006722:	f000 fc87 	bl	8007034 <_Bfree>
 8006726:	4629      	mov	r1, r5
 8006728:	4648      	mov	r0, r9
 800672a:	f000 fc83 	bl	8007034 <_Bfree>
 800672e:	e093      	b.n	8006858 <_dtoa_r+0x560>
 8006730:	2202      	movs	r2, #2
 8006732:	e76c      	b.n	800660e <_dtoa_r+0x316>
 8006734:	07cc      	lsls	r4, r1, #31
 8006736:	d504      	bpl.n	8006742 <_dtoa_r+0x44a>
 8006738:	ed90 6b00 	vldr	d6, [r0]
 800673c:	3201      	adds	r2, #1
 800673e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006742:	1049      	asrs	r1, r1, #1
 8006744:	3008      	adds	r0, #8
 8006746:	e763      	b.n	8006610 <_dtoa_r+0x318>
 8006748:	d022      	beq.n	8006790 <_dtoa_r+0x498>
 800674a:	f1c8 0100 	rsb	r1, r8, #0
 800674e:	4a6d      	ldr	r2, [pc, #436]	@ (8006904 <_dtoa_r+0x60c>)
 8006750:	f001 000f 	and.w	r0, r1, #15
 8006754:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006758:	ed92 7b00 	vldr	d7, [r2]
 800675c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006760:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006764:	4868      	ldr	r0, [pc, #416]	@ (8006908 <_dtoa_r+0x610>)
 8006766:	1109      	asrs	r1, r1, #4
 8006768:	2400      	movs	r4, #0
 800676a:	2202      	movs	r2, #2
 800676c:	b929      	cbnz	r1, 800677a <_dtoa_r+0x482>
 800676e:	2c00      	cmp	r4, #0
 8006770:	f43f af57 	beq.w	8006622 <_dtoa_r+0x32a>
 8006774:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006778:	e753      	b.n	8006622 <_dtoa_r+0x32a>
 800677a:	07ce      	lsls	r6, r1, #31
 800677c:	d505      	bpl.n	800678a <_dtoa_r+0x492>
 800677e:	ed90 6b00 	vldr	d6, [r0]
 8006782:	3201      	adds	r2, #1
 8006784:	2401      	movs	r4, #1
 8006786:	ee27 7b06 	vmul.f64	d7, d7, d6
 800678a:	1049      	asrs	r1, r1, #1
 800678c:	3008      	adds	r0, #8
 800678e:	e7ed      	b.n	800676c <_dtoa_r+0x474>
 8006790:	2202      	movs	r2, #2
 8006792:	e746      	b.n	8006622 <_dtoa_r+0x32a>
 8006794:	f8cd 8014 	str.w	r8, [sp, #20]
 8006798:	4654      	mov	r4, sl
 800679a:	e762      	b.n	8006662 <_dtoa_r+0x36a>
 800679c:	4a59      	ldr	r2, [pc, #356]	@ (8006904 <_dtoa_r+0x60c>)
 800679e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80067a2:	ed12 4b02 	vldr	d4, [r2, #-8]
 80067a6:	9a08      	ldr	r2, [sp, #32]
 80067a8:	ec41 0b17 	vmov	d7, r0, r1
 80067ac:	443c      	add	r4, r7
 80067ae:	b34a      	cbz	r2, 8006804 <_dtoa_r+0x50c>
 80067b0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80067b4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80067b8:	463e      	mov	r6, r7
 80067ba:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80067be:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80067c2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80067c6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80067ca:	ee14 2a90 	vmov	r2, s9
 80067ce:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80067d2:	3230      	adds	r2, #48	@ 0x30
 80067d4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80067d8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80067dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067e0:	f806 2b01 	strb.w	r2, [r6], #1
 80067e4:	d438      	bmi.n	8006858 <_dtoa_r+0x560>
 80067e6:	ee32 5b46 	vsub.f64	d5, d2, d6
 80067ea:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80067ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067f2:	d46e      	bmi.n	80068d2 <_dtoa_r+0x5da>
 80067f4:	42a6      	cmp	r6, r4
 80067f6:	f43f af5a 	beq.w	80066ae <_dtoa_r+0x3b6>
 80067fa:	ee27 7b03 	vmul.f64	d7, d7, d3
 80067fe:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006802:	e7e0      	b.n	80067c6 <_dtoa_r+0x4ce>
 8006804:	4621      	mov	r1, r4
 8006806:	463e      	mov	r6, r7
 8006808:	ee27 7b04 	vmul.f64	d7, d7, d4
 800680c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8006810:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006814:	ee14 2a90 	vmov	r2, s9
 8006818:	3230      	adds	r2, #48	@ 0x30
 800681a:	f806 2b01 	strb.w	r2, [r6], #1
 800681e:	42a6      	cmp	r6, r4
 8006820:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006824:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006828:	d119      	bne.n	800685e <_dtoa_r+0x566>
 800682a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800682e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8006832:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8006836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800683a:	dc4a      	bgt.n	80068d2 <_dtoa_r+0x5da>
 800683c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8006840:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8006844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006848:	f57f af31 	bpl.w	80066ae <_dtoa_r+0x3b6>
 800684c:	460e      	mov	r6, r1
 800684e:	3901      	subs	r1, #1
 8006850:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006854:	2b30      	cmp	r3, #48	@ 0x30
 8006856:	d0f9      	beq.n	800684c <_dtoa_r+0x554>
 8006858:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800685c:	e027      	b.n	80068ae <_dtoa_r+0x5b6>
 800685e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006862:	e7d5      	b.n	8006810 <_dtoa_r+0x518>
 8006864:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006868:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800686c:	463e      	mov	r6, r7
 800686e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8006872:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8006876:	ee15 3a10 	vmov	r3, s10
 800687a:	3330      	adds	r3, #48	@ 0x30
 800687c:	f806 3b01 	strb.w	r3, [r6], #1
 8006880:	1bf3      	subs	r3, r6, r7
 8006882:	459a      	cmp	sl, r3
 8006884:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006888:	eea3 7b46 	vfms.f64	d7, d3, d6
 800688c:	d132      	bne.n	80068f4 <_dtoa_r+0x5fc>
 800688e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006892:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800689a:	dc18      	bgt.n	80068ce <_dtoa_r+0x5d6>
 800689c:	eeb4 7b46 	vcmp.f64	d7, d6
 80068a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068a4:	d103      	bne.n	80068ae <_dtoa_r+0x5b6>
 80068a6:	ee15 3a10 	vmov	r3, s10
 80068aa:	07db      	lsls	r3, r3, #31
 80068ac:	d40f      	bmi.n	80068ce <_dtoa_r+0x5d6>
 80068ae:	9901      	ldr	r1, [sp, #4]
 80068b0:	4648      	mov	r0, r9
 80068b2:	f000 fbbf 	bl	8007034 <_Bfree>
 80068b6:	2300      	movs	r3, #0
 80068b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80068ba:	7033      	strb	r3, [r6, #0]
 80068bc:	f108 0301 	add.w	r3, r8, #1
 80068c0:	6013      	str	r3, [r2, #0]
 80068c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 824b 	beq.w	8006d60 <_dtoa_r+0xa68>
 80068ca:	601e      	str	r6, [r3, #0]
 80068cc:	e248      	b.n	8006d60 <_dtoa_r+0xa68>
 80068ce:	f8cd 8014 	str.w	r8, [sp, #20]
 80068d2:	4633      	mov	r3, r6
 80068d4:	461e      	mov	r6, r3
 80068d6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068da:	2a39      	cmp	r2, #57	@ 0x39
 80068dc:	d106      	bne.n	80068ec <_dtoa_r+0x5f4>
 80068de:	429f      	cmp	r7, r3
 80068e0:	d1f8      	bne.n	80068d4 <_dtoa_r+0x5dc>
 80068e2:	9a05      	ldr	r2, [sp, #20]
 80068e4:	3201      	adds	r2, #1
 80068e6:	9205      	str	r2, [sp, #20]
 80068e8:	2230      	movs	r2, #48	@ 0x30
 80068ea:	703a      	strb	r2, [r7, #0]
 80068ec:	781a      	ldrb	r2, [r3, #0]
 80068ee:	3201      	adds	r2, #1
 80068f0:	701a      	strb	r2, [r3, #0]
 80068f2:	e7b1      	b.n	8006858 <_dtoa_r+0x560>
 80068f4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80068f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80068fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006900:	d1b5      	bne.n	800686e <_dtoa_r+0x576>
 8006902:	e7d4      	b.n	80068ae <_dtoa_r+0x5b6>
 8006904:	08009a20 	.word	0x08009a20
 8006908:	080099f8 	.word	0x080099f8
 800690c:	9908      	ldr	r1, [sp, #32]
 800690e:	2900      	cmp	r1, #0
 8006910:	f000 80e9 	beq.w	8006ae6 <_dtoa_r+0x7ee>
 8006914:	9907      	ldr	r1, [sp, #28]
 8006916:	2901      	cmp	r1, #1
 8006918:	f300 80cb 	bgt.w	8006ab2 <_dtoa_r+0x7ba>
 800691c:	2d00      	cmp	r5, #0
 800691e:	f000 80c4 	beq.w	8006aaa <_dtoa_r+0x7b2>
 8006922:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006926:	9e04      	ldr	r6, [sp, #16]
 8006928:	461c      	mov	r4, r3
 800692a:	9305      	str	r3, [sp, #20]
 800692c:	9b04      	ldr	r3, [sp, #16]
 800692e:	4413      	add	r3, r2
 8006930:	9304      	str	r3, [sp, #16]
 8006932:	9b06      	ldr	r3, [sp, #24]
 8006934:	2101      	movs	r1, #1
 8006936:	4413      	add	r3, r2
 8006938:	4648      	mov	r0, r9
 800693a:	9306      	str	r3, [sp, #24]
 800693c:	f000 fc78 	bl	8007230 <__i2b>
 8006940:	9b05      	ldr	r3, [sp, #20]
 8006942:	4605      	mov	r5, r0
 8006944:	b166      	cbz	r6, 8006960 <_dtoa_r+0x668>
 8006946:	9a06      	ldr	r2, [sp, #24]
 8006948:	2a00      	cmp	r2, #0
 800694a:	dd09      	ble.n	8006960 <_dtoa_r+0x668>
 800694c:	42b2      	cmp	r2, r6
 800694e:	9904      	ldr	r1, [sp, #16]
 8006950:	bfa8      	it	ge
 8006952:	4632      	movge	r2, r6
 8006954:	1a89      	subs	r1, r1, r2
 8006956:	9104      	str	r1, [sp, #16]
 8006958:	9906      	ldr	r1, [sp, #24]
 800695a:	1ab6      	subs	r6, r6, r2
 800695c:	1a8a      	subs	r2, r1, r2
 800695e:	9206      	str	r2, [sp, #24]
 8006960:	b30b      	cbz	r3, 80069a6 <_dtoa_r+0x6ae>
 8006962:	9a08      	ldr	r2, [sp, #32]
 8006964:	2a00      	cmp	r2, #0
 8006966:	f000 80c5 	beq.w	8006af4 <_dtoa_r+0x7fc>
 800696a:	2c00      	cmp	r4, #0
 800696c:	f000 80bf 	beq.w	8006aee <_dtoa_r+0x7f6>
 8006970:	4629      	mov	r1, r5
 8006972:	4622      	mov	r2, r4
 8006974:	4648      	mov	r0, r9
 8006976:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006978:	f000 fd12 	bl	80073a0 <__pow5mult>
 800697c:	9a01      	ldr	r2, [sp, #4]
 800697e:	4601      	mov	r1, r0
 8006980:	4605      	mov	r5, r0
 8006982:	4648      	mov	r0, r9
 8006984:	f000 fc6a 	bl	800725c <__multiply>
 8006988:	9901      	ldr	r1, [sp, #4]
 800698a:	9005      	str	r0, [sp, #20]
 800698c:	4648      	mov	r0, r9
 800698e:	f000 fb51 	bl	8007034 <_Bfree>
 8006992:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006994:	1b1b      	subs	r3, r3, r4
 8006996:	f000 80b0 	beq.w	8006afa <_dtoa_r+0x802>
 800699a:	9905      	ldr	r1, [sp, #20]
 800699c:	461a      	mov	r2, r3
 800699e:	4648      	mov	r0, r9
 80069a0:	f000 fcfe 	bl	80073a0 <__pow5mult>
 80069a4:	9001      	str	r0, [sp, #4]
 80069a6:	2101      	movs	r1, #1
 80069a8:	4648      	mov	r0, r9
 80069aa:	f000 fc41 	bl	8007230 <__i2b>
 80069ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069b0:	4604      	mov	r4, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f000 81da 	beq.w	8006d6c <_dtoa_r+0xa74>
 80069b8:	461a      	mov	r2, r3
 80069ba:	4601      	mov	r1, r0
 80069bc:	4648      	mov	r0, r9
 80069be:	f000 fcef 	bl	80073a0 <__pow5mult>
 80069c2:	9b07      	ldr	r3, [sp, #28]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	4604      	mov	r4, r0
 80069c8:	f300 80a0 	bgt.w	8006b0c <_dtoa_r+0x814>
 80069cc:	9b02      	ldr	r3, [sp, #8]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	f040 8096 	bne.w	8006b00 <_dtoa_r+0x808>
 80069d4:	9b03      	ldr	r3, [sp, #12]
 80069d6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80069da:	2a00      	cmp	r2, #0
 80069dc:	f040 8092 	bne.w	8006b04 <_dtoa_r+0x80c>
 80069e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80069e4:	0d12      	lsrs	r2, r2, #20
 80069e6:	0512      	lsls	r2, r2, #20
 80069e8:	2a00      	cmp	r2, #0
 80069ea:	f000 808d 	beq.w	8006b08 <_dtoa_r+0x810>
 80069ee:	9b04      	ldr	r3, [sp, #16]
 80069f0:	3301      	adds	r3, #1
 80069f2:	9304      	str	r3, [sp, #16]
 80069f4:	9b06      	ldr	r3, [sp, #24]
 80069f6:	3301      	adds	r3, #1
 80069f8:	9306      	str	r3, [sp, #24]
 80069fa:	2301      	movs	r3, #1
 80069fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 81b9 	beq.w	8006d78 <_dtoa_r+0xa80>
 8006a06:	6922      	ldr	r2, [r4, #16]
 8006a08:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006a0c:	6910      	ldr	r0, [r2, #16]
 8006a0e:	f000 fbc3 	bl	8007198 <__hi0bits>
 8006a12:	f1c0 0020 	rsb	r0, r0, #32
 8006a16:	9b06      	ldr	r3, [sp, #24]
 8006a18:	4418      	add	r0, r3
 8006a1a:	f010 001f 	ands.w	r0, r0, #31
 8006a1e:	f000 8081 	beq.w	8006b24 <_dtoa_r+0x82c>
 8006a22:	f1c0 0220 	rsb	r2, r0, #32
 8006a26:	2a04      	cmp	r2, #4
 8006a28:	dd73      	ble.n	8006b12 <_dtoa_r+0x81a>
 8006a2a:	9b04      	ldr	r3, [sp, #16]
 8006a2c:	f1c0 001c 	rsb	r0, r0, #28
 8006a30:	4403      	add	r3, r0
 8006a32:	9304      	str	r3, [sp, #16]
 8006a34:	9b06      	ldr	r3, [sp, #24]
 8006a36:	4406      	add	r6, r0
 8006a38:	4403      	add	r3, r0
 8006a3a:	9306      	str	r3, [sp, #24]
 8006a3c:	9b04      	ldr	r3, [sp, #16]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	dd05      	ble.n	8006a4e <_dtoa_r+0x756>
 8006a42:	9901      	ldr	r1, [sp, #4]
 8006a44:	461a      	mov	r2, r3
 8006a46:	4648      	mov	r0, r9
 8006a48:	f000 fd04 	bl	8007454 <__lshift>
 8006a4c:	9001      	str	r0, [sp, #4]
 8006a4e:	9b06      	ldr	r3, [sp, #24]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	dd05      	ble.n	8006a60 <_dtoa_r+0x768>
 8006a54:	4621      	mov	r1, r4
 8006a56:	461a      	mov	r2, r3
 8006a58:	4648      	mov	r0, r9
 8006a5a:	f000 fcfb 	bl	8007454 <__lshift>
 8006a5e:	4604      	mov	r4, r0
 8006a60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d060      	beq.n	8006b28 <_dtoa_r+0x830>
 8006a66:	9801      	ldr	r0, [sp, #4]
 8006a68:	4621      	mov	r1, r4
 8006a6a:	f000 fd5f 	bl	800752c <__mcmp>
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	da5a      	bge.n	8006b28 <_dtoa_r+0x830>
 8006a72:	f108 33ff 	add.w	r3, r8, #4294967295
 8006a76:	9305      	str	r3, [sp, #20]
 8006a78:	9901      	ldr	r1, [sp, #4]
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	220a      	movs	r2, #10
 8006a7e:	4648      	mov	r0, r9
 8006a80:	f000 fafa 	bl	8007078 <__multadd>
 8006a84:	9b08      	ldr	r3, [sp, #32]
 8006a86:	9001      	str	r0, [sp, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 8177 	beq.w	8006d7c <_dtoa_r+0xa84>
 8006a8e:	4629      	mov	r1, r5
 8006a90:	2300      	movs	r3, #0
 8006a92:	220a      	movs	r2, #10
 8006a94:	4648      	mov	r0, r9
 8006a96:	f000 faef 	bl	8007078 <__multadd>
 8006a9a:	f1bb 0f00 	cmp.w	fp, #0
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	dc6e      	bgt.n	8006b80 <_dtoa_r+0x888>
 8006aa2:	9b07      	ldr	r3, [sp, #28]
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	dc48      	bgt.n	8006b3a <_dtoa_r+0x842>
 8006aa8:	e06a      	b.n	8006b80 <_dtoa_r+0x888>
 8006aaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006aac:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006ab0:	e739      	b.n	8006926 <_dtoa_r+0x62e>
 8006ab2:	f10a 34ff 	add.w	r4, sl, #4294967295
 8006ab6:	42a3      	cmp	r3, r4
 8006ab8:	db07      	blt.n	8006aca <_dtoa_r+0x7d2>
 8006aba:	f1ba 0f00 	cmp.w	sl, #0
 8006abe:	eba3 0404 	sub.w	r4, r3, r4
 8006ac2:	db0b      	blt.n	8006adc <_dtoa_r+0x7e4>
 8006ac4:	9e04      	ldr	r6, [sp, #16]
 8006ac6:	4652      	mov	r2, sl
 8006ac8:	e72f      	b.n	800692a <_dtoa_r+0x632>
 8006aca:	1ae2      	subs	r2, r4, r3
 8006acc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ace:	9e04      	ldr	r6, [sp, #16]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ad4:	4652      	mov	r2, sl
 8006ad6:	4623      	mov	r3, r4
 8006ad8:	2400      	movs	r4, #0
 8006ada:	e726      	b.n	800692a <_dtoa_r+0x632>
 8006adc:	9a04      	ldr	r2, [sp, #16]
 8006ade:	eba2 060a 	sub.w	r6, r2, sl
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	e721      	b.n	800692a <_dtoa_r+0x632>
 8006ae6:	9e04      	ldr	r6, [sp, #16]
 8006ae8:	9d08      	ldr	r5, [sp, #32]
 8006aea:	461c      	mov	r4, r3
 8006aec:	e72a      	b.n	8006944 <_dtoa_r+0x64c>
 8006aee:	9a01      	ldr	r2, [sp, #4]
 8006af0:	9205      	str	r2, [sp, #20]
 8006af2:	e752      	b.n	800699a <_dtoa_r+0x6a2>
 8006af4:	9901      	ldr	r1, [sp, #4]
 8006af6:	461a      	mov	r2, r3
 8006af8:	e751      	b.n	800699e <_dtoa_r+0x6a6>
 8006afa:	9b05      	ldr	r3, [sp, #20]
 8006afc:	9301      	str	r3, [sp, #4]
 8006afe:	e752      	b.n	80069a6 <_dtoa_r+0x6ae>
 8006b00:	2300      	movs	r3, #0
 8006b02:	e77b      	b.n	80069fc <_dtoa_r+0x704>
 8006b04:	9b02      	ldr	r3, [sp, #8]
 8006b06:	e779      	b.n	80069fc <_dtoa_r+0x704>
 8006b08:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006b0a:	e778      	b.n	80069fe <_dtoa_r+0x706>
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b10:	e779      	b.n	8006a06 <_dtoa_r+0x70e>
 8006b12:	d093      	beq.n	8006a3c <_dtoa_r+0x744>
 8006b14:	9b04      	ldr	r3, [sp, #16]
 8006b16:	321c      	adds	r2, #28
 8006b18:	4413      	add	r3, r2
 8006b1a:	9304      	str	r3, [sp, #16]
 8006b1c:	9b06      	ldr	r3, [sp, #24]
 8006b1e:	4416      	add	r6, r2
 8006b20:	4413      	add	r3, r2
 8006b22:	e78a      	b.n	8006a3a <_dtoa_r+0x742>
 8006b24:	4602      	mov	r2, r0
 8006b26:	e7f5      	b.n	8006b14 <_dtoa_r+0x81c>
 8006b28:	f1ba 0f00 	cmp.w	sl, #0
 8006b2c:	f8cd 8014 	str.w	r8, [sp, #20]
 8006b30:	46d3      	mov	fp, sl
 8006b32:	dc21      	bgt.n	8006b78 <_dtoa_r+0x880>
 8006b34:	9b07      	ldr	r3, [sp, #28]
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	dd1e      	ble.n	8006b78 <_dtoa_r+0x880>
 8006b3a:	f1bb 0f00 	cmp.w	fp, #0
 8006b3e:	f47f addc 	bne.w	80066fa <_dtoa_r+0x402>
 8006b42:	4621      	mov	r1, r4
 8006b44:	465b      	mov	r3, fp
 8006b46:	2205      	movs	r2, #5
 8006b48:	4648      	mov	r0, r9
 8006b4a:	f000 fa95 	bl	8007078 <__multadd>
 8006b4e:	4601      	mov	r1, r0
 8006b50:	4604      	mov	r4, r0
 8006b52:	9801      	ldr	r0, [sp, #4]
 8006b54:	f000 fcea 	bl	800752c <__mcmp>
 8006b58:	2800      	cmp	r0, #0
 8006b5a:	f77f adce 	ble.w	80066fa <_dtoa_r+0x402>
 8006b5e:	463e      	mov	r6, r7
 8006b60:	2331      	movs	r3, #49	@ 0x31
 8006b62:	f806 3b01 	strb.w	r3, [r6], #1
 8006b66:	9b05      	ldr	r3, [sp, #20]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	9305      	str	r3, [sp, #20]
 8006b6c:	e5c9      	b.n	8006702 <_dtoa_r+0x40a>
 8006b6e:	f8cd 8014 	str.w	r8, [sp, #20]
 8006b72:	4654      	mov	r4, sl
 8006b74:	4625      	mov	r5, r4
 8006b76:	e7f2      	b.n	8006b5e <_dtoa_r+0x866>
 8006b78:	9b08      	ldr	r3, [sp, #32]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f000 8102 	beq.w	8006d84 <_dtoa_r+0xa8c>
 8006b80:	2e00      	cmp	r6, #0
 8006b82:	dd05      	ble.n	8006b90 <_dtoa_r+0x898>
 8006b84:	4629      	mov	r1, r5
 8006b86:	4632      	mov	r2, r6
 8006b88:	4648      	mov	r0, r9
 8006b8a:	f000 fc63 	bl	8007454 <__lshift>
 8006b8e:	4605      	mov	r5, r0
 8006b90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d058      	beq.n	8006c48 <_dtoa_r+0x950>
 8006b96:	6869      	ldr	r1, [r5, #4]
 8006b98:	4648      	mov	r0, r9
 8006b9a:	f000 fa0b 	bl	8006fb4 <_Balloc>
 8006b9e:	4606      	mov	r6, r0
 8006ba0:	b928      	cbnz	r0, 8006bae <_dtoa_r+0x8b6>
 8006ba2:	4b82      	ldr	r3, [pc, #520]	@ (8006dac <_dtoa_r+0xab4>)
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006baa:	f7ff bbbe 	b.w	800632a <_dtoa_r+0x32>
 8006bae:	692a      	ldr	r2, [r5, #16]
 8006bb0:	3202      	adds	r2, #2
 8006bb2:	0092      	lsls	r2, r2, #2
 8006bb4:	f105 010c 	add.w	r1, r5, #12
 8006bb8:	300c      	adds	r0, #12
 8006bba:	f001 ff19 	bl	80089f0 <memcpy>
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	4631      	mov	r1, r6
 8006bc2:	4648      	mov	r0, r9
 8006bc4:	f000 fc46 	bl	8007454 <__lshift>
 8006bc8:	1c7b      	adds	r3, r7, #1
 8006bca:	9304      	str	r3, [sp, #16]
 8006bcc:	eb07 030b 	add.w	r3, r7, fp
 8006bd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bd2:	9b02      	ldr	r3, [sp, #8]
 8006bd4:	f003 0301 	and.w	r3, r3, #1
 8006bd8:	46a8      	mov	r8, r5
 8006bda:	9308      	str	r3, [sp, #32]
 8006bdc:	4605      	mov	r5, r0
 8006bde:	9b04      	ldr	r3, [sp, #16]
 8006be0:	9801      	ldr	r0, [sp, #4]
 8006be2:	4621      	mov	r1, r4
 8006be4:	f103 3bff 	add.w	fp, r3, #4294967295
 8006be8:	f7ff fafc 	bl	80061e4 <quorem>
 8006bec:	4641      	mov	r1, r8
 8006bee:	9002      	str	r0, [sp, #8]
 8006bf0:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8006bf4:	9801      	ldr	r0, [sp, #4]
 8006bf6:	f000 fc99 	bl	800752c <__mcmp>
 8006bfa:	462a      	mov	r2, r5
 8006bfc:	9006      	str	r0, [sp, #24]
 8006bfe:	4621      	mov	r1, r4
 8006c00:	4648      	mov	r0, r9
 8006c02:	f000 fcaf 	bl	8007564 <__mdiff>
 8006c06:	68c2      	ldr	r2, [r0, #12]
 8006c08:	4606      	mov	r6, r0
 8006c0a:	b9fa      	cbnz	r2, 8006c4c <_dtoa_r+0x954>
 8006c0c:	4601      	mov	r1, r0
 8006c0e:	9801      	ldr	r0, [sp, #4]
 8006c10:	f000 fc8c 	bl	800752c <__mcmp>
 8006c14:	4602      	mov	r2, r0
 8006c16:	4631      	mov	r1, r6
 8006c18:	4648      	mov	r0, r9
 8006c1a:	920a      	str	r2, [sp, #40]	@ 0x28
 8006c1c:	f000 fa0a 	bl	8007034 <_Bfree>
 8006c20:	9b07      	ldr	r3, [sp, #28]
 8006c22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006c24:	9e04      	ldr	r6, [sp, #16]
 8006c26:	ea42 0103 	orr.w	r1, r2, r3
 8006c2a:	9b08      	ldr	r3, [sp, #32]
 8006c2c:	4319      	orrs	r1, r3
 8006c2e:	d10f      	bne.n	8006c50 <_dtoa_r+0x958>
 8006c30:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006c34:	d028      	beq.n	8006c88 <_dtoa_r+0x990>
 8006c36:	9b06      	ldr	r3, [sp, #24]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	dd02      	ble.n	8006c42 <_dtoa_r+0x94a>
 8006c3c:	9b02      	ldr	r3, [sp, #8]
 8006c3e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8006c42:	f88b a000 	strb.w	sl, [fp]
 8006c46:	e55e      	b.n	8006706 <_dtoa_r+0x40e>
 8006c48:	4628      	mov	r0, r5
 8006c4a:	e7bd      	b.n	8006bc8 <_dtoa_r+0x8d0>
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	e7e2      	b.n	8006c16 <_dtoa_r+0x91e>
 8006c50:	9b06      	ldr	r3, [sp, #24]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	db04      	blt.n	8006c60 <_dtoa_r+0x968>
 8006c56:	9907      	ldr	r1, [sp, #28]
 8006c58:	430b      	orrs	r3, r1
 8006c5a:	9908      	ldr	r1, [sp, #32]
 8006c5c:	430b      	orrs	r3, r1
 8006c5e:	d120      	bne.n	8006ca2 <_dtoa_r+0x9aa>
 8006c60:	2a00      	cmp	r2, #0
 8006c62:	ddee      	ble.n	8006c42 <_dtoa_r+0x94a>
 8006c64:	9901      	ldr	r1, [sp, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	4648      	mov	r0, r9
 8006c6a:	f000 fbf3 	bl	8007454 <__lshift>
 8006c6e:	4621      	mov	r1, r4
 8006c70:	9001      	str	r0, [sp, #4]
 8006c72:	f000 fc5b 	bl	800752c <__mcmp>
 8006c76:	2800      	cmp	r0, #0
 8006c78:	dc03      	bgt.n	8006c82 <_dtoa_r+0x98a>
 8006c7a:	d1e2      	bne.n	8006c42 <_dtoa_r+0x94a>
 8006c7c:	f01a 0f01 	tst.w	sl, #1
 8006c80:	d0df      	beq.n	8006c42 <_dtoa_r+0x94a>
 8006c82:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006c86:	d1d9      	bne.n	8006c3c <_dtoa_r+0x944>
 8006c88:	2339      	movs	r3, #57	@ 0x39
 8006c8a:	f88b 3000 	strb.w	r3, [fp]
 8006c8e:	4633      	mov	r3, r6
 8006c90:	461e      	mov	r6, r3
 8006c92:	3b01      	subs	r3, #1
 8006c94:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006c98:	2a39      	cmp	r2, #57	@ 0x39
 8006c9a:	d052      	beq.n	8006d42 <_dtoa_r+0xa4a>
 8006c9c:	3201      	adds	r2, #1
 8006c9e:	701a      	strb	r2, [r3, #0]
 8006ca0:	e531      	b.n	8006706 <_dtoa_r+0x40e>
 8006ca2:	2a00      	cmp	r2, #0
 8006ca4:	dd07      	ble.n	8006cb6 <_dtoa_r+0x9be>
 8006ca6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006caa:	d0ed      	beq.n	8006c88 <_dtoa_r+0x990>
 8006cac:	f10a 0301 	add.w	r3, sl, #1
 8006cb0:	f88b 3000 	strb.w	r3, [fp]
 8006cb4:	e527      	b.n	8006706 <_dtoa_r+0x40e>
 8006cb6:	9b04      	ldr	r3, [sp, #16]
 8006cb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cba:	f803 ac01 	strb.w	sl, [r3, #-1]
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d029      	beq.n	8006d16 <_dtoa_r+0xa1e>
 8006cc2:	9901      	ldr	r1, [sp, #4]
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	220a      	movs	r2, #10
 8006cc8:	4648      	mov	r0, r9
 8006cca:	f000 f9d5 	bl	8007078 <__multadd>
 8006cce:	45a8      	cmp	r8, r5
 8006cd0:	9001      	str	r0, [sp, #4]
 8006cd2:	f04f 0300 	mov.w	r3, #0
 8006cd6:	f04f 020a 	mov.w	r2, #10
 8006cda:	4641      	mov	r1, r8
 8006cdc:	4648      	mov	r0, r9
 8006cde:	d107      	bne.n	8006cf0 <_dtoa_r+0x9f8>
 8006ce0:	f000 f9ca 	bl	8007078 <__multadd>
 8006ce4:	4680      	mov	r8, r0
 8006ce6:	4605      	mov	r5, r0
 8006ce8:	9b04      	ldr	r3, [sp, #16]
 8006cea:	3301      	adds	r3, #1
 8006cec:	9304      	str	r3, [sp, #16]
 8006cee:	e776      	b.n	8006bde <_dtoa_r+0x8e6>
 8006cf0:	f000 f9c2 	bl	8007078 <__multadd>
 8006cf4:	4629      	mov	r1, r5
 8006cf6:	4680      	mov	r8, r0
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	220a      	movs	r2, #10
 8006cfc:	4648      	mov	r0, r9
 8006cfe:	f000 f9bb 	bl	8007078 <__multadd>
 8006d02:	4605      	mov	r5, r0
 8006d04:	e7f0      	b.n	8006ce8 <_dtoa_r+0x9f0>
 8006d06:	f1bb 0f00 	cmp.w	fp, #0
 8006d0a:	bfcc      	ite	gt
 8006d0c:	465e      	movgt	r6, fp
 8006d0e:	2601      	movle	r6, #1
 8006d10:	443e      	add	r6, r7
 8006d12:	f04f 0800 	mov.w	r8, #0
 8006d16:	9901      	ldr	r1, [sp, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	4648      	mov	r0, r9
 8006d1c:	f000 fb9a 	bl	8007454 <__lshift>
 8006d20:	4621      	mov	r1, r4
 8006d22:	9001      	str	r0, [sp, #4]
 8006d24:	f000 fc02 	bl	800752c <__mcmp>
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	dcb0      	bgt.n	8006c8e <_dtoa_r+0x996>
 8006d2c:	d102      	bne.n	8006d34 <_dtoa_r+0xa3c>
 8006d2e:	f01a 0f01 	tst.w	sl, #1
 8006d32:	d1ac      	bne.n	8006c8e <_dtoa_r+0x996>
 8006d34:	4633      	mov	r3, r6
 8006d36:	461e      	mov	r6, r3
 8006d38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d3c:	2a30      	cmp	r2, #48	@ 0x30
 8006d3e:	d0fa      	beq.n	8006d36 <_dtoa_r+0xa3e>
 8006d40:	e4e1      	b.n	8006706 <_dtoa_r+0x40e>
 8006d42:	429f      	cmp	r7, r3
 8006d44:	d1a4      	bne.n	8006c90 <_dtoa_r+0x998>
 8006d46:	9b05      	ldr	r3, [sp, #20]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	9305      	str	r3, [sp, #20]
 8006d4c:	2331      	movs	r3, #49	@ 0x31
 8006d4e:	703b      	strb	r3, [r7, #0]
 8006d50:	e4d9      	b.n	8006706 <_dtoa_r+0x40e>
 8006d52:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006d54:	4f16      	ldr	r7, [pc, #88]	@ (8006db0 <_dtoa_r+0xab8>)
 8006d56:	b11b      	cbz	r3, 8006d60 <_dtoa_r+0xa68>
 8006d58:	f107 0308 	add.w	r3, r7, #8
 8006d5c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8006d5e:	6013      	str	r3, [r2, #0]
 8006d60:	4638      	mov	r0, r7
 8006d62:	b011      	add	sp, #68	@ 0x44
 8006d64:	ecbd 8b02 	vpop	{d8}
 8006d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d6c:	9b07      	ldr	r3, [sp, #28]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	f77f ae2c 	ble.w	80069cc <_dtoa_r+0x6d4>
 8006d74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d78:	2001      	movs	r0, #1
 8006d7a:	e64c      	b.n	8006a16 <_dtoa_r+0x71e>
 8006d7c:	f1bb 0f00 	cmp.w	fp, #0
 8006d80:	f77f aed8 	ble.w	8006b34 <_dtoa_r+0x83c>
 8006d84:	463e      	mov	r6, r7
 8006d86:	9801      	ldr	r0, [sp, #4]
 8006d88:	4621      	mov	r1, r4
 8006d8a:	f7ff fa2b 	bl	80061e4 <quorem>
 8006d8e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8006d92:	f806 ab01 	strb.w	sl, [r6], #1
 8006d96:	1bf2      	subs	r2, r6, r7
 8006d98:	4593      	cmp	fp, r2
 8006d9a:	ddb4      	ble.n	8006d06 <_dtoa_r+0xa0e>
 8006d9c:	9901      	ldr	r1, [sp, #4]
 8006d9e:	2300      	movs	r3, #0
 8006da0:	220a      	movs	r2, #10
 8006da2:	4648      	mov	r0, r9
 8006da4:	f000 f968 	bl	8007078 <__multadd>
 8006da8:	9001      	str	r0, [sp, #4]
 8006daa:	e7ec      	b.n	8006d86 <_dtoa_r+0xa8e>
 8006dac:	080098c5 	.word	0x080098c5
 8006db0:	08009849 	.word	0x08009849

08006db4 <_free_r>:
 8006db4:	b538      	push	{r3, r4, r5, lr}
 8006db6:	4605      	mov	r5, r0
 8006db8:	2900      	cmp	r1, #0
 8006dba:	d041      	beq.n	8006e40 <_free_r+0x8c>
 8006dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dc0:	1f0c      	subs	r4, r1, #4
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	bfb8      	it	lt
 8006dc6:	18e4      	addlt	r4, r4, r3
 8006dc8:	f000 f8e8 	bl	8006f9c <__malloc_lock>
 8006dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8006e44 <_free_r+0x90>)
 8006dce:	6813      	ldr	r3, [r2, #0]
 8006dd0:	b933      	cbnz	r3, 8006de0 <_free_r+0x2c>
 8006dd2:	6063      	str	r3, [r4, #4]
 8006dd4:	6014      	str	r4, [r2, #0]
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ddc:	f000 b8e4 	b.w	8006fa8 <__malloc_unlock>
 8006de0:	42a3      	cmp	r3, r4
 8006de2:	d908      	bls.n	8006df6 <_free_r+0x42>
 8006de4:	6820      	ldr	r0, [r4, #0]
 8006de6:	1821      	adds	r1, r4, r0
 8006de8:	428b      	cmp	r3, r1
 8006dea:	bf01      	itttt	eq
 8006dec:	6819      	ldreq	r1, [r3, #0]
 8006dee:	685b      	ldreq	r3, [r3, #4]
 8006df0:	1809      	addeq	r1, r1, r0
 8006df2:	6021      	streq	r1, [r4, #0]
 8006df4:	e7ed      	b.n	8006dd2 <_free_r+0x1e>
 8006df6:	461a      	mov	r2, r3
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	b10b      	cbz	r3, 8006e00 <_free_r+0x4c>
 8006dfc:	42a3      	cmp	r3, r4
 8006dfe:	d9fa      	bls.n	8006df6 <_free_r+0x42>
 8006e00:	6811      	ldr	r1, [r2, #0]
 8006e02:	1850      	adds	r0, r2, r1
 8006e04:	42a0      	cmp	r0, r4
 8006e06:	d10b      	bne.n	8006e20 <_free_r+0x6c>
 8006e08:	6820      	ldr	r0, [r4, #0]
 8006e0a:	4401      	add	r1, r0
 8006e0c:	1850      	adds	r0, r2, r1
 8006e0e:	4283      	cmp	r3, r0
 8006e10:	6011      	str	r1, [r2, #0]
 8006e12:	d1e0      	bne.n	8006dd6 <_free_r+0x22>
 8006e14:	6818      	ldr	r0, [r3, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	6053      	str	r3, [r2, #4]
 8006e1a:	4408      	add	r0, r1
 8006e1c:	6010      	str	r0, [r2, #0]
 8006e1e:	e7da      	b.n	8006dd6 <_free_r+0x22>
 8006e20:	d902      	bls.n	8006e28 <_free_r+0x74>
 8006e22:	230c      	movs	r3, #12
 8006e24:	602b      	str	r3, [r5, #0]
 8006e26:	e7d6      	b.n	8006dd6 <_free_r+0x22>
 8006e28:	6820      	ldr	r0, [r4, #0]
 8006e2a:	1821      	adds	r1, r4, r0
 8006e2c:	428b      	cmp	r3, r1
 8006e2e:	bf04      	itt	eq
 8006e30:	6819      	ldreq	r1, [r3, #0]
 8006e32:	685b      	ldreq	r3, [r3, #4]
 8006e34:	6063      	str	r3, [r4, #4]
 8006e36:	bf04      	itt	eq
 8006e38:	1809      	addeq	r1, r1, r0
 8006e3a:	6021      	streq	r1, [r4, #0]
 8006e3c:	6054      	str	r4, [r2, #4]
 8006e3e:	e7ca      	b.n	8006dd6 <_free_r+0x22>
 8006e40:	bd38      	pop	{r3, r4, r5, pc}
 8006e42:	bf00      	nop
 8006e44:	24000a08 	.word	0x24000a08

08006e48 <malloc>:
 8006e48:	4b02      	ldr	r3, [pc, #8]	@ (8006e54 <malloc+0xc>)
 8006e4a:	4601      	mov	r1, r0
 8006e4c:	6818      	ldr	r0, [r3, #0]
 8006e4e:	f000 b825 	b.w	8006e9c <_malloc_r>
 8006e52:	bf00      	nop
 8006e54:	24000234 	.word	0x24000234

08006e58 <sbrk_aligned>:
 8006e58:	b570      	push	{r4, r5, r6, lr}
 8006e5a:	4e0f      	ldr	r6, [pc, #60]	@ (8006e98 <sbrk_aligned+0x40>)
 8006e5c:	460c      	mov	r4, r1
 8006e5e:	6831      	ldr	r1, [r6, #0]
 8006e60:	4605      	mov	r5, r0
 8006e62:	b911      	cbnz	r1, 8006e6a <sbrk_aligned+0x12>
 8006e64:	f001 fdb4 	bl	80089d0 <_sbrk_r>
 8006e68:	6030      	str	r0, [r6, #0]
 8006e6a:	4621      	mov	r1, r4
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	f001 fdaf 	bl	80089d0 <_sbrk_r>
 8006e72:	1c43      	adds	r3, r0, #1
 8006e74:	d103      	bne.n	8006e7e <sbrk_aligned+0x26>
 8006e76:	f04f 34ff 	mov.w	r4, #4294967295
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	bd70      	pop	{r4, r5, r6, pc}
 8006e7e:	1cc4      	adds	r4, r0, #3
 8006e80:	f024 0403 	bic.w	r4, r4, #3
 8006e84:	42a0      	cmp	r0, r4
 8006e86:	d0f8      	beq.n	8006e7a <sbrk_aligned+0x22>
 8006e88:	1a21      	subs	r1, r4, r0
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	f001 fda0 	bl	80089d0 <_sbrk_r>
 8006e90:	3001      	adds	r0, #1
 8006e92:	d1f2      	bne.n	8006e7a <sbrk_aligned+0x22>
 8006e94:	e7ef      	b.n	8006e76 <sbrk_aligned+0x1e>
 8006e96:	bf00      	nop
 8006e98:	24000a04 	.word	0x24000a04

08006e9c <_malloc_r>:
 8006e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ea0:	1ccd      	adds	r5, r1, #3
 8006ea2:	f025 0503 	bic.w	r5, r5, #3
 8006ea6:	3508      	adds	r5, #8
 8006ea8:	2d0c      	cmp	r5, #12
 8006eaa:	bf38      	it	cc
 8006eac:	250c      	movcc	r5, #12
 8006eae:	2d00      	cmp	r5, #0
 8006eb0:	4606      	mov	r6, r0
 8006eb2:	db01      	blt.n	8006eb8 <_malloc_r+0x1c>
 8006eb4:	42a9      	cmp	r1, r5
 8006eb6:	d904      	bls.n	8006ec2 <_malloc_r+0x26>
 8006eb8:	230c      	movs	r3, #12
 8006eba:	6033      	str	r3, [r6, #0]
 8006ebc:	2000      	movs	r0, #0
 8006ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ec2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f98 <_malloc_r+0xfc>
 8006ec6:	f000 f869 	bl	8006f9c <__malloc_lock>
 8006eca:	f8d8 3000 	ldr.w	r3, [r8]
 8006ece:	461c      	mov	r4, r3
 8006ed0:	bb44      	cbnz	r4, 8006f24 <_malloc_r+0x88>
 8006ed2:	4629      	mov	r1, r5
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	f7ff ffbf 	bl	8006e58 <sbrk_aligned>
 8006eda:	1c43      	adds	r3, r0, #1
 8006edc:	4604      	mov	r4, r0
 8006ede:	d158      	bne.n	8006f92 <_malloc_r+0xf6>
 8006ee0:	f8d8 4000 	ldr.w	r4, [r8]
 8006ee4:	4627      	mov	r7, r4
 8006ee6:	2f00      	cmp	r7, #0
 8006ee8:	d143      	bne.n	8006f72 <_malloc_r+0xd6>
 8006eea:	2c00      	cmp	r4, #0
 8006eec:	d04b      	beq.n	8006f86 <_malloc_r+0xea>
 8006eee:	6823      	ldr	r3, [r4, #0]
 8006ef0:	4639      	mov	r1, r7
 8006ef2:	4630      	mov	r0, r6
 8006ef4:	eb04 0903 	add.w	r9, r4, r3
 8006ef8:	f001 fd6a 	bl	80089d0 <_sbrk_r>
 8006efc:	4581      	cmp	r9, r0
 8006efe:	d142      	bne.n	8006f86 <_malloc_r+0xea>
 8006f00:	6821      	ldr	r1, [r4, #0]
 8006f02:	1a6d      	subs	r5, r5, r1
 8006f04:	4629      	mov	r1, r5
 8006f06:	4630      	mov	r0, r6
 8006f08:	f7ff ffa6 	bl	8006e58 <sbrk_aligned>
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	d03a      	beq.n	8006f86 <_malloc_r+0xea>
 8006f10:	6823      	ldr	r3, [r4, #0]
 8006f12:	442b      	add	r3, r5
 8006f14:	6023      	str	r3, [r4, #0]
 8006f16:	f8d8 3000 	ldr.w	r3, [r8]
 8006f1a:	685a      	ldr	r2, [r3, #4]
 8006f1c:	bb62      	cbnz	r2, 8006f78 <_malloc_r+0xdc>
 8006f1e:	f8c8 7000 	str.w	r7, [r8]
 8006f22:	e00f      	b.n	8006f44 <_malloc_r+0xa8>
 8006f24:	6822      	ldr	r2, [r4, #0]
 8006f26:	1b52      	subs	r2, r2, r5
 8006f28:	d420      	bmi.n	8006f6c <_malloc_r+0xd0>
 8006f2a:	2a0b      	cmp	r2, #11
 8006f2c:	d917      	bls.n	8006f5e <_malloc_r+0xc2>
 8006f2e:	1961      	adds	r1, r4, r5
 8006f30:	42a3      	cmp	r3, r4
 8006f32:	6025      	str	r5, [r4, #0]
 8006f34:	bf18      	it	ne
 8006f36:	6059      	strne	r1, [r3, #4]
 8006f38:	6863      	ldr	r3, [r4, #4]
 8006f3a:	bf08      	it	eq
 8006f3c:	f8c8 1000 	streq.w	r1, [r8]
 8006f40:	5162      	str	r2, [r4, r5]
 8006f42:	604b      	str	r3, [r1, #4]
 8006f44:	4630      	mov	r0, r6
 8006f46:	f000 f82f 	bl	8006fa8 <__malloc_unlock>
 8006f4a:	f104 000b 	add.w	r0, r4, #11
 8006f4e:	1d23      	adds	r3, r4, #4
 8006f50:	f020 0007 	bic.w	r0, r0, #7
 8006f54:	1ac2      	subs	r2, r0, r3
 8006f56:	bf1c      	itt	ne
 8006f58:	1a1b      	subne	r3, r3, r0
 8006f5a:	50a3      	strne	r3, [r4, r2]
 8006f5c:	e7af      	b.n	8006ebe <_malloc_r+0x22>
 8006f5e:	6862      	ldr	r2, [r4, #4]
 8006f60:	42a3      	cmp	r3, r4
 8006f62:	bf0c      	ite	eq
 8006f64:	f8c8 2000 	streq.w	r2, [r8]
 8006f68:	605a      	strne	r2, [r3, #4]
 8006f6a:	e7eb      	b.n	8006f44 <_malloc_r+0xa8>
 8006f6c:	4623      	mov	r3, r4
 8006f6e:	6864      	ldr	r4, [r4, #4]
 8006f70:	e7ae      	b.n	8006ed0 <_malloc_r+0x34>
 8006f72:	463c      	mov	r4, r7
 8006f74:	687f      	ldr	r7, [r7, #4]
 8006f76:	e7b6      	b.n	8006ee6 <_malloc_r+0x4a>
 8006f78:	461a      	mov	r2, r3
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	42a3      	cmp	r3, r4
 8006f7e:	d1fb      	bne.n	8006f78 <_malloc_r+0xdc>
 8006f80:	2300      	movs	r3, #0
 8006f82:	6053      	str	r3, [r2, #4]
 8006f84:	e7de      	b.n	8006f44 <_malloc_r+0xa8>
 8006f86:	230c      	movs	r3, #12
 8006f88:	6033      	str	r3, [r6, #0]
 8006f8a:	4630      	mov	r0, r6
 8006f8c:	f000 f80c 	bl	8006fa8 <__malloc_unlock>
 8006f90:	e794      	b.n	8006ebc <_malloc_r+0x20>
 8006f92:	6005      	str	r5, [r0, #0]
 8006f94:	e7d6      	b.n	8006f44 <_malloc_r+0xa8>
 8006f96:	bf00      	nop
 8006f98:	24000a08 	.word	0x24000a08

08006f9c <__malloc_lock>:
 8006f9c:	4801      	ldr	r0, [pc, #4]	@ (8006fa4 <__malloc_lock+0x8>)
 8006f9e:	f7ff b918 	b.w	80061d2 <__retarget_lock_acquire_recursive>
 8006fa2:	bf00      	nop
 8006fa4:	24000a00 	.word	0x24000a00

08006fa8 <__malloc_unlock>:
 8006fa8:	4801      	ldr	r0, [pc, #4]	@ (8006fb0 <__malloc_unlock+0x8>)
 8006faa:	f7ff b913 	b.w	80061d4 <__retarget_lock_release_recursive>
 8006fae:	bf00      	nop
 8006fb0:	24000a00 	.word	0x24000a00

08006fb4 <_Balloc>:
 8006fb4:	b570      	push	{r4, r5, r6, lr}
 8006fb6:	69c6      	ldr	r6, [r0, #28]
 8006fb8:	4604      	mov	r4, r0
 8006fba:	460d      	mov	r5, r1
 8006fbc:	b976      	cbnz	r6, 8006fdc <_Balloc+0x28>
 8006fbe:	2010      	movs	r0, #16
 8006fc0:	f7ff ff42 	bl	8006e48 <malloc>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	61e0      	str	r0, [r4, #28]
 8006fc8:	b920      	cbnz	r0, 8006fd4 <_Balloc+0x20>
 8006fca:	4b18      	ldr	r3, [pc, #96]	@ (800702c <_Balloc+0x78>)
 8006fcc:	4818      	ldr	r0, [pc, #96]	@ (8007030 <_Balloc+0x7c>)
 8006fce:	216b      	movs	r1, #107	@ 0x6b
 8006fd0:	f001 fd26 	bl	8008a20 <__assert_func>
 8006fd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fd8:	6006      	str	r6, [r0, #0]
 8006fda:	60c6      	str	r6, [r0, #12]
 8006fdc:	69e6      	ldr	r6, [r4, #28]
 8006fde:	68f3      	ldr	r3, [r6, #12]
 8006fe0:	b183      	cbz	r3, 8007004 <_Balloc+0x50>
 8006fe2:	69e3      	ldr	r3, [r4, #28]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006fea:	b9b8      	cbnz	r0, 800701c <_Balloc+0x68>
 8006fec:	2101      	movs	r1, #1
 8006fee:	fa01 f605 	lsl.w	r6, r1, r5
 8006ff2:	1d72      	adds	r2, r6, #5
 8006ff4:	0092      	lsls	r2, r2, #2
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	f001 fd30 	bl	8008a5c <_calloc_r>
 8006ffc:	b160      	cbz	r0, 8007018 <_Balloc+0x64>
 8006ffe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007002:	e00e      	b.n	8007022 <_Balloc+0x6e>
 8007004:	2221      	movs	r2, #33	@ 0x21
 8007006:	2104      	movs	r1, #4
 8007008:	4620      	mov	r0, r4
 800700a:	f001 fd27 	bl	8008a5c <_calloc_r>
 800700e:	69e3      	ldr	r3, [r4, #28]
 8007010:	60f0      	str	r0, [r6, #12]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1e4      	bne.n	8006fe2 <_Balloc+0x2e>
 8007018:	2000      	movs	r0, #0
 800701a:	bd70      	pop	{r4, r5, r6, pc}
 800701c:	6802      	ldr	r2, [r0, #0]
 800701e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007022:	2300      	movs	r3, #0
 8007024:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007028:	e7f7      	b.n	800701a <_Balloc+0x66>
 800702a:	bf00      	nop
 800702c:	08009856 	.word	0x08009856
 8007030:	080098d6 	.word	0x080098d6

08007034 <_Bfree>:
 8007034:	b570      	push	{r4, r5, r6, lr}
 8007036:	69c6      	ldr	r6, [r0, #28]
 8007038:	4605      	mov	r5, r0
 800703a:	460c      	mov	r4, r1
 800703c:	b976      	cbnz	r6, 800705c <_Bfree+0x28>
 800703e:	2010      	movs	r0, #16
 8007040:	f7ff ff02 	bl	8006e48 <malloc>
 8007044:	4602      	mov	r2, r0
 8007046:	61e8      	str	r0, [r5, #28]
 8007048:	b920      	cbnz	r0, 8007054 <_Bfree+0x20>
 800704a:	4b09      	ldr	r3, [pc, #36]	@ (8007070 <_Bfree+0x3c>)
 800704c:	4809      	ldr	r0, [pc, #36]	@ (8007074 <_Bfree+0x40>)
 800704e:	218f      	movs	r1, #143	@ 0x8f
 8007050:	f001 fce6 	bl	8008a20 <__assert_func>
 8007054:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007058:	6006      	str	r6, [r0, #0]
 800705a:	60c6      	str	r6, [r0, #12]
 800705c:	b13c      	cbz	r4, 800706e <_Bfree+0x3a>
 800705e:	69eb      	ldr	r3, [r5, #28]
 8007060:	6862      	ldr	r2, [r4, #4]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007068:	6021      	str	r1, [r4, #0]
 800706a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800706e:	bd70      	pop	{r4, r5, r6, pc}
 8007070:	08009856 	.word	0x08009856
 8007074:	080098d6 	.word	0x080098d6

08007078 <__multadd>:
 8007078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800707c:	690d      	ldr	r5, [r1, #16]
 800707e:	4607      	mov	r7, r0
 8007080:	460c      	mov	r4, r1
 8007082:	461e      	mov	r6, r3
 8007084:	f101 0c14 	add.w	ip, r1, #20
 8007088:	2000      	movs	r0, #0
 800708a:	f8dc 3000 	ldr.w	r3, [ip]
 800708e:	b299      	uxth	r1, r3
 8007090:	fb02 6101 	mla	r1, r2, r1, r6
 8007094:	0c1e      	lsrs	r6, r3, #16
 8007096:	0c0b      	lsrs	r3, r1, #16
 8007098:	fb02 3306 	mla	r3, r2, r6, r3
 800709c:	b289      	uxth	r1, r1
 800709e:	3001      	adds	r0, #1
 80070a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80070a4:	4285      	cmp	r5, r0
 80070a6:	f84c 1b04 	str.w	r1, [ip], #4
 80070aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80070ae:	dcec      	bgt.n	800708a <__multadd+0x12>
 80070b0:	b30e      	cbz	r6, 80070f6 <__multadd+0x7e>
 80070b2:	68a3      	ldr	r3, [r4, #8]
 80070b4:	42ab      	cmp	r3, r5
 80070b6:	dc19      	bgt.n	80070ec <__multadd+0x74>
 80070b8:	6861      	ldr	r1, [r4, #4]
 80070ba:	4638      	mov	r0, r7
 80070bc:	3101      	adds	r1, #1
 80070be:	f7ff ff79 	bl	8006fb4 <_Balloc>
 80070c2:	4680      	mov	r8, r0
 80070c4:	b928      	cbnz	r0, 80070d2 <__multadd+0x5a>
 80070c6:	4602      	mov	r2, r0
 80070c8:	4b0c      	ldr	r3, [pc, #48]	@ (80070fc <__multadd+0x84>)
 80070ca:	480d      	ldr	r0, [pc, #52]	@ (8007100 <__multadd+0x88>)
 80070cc:	21ba      	movs	r1, #186	@ 0xba
 80070ce:	f001 fca7 	bl	8008a20 <__assert_func>
 80070d2:	6922      	ldr	r2, [r4, #16]
 80070d4:	3202      	adds	r2, #2
 80070d6:	f104 010c 	add.w	r1, r4, #12
 80070da:	0092      	lsls	r2, r2, #2
 80070dc:	300c      	adds	r0, #12
 80070de:	f001 fc87 	bl	80089f0 <memcpy>
 80070e2:	4621      	mov	r1, r4
 80070e4:	4638      	mov	r0, r7
 80070e6:	f7ff ffa5 	bl	8007034 <_Bfree>
 80070ea:	4644      	mov	r4, r8
 80070ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80070f0:	3501      	adds	r5, #1
 80070f2:	615e      	str	r6, [r3, #20]
 80070f4:	6125      	str	r5, [r4, #16]
 80070f6:	4620      	mov	r0, r4
 80070f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070fc:	080098c5 	.word	0x080098c5
 8007100:	080098d6 	.word	0x080098d6

08007104 <__s2b>:
 8007104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007108:	460c      	mov	r4, r1
 800710a:	4615      	mov	r5, r2
 800710c:	461f      	mov	r7, r3
 800710e:	2209      	movs	r2, #9
 8007110:	3308      	adds	r3, #8
 8007112:	4606      	mov	r6, r0
 8007114:	fb93 f3f2 	sdiv	r3, r3, r2
 8007118:	2100      	movs	r1, #0
 800711a:	2201      	movs	r2, #1
 800711c:	429a      	cmp	r2, r3
 800711e:	db09      	blt.n	8007134 <__s2b+0x30>
 8007120:	4630      	mov	r0, r6
 8007122:	f7ff ff47 	bl	8006fb4 <_Balloc>
 8007126:	b940      	cbnz	r0, 800713a <__s2b+0x36>
 8007128:	4602      	mov	r2, r0
 800712a:	4b19      	ldr	r3, [pc, #100]	@ (8007190 <__s2b+0x8c>)
 800712c:	4819      	ldr	r0, [pc, #100]	@ (8007194 <__s2b+0x90>)
 800712e:	21d3      	movs	r1, #211	@ 0xd3
 8007130:	f001 fc76 	bl	8008a20 <__assert_func>
 8007134:	0052      	lsls	r2, r2, #1
 8007136:	3101      	adds	r1, #1
 8007138:	e7f0      	b.n	800711c <__s2b+0x18>
 800713a:	9b08      	ldr	r3, [sp, #32]
 800713c:	6143      	str	r3, [r0, #20]
 800713e:	2d09      	cmp	r5, #9
 8007140:	f04f 0301 	mov.w	r3, #1
 8007144:	6103      	str	r3, [r0, #16]
 8007146:	dd16      	ble.n	8007176 <__s2b+0x72>
 8007148:	f104 0909 	add.w	r9, r4, #9
 800714c:	46c8      	mov	r8, r9
 800714e:	442c      	add	r4, r5
 8007150:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007154:	4601      	mov	r1, r0
 8007156:	3b30      	subs	r3, #48	@ 0x30
 8007158:	220a      	movs	r2, #10
 800715a:	4630      	mov	r0, r6
 800715c:	f7ff ff8c 	bl	8007078 <__multadd>
 8007160:	45a0      	cmp	r8, r4
 8007162:	d1f5      	bne.n	8007150 <__s2b+0x4c>
 8007164:	f1a5 0408 	sub.w	r4, r5, #8
 8007168:	444c      	add	r4, r9
 800716a:	1b2d      	subs	r5, r5, r4
 800716c:	1963      	adds	r3, r4, r5
 800716e:	42bb      	cmp	r3, r7
 8007170:	db04      	blt.n	800717c <__s2b+0x78>
 8007172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007176:	340a      	adds	r4, #10
 8007178:	2509      	movs	r5, #9
 800717a:	e7f6      	b.n	800716a <__s2b+0x66>
 800717c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007180:	4601      	mov	r1, r0
 8007182:	3b30      	subs	r3, #48	@ 0x30
 8007184:	220a      	movs	r2, #10
 8007186:	4630      	mov	r0, r6
 8007188:	f7ff ff76 	bl	8007078 <__multadd>
 800718c:	e7ee      	b.n	800716c <__s2b+0x68>
 800718e:	bf00      	nop
 8007190:	080098c5 	.word	0x080098c5
 8007194:	080098d6 	.word	0x080098d6

08007198 <__hi0bits>:
 8007198:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800719c:	4603      	mov	r3, r0
 800719e:	bf36      	itet	cc
 80071a0:	0403      	lslcc	r3, r0, #16
 80071a2:	2000      	movcs	r0, #0
 80071a4:	2010      	movcc	r0, #16
 80071a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071aa:	bf3c      	itt	cc
 80071ac:	021b      	lslcc	r3, r3, #8
 80071ae:	3008      	addcc	r0, #8
 80071b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071b4:	bf3c      	itt	cc
 80071b6:	011b      	lslcc	r3, r3, #4
 80071b8:	3004      	addcc	r0, #4
 80071ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071be:	bf3c      	itt	cc
 80071c0:	009b      	lslcc	r3, r3, #2
 80071c2:	3002      	addcc	r0, #2
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	db05      	blt.n	80071d4 <__hi0bits+0x3c>
 80071c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80071cc:	f100 0001 	add.w	r0, r0, #1
 80071d0:	bf08      	it	eq
 80071d2:	2020      	moveq	r0, #32
 80071d4:	4770      	bx	lr

080071d6 <__lo0bits>:
 80071d6:	6803      	ldr	r3, [r0, #0]
 80071d8:	4602      	mov	r2, r0
 80071da:	f013 0007 	ands.w	r0, r3, #7
 80071de:	d00b      	beq.n	80071f8 <__lo0bits+0x22>
 80071e0:	07d9      	lsls	r1, r3, #31
 80071e2:	d421      	bmi.n	8007228 <__lo0bits+0x52>
 80071e4:	0798      	lsls	r0, r3, #30
 80071e6:	bf49      	itett	mi
 80071e8:	085b      	lsrmi	r3, r3, #1
 80071ea:	089b      	lsrpl	r3, r3, #2
 80071ec:	2001      	movmi	r0, #1
 80071ee:	6013      	strmi	r3, [r2, #0]
 80071f0:	bf5c      	itt	pl
 80071f2:	6013      	strpl	r3, [r2, #0]
 80071f4:	2002      	movpl	r0, #2
 80071f6:	4770      	bx	lr
 80071f8:	b299      	uxth	r1, r3
 80071fa:	b909      	cbnz	r1, 8007200 <__lo0bits+0x2a>
 80071fc:	0c1b      	lsrs	r3, r3, #16
 80071fe:	2010      	movs	r0, #16
 8007200:	b2d9      	uxtb	r1, r3
 8007202:	b909      	cbnz	r1, 8007208 <__lo0bits+0x32>
 8007204:	3008      	adds	r0, #8
 8007206:	0a1b      	lsrs	r3, r3, #8
 8007208:	0719      	lsls	r1, r3, #28
 800720a:	bf04      	itt	eq
 800720c:	091b      	lsreq	r3, r3, #4
 800720e:	3004      	addeq	r0, #4
 8007210:	0799      	lsls	r1, r3, #30
 8007212:	bf04      	itt	eq
 8007214:	089b      	lsreq	r3, r3, #2
 8007216:	3002      	addeq	r0, #2
 8007218:	07d9      	lsls	r1, r3, #31
 800721a:	d403      	bmi.n	8007224 <__lo0bits+0x4e>
 800721c:	085b      	lsrs	r3, r3, #1
 800721e:	f100 0001 	add.w	r0, r0, #1
 8007222:	d003      	beq.n	800722c <__lo0bits+0x56>
 8007224:	6013      	str	r3, [r2, #0]
 8007226:	4770      	bx	lr
 8007228:	2000      	movs	r0, #0
 800722a:	4770      	bx	lr
 800722c:	2020      	movs	r0, #32
 800722e:	4770      	bx	lr

08007230 <__i2b>:
 8007230:	b510      	push	{r4, lr}
 8007232:	460c      	mov	r4, r1
 8007234:	2101      	movs	r1, #1
 8007236:	f7ff febd 	bl	8006fb4 <_Balloc>
 800723a:	4602      	mov	r2, r0
 800723c:	b928      	cbnz	r0, 800724a <__i2b+0x1a>
 800723e:	4b05      	ldr	r3, [pc, #20]	@ (8007254 <__i2b+0x24>)
 8007240:	4805      	ldr	r0, [pc, #20]	@ (8007258 <__i2b+0x28>)
 8007242:	f240 1145 	movw	r1, #325	@ 0x145
 8007246:	f001 fbeb 	bl	8008a20 <__assert_func>
 800724a:	2301      	movs	r3, #1
 800724c:	6144      	str	r4, [r0, #20]
 800724e:	6103      	str	r3, [r0, #16]
 8007250:	bd10      	pop	{r4, pc}
 8007252:	bf00      	nop
 8007254:	080098c5 	.word	0x080098c5
 8007258:	080098d6 	.word	0x080098d6

0800725c <__multiply>:
 800725c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007260:	4617      	mov	r7, r2
 8007262:	690a      	ldr	r2, [r1, #16]
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	429a      	cmp	r2, r3
 8007268:	bfa8      	it	ge
 800726a:	463b      	movge	r3, r7
 800726c:	4689      	mov	r9, r1
 800726e:	bfa4      	itt	ge
 8007270:	460f      	movge	r7, r1
 8007272:	4699      	movge	r9, r3
 8007274:	693d      	ldr	r5, [r7, #16]
 8007276:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	6879      	ldr	r1, [r7, #4]
 800727e:	eb05 060a 	add.w	r6, r5, sl
 8007282:	42b3      	cmp	r3, r6
 8007284:	b085      	sub	sp, #20
 8007286:	bfb8      	it	lt
 8007288:	3101      	addlt	r1, #1
 800728a:	f7ff fe93 	bl	8006fb4 <_Balloc>
 800728e:	b930      	cbnz	r0, 800729e <__multiply+0x42>
 8007290:	4602      	mov	r2, r0
 8007292:	4b41      	ldr	r3, [pc, #260]	@ (8007398 <__multiply+0x13c>)
 8007294:	4841      	ldr	r0, [pc, #260]	@ (800739c <__multiply+0x140>)
 8007296:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800729a:	f001 fbc1 	bl	8008a20 <__assert_func>
 800729e:	f100 0414 	add.w	r4, r0, #20
 80072a2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80072a6:	4623      	mov	r3, r4
 80072a8:	2200      	movs	r2, #0
 80072aa:	4573      	cmp	r3, lr
 80072ac:	d320      	bcc.n	80072f0 <__multiply+0x94>
 80072ae:	f107 0814 	add.w	r8, r7, #20
 80072b2:	f109 0114 	add.w	r1, r9, #20
 80072b6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80072ba:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80072be:	9302      	str	r3, [sp, #8]
 80072c0:	1beb      	subs	r3, r5, r7
 80072c2:	3b15      	subs	r3, #21
 80072c4:	f023 0303 	bic.w	r3, r3, #3
 80072c8:	3304      	adds	r3, #4
 80072ca:	3715      	adds	r7, #21
 80072cc:	42bd      	cmp	r5, r7
 80072ce:	bf38      	it	cc
 80072d0:	2304      	movcc	r3, #4
 80072d2:	9301      	str	r3, [sp, #4]
 80072d4:	9b02      	ldr	r3, [sp, #8]
 80072d6:	9103      	str	r1, [sp, #12]
 80072d8:	428b      	cmp	r3, r1
 80072da:	d80c      	bhi.n	80072f6 <__multiply+0x9a>
 80072dc:	2e00      	cmp	r6, #0
 80072de:	dd03      	ble.n	80072e8 <__multiply+0x8c>
 80072e0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d055      	beq.n	8007394 <__multiply+0x138>
 80072e8:	6106      	str	r6, [r0, #16]
 80072ea:	b005      	add	sp, #20
 80072ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f0:	f843 2b04 	str.w	r2, [r3], #4
 80072f4:	e7d9      	b.n	80072aa <__multiply+0x4e>
 80072f6:	f8b1 a000 	ldrh.w	sl, [r1]
 80072fa:	f1ba 0f00 	cmp.w	sl, #0
 80072fe:	d01f      	beq.n	8007340 <__multiply+0xe4>
 8007300:	46c4      	mov	ip, r8
 8007302:	46a1      	mov	r9, r4
 8007304:	2700      	movs	r7, #0
 8007306:	f85c 2b04 	ldr.w	r2, [ip], #4
 800730a:	f8d9 3000 	ldr.w	r3, [r9]
 800730e:	fa1f fb82 	uxth.w	fp, r2
 8007312:	b29b      	uxth	r3, r3
 8007314:	fb0a 330b 	mla	r3, sl, fp, r3
 8007318:	443b      	add	r3, r7
 800731a:	f8d9 7000 	ldr.w	r7, [r9]
 800731e:	0c12      	lsrs	r2, r2, #16
 8007320:	0c3f      	lsrs	r7, r7, #16
 8007322:	fb0a 7202 	mla	r2, sl, r2, r7
 8007326:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800732a:	b29b      	uxth	r3, r3
 800732c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007330:	4565      	cmp	r5, ip
 8007332:	f849 3b04 	str.w	r3, [r9], #4
 8007336:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800733a:	d8e4      	bhi.n	8007306 <__multiply+0xaa>
 800733c:	9b01      	ldr	r3, [sp, #4]
 800733e:	50e7      	str	r7, [r4, r3]
 8007340:	9b03      	ldr	r3, [sp, #12]
 8007342:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007346:	3104      	adds	r1, #4
 8007348:	f1b9 0f00 	cmp.w	r9, #0
 800734c:	d020      	beq.n	8007390 <__multiply+0x134>
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	4647      	mov	r7, r8
 8007352:	46a4      	mov	ip, r4
 8007354:	f04f 0a00 	mov.w	sl, #0
 8007358:	f8b7 b000 	ldrh.w	fp, [r7]
 800735c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007360:	fb09 220b 	mla	r2, r9, fp, r2
 8007364:	4452      	add	r2, sl
 8007366:	b29b      	uxth	r3, r3
 8007368:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800736c:	f84c 3b04 	str.w	r3, [ip], #4
 8007370:	f857 3b04 	ldr.w	r3, [r7], #4
 8007374:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007378:	f8bc 3000 	ldrh.w	r3, [ip]
 800737c:	fb09 330a 	mla	r3, r9, sl, r3
 8007380:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007384:	42bd      	cmp	r5, r7
 8007386:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800738a:	d8e5      	bhi.n	8007358 <__multiply+0xfc>
 800738c:	9a01      	ldr	r2, [sp, #4]
 800738e:	50a3      	str	r3, [r4, r2]
 8007390:	3404      	adds	r4, #4
 8007392:	e79f      	b.n	80072d4 <__multiply+0x78>
 8007394:	3e01      	subs	r6, #1
 8007396:	e7a1      	b.n	80072dc <__multiply+0x80>
 8007398:	080098c5 	.word	0x080098c5
 800739c:	080098d6 	.word	0x080098d6

080073a0 <__pow5mult>:
 80073a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073a4:	4615      	mov	r5, r2
 80073a6:	f012 0203 	ands.w	r2, r2, #3
 80073aa:	4607      	mov	r7, r0
 80073ac:	460e      	mov	r6, r1
 80073ae:	d007      	beq.n	80073c0 <__pow5mult+0x20>
 80073b0:	4c25      	ldr	r4, [pc, #148]	@ (8007448 <__pow5mult+0xa8>)
 80073b2:	3a01      	subs	r2, #1
 80073b4:	2300      	movs	r3, #0
 80073b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80073ba:	f7ff fe5d 	bl	8007078 <__multadd>
 80073be:	4606      	mov	r6, r0
 80073c0:	10ad      	asrs	r5, r5, #2
 80073c2:	d03d      	beq.n	8007440 <__pow5mult+0xa0>
 80073c4:	69fc      	ldr	r4, [r7, #28]
 80073c6:	b97c      	cbnz	r4, 80073e8 <__pow5mult+0x48>
 80073c8:	2010      	movs	r0, #16
 80073ca:	f7ff fd3d 	bl	8006e48 <malloc>
 80073ce:	4602      	mov	r2, r0
 80073d0:	61f8      	str	r0, [r7, #28]
 80073d2:	b928      	cbnz	r0, 80073e0 <__pow5mult+0x40>
 80073d4:	4b1d      	ldr	r3, [pc, #116]	@ (800744c <__pow5mult+0xac>)
 80073d6:	481e      	ldr	r0, [pc, #120]	@ (8007450 <__pow5mult+0xb0>)
 80073d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80073dc:	f001 fb20 	bl	8008a20 <__assert_func>
 80073e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80073e4:	6004      	str	r4, [r0, #0]
 80073e6:	60c4      	str	r4, [r0, #12]
 80073e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80073ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80073f0:	b94c      	cbnz	r4, 8007406 <__pow5mult+0x66>
 80073f2:	f240 2171 	movw	r1, #625	@ 0x271
 80073f6:	4638      	mov	r0, r7
 80073f8:	f7ff ff1a 	bl	8007230 <__i2b>
 80073fc:	2300      	movs	r3, #0
 80073fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8007402:	4604      	mov	r4, r0
 8007404:	6003      	str	r3, [r0, #0]
 8007406:	f04f 0900 	mov.w	r9, #0
 800740a:	07eb      	lsls	r3, r5, #31
 800740c:	d50a      	bpl.n	8007424 <__pow5mult+0x84>
 800740e:	4631      	mov	r1, r6
 8007410:	4622      	mov	r2, r4
 8007412:	4638      	mov	r0, r7
 8007414:	f7ff ff22 	bl	800725c <__multiply>
 8007418:	4631      	mov	r1, r6
 800741a:	4680      	mov	r8, r0
 800741c:	4638      	mov	r0, r7
 800741e:	f7ff fe09 	bl	8007034 <_Bfree>
 8007422:	4646      	mov	r6, r8
 8007424:	106d      	asrs	r5, r5, #1
 8007426:	d00b      	beq.n	8007440 <__pow5mult+0xa0>
 8007428:	6820      	ldr	r0, [r4, #0]
 800742a:	b938      	cbnz	r0, 800743c <__pow5mult+0x9c>
 800742c:	4622      	mov	r2, r4
 800742e:	4621      	mov	r1, r4
 8007430:	4638      	mov	r0, r7
 8007432:	f7ff ff13 	bl	800725c <__multiply>
 8007436:	6020      	str	r0, [r4, #0]
 8007438:	f8c0 9000 	str.w	r9, [r0]
 800743c:	4604      	mov	r4, r0
 800743e:	e7e4      	b.n	800740a <__pow5mult+0x6a>
 8007440:	4630      	mov	r0, r6
 8007442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007446:	bf00      	nop
 8007448:	080099e8 	.word	0x080099e8
 800744c:	08009856 	.word	0x08009856
 8007450:	080098d6 	.word	0x080098d6

08007454 <__lshift>:
 8007454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007458:	460c      	mov	r4, r1
 800745a:	6849      	ldr	r1, [r1, #4]
 800745c:	6923      	ldr	r3, [r4, #16]
 800745e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007462:	68a3      	ldr	r3, [r4, #8]
 8007464:	4607      	mov	r7, r0
 8007466:	4691      	mov	r9, r2
 8007468:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800746c:	f108 0601 	add.w	r6, r8, #1
 8007470:	42b3      	cmp	r3, r6
 8007472:	db0b      	blt.n	800748c <__lshift+0x38>
 8007474:	4638      	mov	r0, r7
 8007476:	f7ff fd9d 	bl	8006fb4 <_Balloc>
 800747a:	4605      	mov	r5, r0
 800747c:	b948      	cbnz	r0, 8007492 <__lshift+0x3e>
 800747e:	4602      	mov	r2, r0
 8007480:	4b28      	ldr	r3, [pc, #160]	@ (8007524 <__lshift+0xd0>)
 8007482:	4829      	ldr	r0, [pc, #164]	@ (8007528 <__lshift+0xd4>)
 8007484:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007488:	f001 faca 	bl	8008a20 <__assert_func>
 800748c:	3101      	adds	r1, #1
 800748e:	005b      	lsls	r3, r3, #1
 8007490:	e7ee      	b.n	8007470 <__lshift+0x1c>
 8007492:	2300      	movs	r3, #0
 8007494:	f100 0114 	add.w	r1, r0, #20
 8007498:	f100 0210 	add.w	r2, r0, #16
 800749c:	4618      	mov	r0, r3
 800749e:	4553      	cmp	r3, sl
 80074a0:	db33      	blt.n	800750a <__lshift+0xb6>
 80074a2:	6920      	ldr	r0, [r4, #16]
 80074a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074a8:	f104 0314 	add.w	r3, r4, #20
 80074ac:	f019 091f 	ands.w	r9, r9, #31
 80074b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80074b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80074b8:	d02b      	beq.n	8007512 <__lshift+0xbe>
 80074ba:	f1c9 0e20 	rsb	lr, r9, #32
 80074be:	468a      	mov	sl, r1
 80074c0:	2200      	movs	r2, #0
 80074c2:	6818      	ldr	r0, [r3, #0]
 80074c4:	fa00 f009 	lsl.w	r0, r0, r9
 80074c8:	4310      	orrs	r0, r2
 80074ca:	f84a 0b04 	str.w	r0, [sl], #4
 80074ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80074d2:	459c      	cmp	ip, r3
 80074d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80074d8:	d8f3      	bhi.n	80074c2 <__lshift+0x6e>
 80074da:	ebac 0304 	sub.w	r3, ip, r4
 80074de:	3b15      	subs	r3, #21
 80074e0:	f023 0303 	bic.w	r3, r3, #3
 80074e4:	3304      	adds	r3, #4
 80074e6:	f104 0015 	add.w	r0, r4, #21
 80074ea:	4560      	cmp	r0, ip
 80074ec:	bf88      	it	hi
 80074ee:	2304      	movhi	r3, #4
 80074f0:	50ca      	str	r2, [r1, r3]
 80074f2:	b10a      	cbz	r2, 80074f8 <__lshift+0xa4>
 80074f4:	f108 0602 	add.w	r6, r8, #2
 80074f8:	3e01      	subs	r6, #1
 80074fa:	4638      	mov	r0, r7
 80074fc:	612e      	str	r6, [r5, #16]
 80074fe:	4621      	mov	r1, r4
 8007500:	f7ff fd98 	bl	8007034 <_Bfree>
 8007504:	4628      	mov	r0, r5
 8007506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800750a:	f842 0f04 	str.w	r0, [r2, #4]!
 800750e:	3301      	adds	r3, #1
 8007510:	e7c5      	b.n	800749e <__lshift+0x4a>
 8007512:	3904      	subs	r1, #4
 8007514:	f853 2b04 	ldr.w	r2, [r3], #4
 8007518:	f841 2f04 	str.w	r2, [r1, #4]!
 800751c:	459c      	cmp	ip, r3
 800751e:	d8f9      	bhi.n	8007514 <__lshift+0xc0>
 8007520:	e7ea      	b.n	80074f8 <__lshift+0xa4>
 8007522:	bf00      	nop
 8007524:	080098c5 	.word	0x080098c5
 8007528:	080098d6 	.word	0x080098d6

0800752c <__mcmp>:
 800752c:	690a      	ldr	r2, [r1, #16]
 800752e:	4603      	mov	r3, r0
 8007530:	6900      	ldr	r0, [r0, #16]
 8007532:	1a80      	subs	r0, r0, r2
 8007534:	b530      	push	{r4, r5, lr}
 8007536:	d10e      	bne.n	8007556 <__mcmp+0x2a>
 8007538:	3314      	adds	r3, #20
 800753a:	3114      	adds	r1, #20
 800753c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007540:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007544:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007548:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800754c:	4295      	cmp	r5, r2
 800754e:	d003      	beq.n	8007558 <__mcmp+0x2c>
 8007550:	d205      	bcs.n	800755e <__mcmp+0x32>
 8007552:	f04f 30ff 	mov.w	r0, #4294967295
 8007556:	bd30      	pop	{r4, r5, pc}
 8007558:	42a3      	cmp	r3, r4
 800755a:	d3f3      	bcc.n	8007544 <__mcmp+0x18>
 800755c:	e7fb      	b.n	8007556 <__mcmp+0x2a>
 800755e:	2001      	movs	r0, #1
 8007560:	e7f9      	b.n	8007556 <__mcmp+0x2a>
	...

08007564 <__mdiff>:
 8007564:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007568:	4689      	mov	r9, r1
 800756a:	4606      	mov	r6, r0
 800756c:	4611      	mov	r1, r2
 800756e:	4648      	mov	r0, r9
 8007570:	4614      	mov	r4, r2
 8007572:	f7ff ffdb 	bl	800752c <__mcmp>
 8007576:	1e05      	subs	r5, r0, #0
 8007578:	d112      	bne.n	80075a0 <__mdiff+0x3c>
 800757a:	4629      	mov	r1, r5
 800757c:	4630      	mov	r0, r6
 800757e:	f7ff fd19 	bl	8006fb4 <_Balloc>
 8007582:	4602      	mov	r2, r0
 8007584:	b928      	cbnz	r0, 8007592 <__mdiff+0x2e>
 8007586:	4b3f      	ldr	r3, [pc, #252]	@ (8007684 <__mdiff+0x120>)
 8007588:	f240 2137 	movw	r1, #567	@ 0x237
 800758c:	483e      	ldr	r0, [pc, #248]	@ (8007688 <__mdiff+0x124>)
 800758e:	f001 fa47 	bl	8008a20 <__assert_func>
 8007592:	2301      	movs	r3, #1
 8007594:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007598:	4610      	mov	r0, r2
 800759a:	b003      	add	sp, #12
 800759c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a0:	bfbc      	itt	lt
 80075a2:	464b      	movlt	r3, r9
 80075a4:	46a1      	movlt	r9, r4
 80075a6:	4630      	mov	r0, r6
 80075a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80075ac:	bfba      	itte	lt
 80075ae:	461c      	movlt	r4, r3
 80075b0:	2501      	movlt	r5, #1
 80075b2:	2500      	movge	r5, #0
 80075b4:	f7ff fcfe 	bl	8006fb4 <_Balloc>
 80075b8:	4602      	mov	r2, r0
 80075ba:	b918      	cbnz	r0, 80075c4 <__mdiff+0x60>
 80075bc:	4b31      	ldr	r3, [pc, #196]	@ (8007684 <__mdiff+0x120>)
 80075be:	f240 2145 	movw	r1, #581	@ 0x245
 80075c2:	e7e3      	b.n	800758c <__mdiff+0x28>
 80075c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80075c8:	6926      	ldr	r6, [r4, #16]
 80075ca:	60c5      	str	r5, [r0, #12]
 80075cc:	f109 0310 	add.w	r3, r9, #16
 80075d0:	f109 0514 	add.w	r5, r9, #20
 80075d4:	f104 0e14 	add.w	lr, r4, #20
 80075d8:	f100 0b14 	add.w	fp, r0, #20
 80075dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80075e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80075e4:	9301      	str	r3, [sp, #4]
 80075e6:	46d9      	mov	r9, fp
 80075e8:	f04f 0c00 	mov.w	ip, #0
 80075ec:	9b01      	ldr	r3, [sp, #4]
 80075ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 80075f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80075f6:	9301      	str	r3, [sp, #4]
 80075f8:	fa1f f38a 	uxth.w	r3, sl
 80075fc:	4619      	mov	r1, r3
 80075fe:	b283      	uxth	r3, r0
 8007600:	1acb      	subs	r3, r1, r3
 8007602:	0c00      	lsrs	r0, r0, #16
 8007604:	4463      	add	r3, ip
 8007606:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800760a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800760e:	b29b      	uxth	r3, r3
 8007610:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007614:	4576      	cmp	r6, lr
 8007616:	f849 3b04 	str.w	r3, [r9], #4
 800761a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800761e:	d8e5      	bhi.n	80075ec <__mdiff+0x88>
 8007620:	1b33      	subs	r3, r6, r4
 8007622:	3b15      	subs	r3, #21
 8007624:	f023 0303 	bic.w	r3, r3, #3
 8007628:	3415      	adds	r4, #21
 800762a:	3304      	adds	r3, #4
 800762c:	42a6      	cmp	r6, r4
 800762e:	bf38      	it	cc
 8007630:	2304      	movcc	r3, #4
 8007632:	441d      	add	r5, r3
 8007634:	445b      	add	r3, fp
 8007636:	461e      	mov	r6, r3
 8007638:	462c      	mov	r4, r5
 800763a:	4544      	cmp	r4, r8
 800763c:	d30e      	bcc.n	800765c <__mdiff+0xf8>
 800763e:	f108 0103 	add.w	r1, r8, #3
 8007642:	1b49      	subs	r1, r1, r5
 8007644:	f021 0103 	bic.w	r1, r1, #3
 8007648:	3d03      	subs	r5, #3
 800764a:	45a8      	cmp	r8, r5
 800764c:	bf38      	it	cc
 800764e:	2100      	movcc	r1, #0
 8007650:	440b      	add	r3, r1
 8007652:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007656:	b191      	cbz	r1, 800767e <__mdiff+0x11a>
 8007658:	6117      	str	r7, [r2, #16]
 800765a:	e79d      	b.n	8007598 <__mdiff+0x34>
 800765c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007660:	46e6      	mov	lr, ip
 8007662:	0c08      	lsrs	r0, r1, #16
 8007664:	fa1c fc81 	uxtah	ip, ip, r1
 8007668:	4471      	add	r1, lr
 800766a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800766e:	b289      	uxth	r1, r1
 8007670:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007674:	f846 1b04 	str.w	r1, [r6], #4
 8007678:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800767c:	e7dd      	b.n	800763a <__mdiff+0xd6>
 800767e:	3f01      	subs	r7, #1
 8007680:	e7e7      	b.n	8007652 <__mdiff+0xee>
 8007682:	bf00      	nop
 8007684:	080098c5 	.word	0x080098c5
 8007688:	080098d6 	.word	0x080098d6

0800768c <__ulp>:
 800768c:	b082      	sub	sp, #8
 800768e:	ed8d 0b00 	vstr	d0, [sp]
 8007692:	9a01      	ldr	r2, [sp, #4]
 8007694:	4b0f      	ldr	r3, [pc, #60]	@ (80076d4 <__ulp+0x48>)
 8007696:	4013      	ands	r3, r2
 8007698:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800769c:	2b00      	cmp	r3, #0
 800769e:	dc08      	bgt.n	80076b2 <__ulp+0x26>
 80076a0:	425b      	negs	r3, r3
 80076a2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80076a6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80076aa:	da04      	bge.n	80076b6 <__ulp+0x2a>
 80076ac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80076b0:	4113      	asrs	r3, r2
 80076b2:	2200      	movs	r2, #0
 80076b4:	e008      	b.n	80076c8 <__ulp+0x3c>
 80076b6:	f1a2 0314 	sub.w	r3, r2, #20
 80076ba:	2b1e      	cmp	r3, #30
 80076bc:	bfda      	itte	le
 80076be:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80076c2:	40da      	lsrle	r2, r3
 80076c4:	2201      	movgt	r2, #1
 80076c6:	2300      	movs	r3, #0
 80076c8:	4619      	mov	r1, r3
 80076ca:	4610      	mov	r0, r2
 80076cc:	ec41 0b10 	vmov	d0, r0, r1
 80076d0:	b002      	add	sp, #8
 80076d2:	4770      	bx	lr
 80076d4:	7ff00000 	.word	0x7ff00000

080076d8 <__b2d>:
 80076d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076dc:	6906      	ldr	r6, [r0, #16]
 80076de:	f100 0814 	add.w	r8, r0, #20
 80076e2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80076e6:	1f37      	subs	r7, r6, #4
 80076e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80076ec:	4610      	mov	r0, r2
 80076ee:	f7ff fd53 	bl	8007198 <__hi0bits>
 80076f2:	f1c0 0320 	rsb	r3, r0, #32
 80076f6:	280a      	cmp	r0, #10
 80076f8:	600b      	str	r3, [r1, #0]
 80076fa:	491b      	ldr	r1, [pc, #108]	@ (8007768 <__b2d+0x90>)
 80076fc:	dc15      	bgt.n	800772a <__b2d+0x52>
 80076fe:	f1c0 0c0b 	rsb	ip, r0, #11
 8007702:	fa22 f30c 	lsr.w	r3, r2, ip
 8007706:	45b8      	cmp	r8, r7
 8007708:	ea43 0501 	orr.w	r5, r3, r1
 800770c:	bf34      	ite	cc
 800770e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007712:	2300      	movcs	r3, #0
 8007714:	3015      	adds	r0, #21
 8007716:	fa02 f000 	lsl.w	r0, r2, r0
 800771a:	fa23 f30c 	lsr.w	r3, r3, ip
 800771e:	4303      	orrs	r3, r0
 8007720:	461c      	mov	r4, r3
 8007722:	ec45 4b10 	vmov	d0, r4, r5
 8007726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800772a:	45b8      	cmp	r8, r7
 800772c:	bf3a      	itte	cc
 800772e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007732:	f1a6 0708 	subcc.w	r7, r6, #8
 8007736:	2300      	movcs	r3, #0
 8007738:	380b      	subs	r0, #11
 800773a:	d012      	beq.n	8007762 <__b2d+0x8a>
 800773c:	f1c0 0120 	rsb	r1, r0, #32
 8007740:	fa23 f401 	lsr.w	r4, r3, r1
 8007744:	4082      	lsls	r2, r0
 8007746:	4322      	orrs	r2, r4
 8007748:	4547      	cmp	r7, r8
 800774a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800774e:	bf8c      	ite	hi
 8007750:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007754:	2200      	movls	r2, #0
 8007756:	4083      	lsls	r3, r0
 8007758:	40ca      	lsrs	r2, r1
 800775a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800775e:	4313      	orrs	r3, r2
 8007760:	e7de      	b.n	8007720 <__b2d+0x48>
 8007762:	ea42 0501 	orr.w	r5, r2, r1
 8007766:	e7db      	b.n	8007720 <__b2d+0x48>
 8007768:	3ff00000 	.word	0x3ff00000

0800776c <__d2b>:
 800776c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007770:	460f      	mov	r7, r1
 8007772:	2101      	movs	r1, #1
 8007774:	ec59 8b10 	vmov	r8, r9, d0
 8007778:	4616      	mov	r6, r2
 800777a:	f7ff fc1b 	bl	8006fb4 <_Balloc>
 800777e:	4604      	mov	r4, r0
 8007780:	b930      	cbnz	r0, 8007790 <__d2b+0x24>
 8007782:	4602      	mov	r2, r0
 8007784:	4b23      	ldr	r3, [pc, #140]	@ (8007814 <__d2b+0xa8>)
 8007786:	4824      	ldr	r0, [pc, #144]	@ (8007818 <__d2b+0xac>)
 8007788:	f240 310f 	movw	r1, #783	@ 0x30f
 800778c:	f001 f948 	bl	8008a20 <__assert_func>
 8007790:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007794:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007798:	b10d      	cbz	r5, 800779e <__d2b+0x32>
 800779a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800779e:	9301      	str	r3, [sp, #4]
 80077a0:	f1b8 0300 	subs.w	r3, r8, #0
 80077a4:	d023      	beq.n	80077ee <__d2b+0x82>
 80077a6:	4668      	mov	r0, sp
 80077a8:	9300      	str	r3, [sp, #0]
 80077aa:	f7ff fd14 	bl	80071d6 <__lo0bits>
 80077ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80077b2:	b1d0      	cbz	r0, 80077ea <__d2b+0x7e>
 80077b4:	f1c0 0320 	rsb	r3, r0, #32
 80077b8:	fa02 f303 	lsl.w	r3, r2, r3
 80077bc:	430b      	orrs	r3, r1
 80077be:	40c2      	lsrs	r2, r0
 80077c0:	6163      	str	r3, [r4, #20]
 80077c2:	9201      	str	r2, [sp, #4]
 80077c4:	9b01      	ldr	r3, [sp, #4]
 80077c6:	61a3      	str	r3, [r4, #24]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	bf0c      	ite	eq
 80077cc:	2201      	moveq	r2, #1
 80077ce:	2202      	movne	r2, #2
 80077d0:	6122      	str	r2, [r4, #16]
 80077d2:	b1a5      	cbz	r5, 80077fe <__d2b+0x92>
 80077d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80077d8:	4405      	add	r5, r0
 80077da:	603d      	str	r5, [r7, #0]
 80077dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80077e0:	6030      	str	r0, [r6, #0]
 80077e2:	4620      	mov	r0, r4
 80077e4:	b003      	add	sp, #12
 80077e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077ea:	6161      	str	r1, [r4, #20]
 80077ec:	e7ea      	b.n	80077c4 <__d2b+0x58>
 80077ee:	a801      	add	r0, sp, #4
 80077f0:	f7ff fcf1 	bl	80071d6 <__lo0bits>
 80077f4:	9b01      	ldr	r3, [sp, #4]
 80077f6:	6163      	str	r3, [r4, #20]
 80077f8:	3020      	adds	r0, #32
 80077fa:	2201      	movs	r2, #1
 80077fc:	e7e8      	b.n	80077d0 <__d2b+0x64>
 80077fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007802:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007806:	6038      	str	r0, [r7, #0]
 8007808:	6918      	ldr	r0, [r3, #16]
 800780a:	f7ff fcc5 	bl	8007198 <__hi0bits>
 800780e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007812:	e7e5      	b.n	80077e0 <__d2b+0x74>
 8007814:	080098c5 	.word	0x080098c5
 8007818:	080098d6 	.word	0x080098d6

0800781c <__ratio>:
 800781c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007820:	4688      	mov	r8, r1
 8007822:	4669      	mov	r1, sp
 8007824:	4681      	mov	r9, r0
 8007826:	f7ff ff57 	bl	80076d8 <__b2d>
 800782a:	a901      	add	r1, sp, #4
 800782c:	4640      	mov	r0, r8
 800782e:	ec55 4b10 	vmov	r4, r5, d0
 8007832:	f7ff ff51 	bl	80076d8 <__b2d>
 8007836:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800783a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800783e:	1ad2      	subs	r2, r2, r3
 8007840:	e9dd 3100 	ldrd	r3, r1, [sp]
 8007844:	1a5b      	subs	r3, r3, r1
 8007846:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800784a:	ec57 6b10 	vmov	r6, r7, d0
 800784e:	2b00      	cmp	r3, #0
 8007850:	bfd6      	itet	le
 8007852:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007856:	462a      	movgt	r2, r5
 8007858:	463a      	movle	r2, r7
 800785a:	46ab      	mov	fp, r5
 800785c:	46a2      	mov	sl, r4
 800785e:	bfce      	itee	gt
 8007860:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007864:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8007868:	ee00 3a90 	vmovle	s1, r3
 800786c:	ec4b ab17 	vmov	d7, sl, fp
 8007870:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8007874:	b003      	add	sp, #12
 8007876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800787a <__copybits>:
 800787a:	3901      	subs	r1, #1
 800787c:	b570      	push	{r4, r5, r6, lr}
 800787e:	1149      	asrs	r1, r1, #5
 8007880:	6914      	ldr	r4, [r2, #16]
 8007882:	3101      	adds	r1, #1
 8007884:	f102 0314 	add.w	r3, r2, #20
 8007888:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800788c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007890:	1f05      	subs	r5, r0, #4
 8007892:	42a3      	cmp	r3, r4
 8007894:	d30c      	bcc.n	80078b0 <__copybits+0x36>
 8007896:	1aa3      	subs	r3, r4, r2
 8007898:	3b11      	subs	r3, #17
 800789a:	f023 0303 	bic.w	r3, r3, #3
 800789e:	3211      	adds	r2, #17
 80078a0:	42a2      	cmp	r2, r4
 80078a2:	bf88      	it	hi
 80078a4:	2300      	movhi	r3, #0
 80078a6:	4418      	add	r0, r3
 80078a8:	2300      	movs	r3, #0
 80078aa:	4288      	cmp	r0, r1
 80078ac:	d305      	bcc.n	80078ba <__copybits+0x40>
 80078ae:	bd70      	pop	{r4, r5, r6, pc}
 80078b0:	f853 6b04 	ldr.w	r6, [r3], #4
 80078b4:	f845 6f04 	str.w	r6, [r5, #4]!
 80078b8:	e7eb      	b.n	8007892 <__copybits+0x18>
 80078ba:	f840 3b04 	str.w	r3, [r0], #4
 80078be:	e7f4      	b.n	80078aa <__copybits+0x30>

080078c0 <__any_on>:
 80078c0:	f100 0214 	add.w	r2, r0, #20
 80078c4:	6900      	ldr	r0, [r0, #16]
 80078c6:	114b      	asrs	r3, r1, #5
 80078c8:	4298      	cmp	r0, r3
 80078ca:	b510      	push	{r4, lr}
 80078cc:	db11      	blt.n	80078f2 <__any_on+0x32>
 80078ce:	dd0a      	ble.n	80078e6 <__any_on+0x26>
 80078d0:	f011 011f 	ands.w	r1, r1, #31
 80078d4:	d007      	beq.n	80078e6 <__any_on+0x26>
 80078d6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80078da:	fa24 f001 	lsr.w	r0, r4, r1
 80078de:	fa00 f101 	lsl.w	r1, r0, r1
 80078e2:	428c      	cmp	r4, r1
 80078e4:	d10b      	bne.n	80078fe <__any_on+0x3e>
 80078e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d803      	bhi.n	80078f6 <__any_on+0x36>
 80078ee:	2000      	movs	r0, #0
 80078f0:	bd10      	pop	{r4, pc}
 80078f2:	4603      	mov	r3, r0
 80078f4:	e7f7      	b.n	80078e6 <__any_on+0x26>
 80078f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80078fa:	2900      	cmp	r1, #0
 80078fc:	d0f5      	beq.n	80078ea <__any_on+0x2a>
 80078fe:	2001      	movs	r0, #1
 8007900:	e7f6      	b.n	80078f0 <__any_on+0x30>

08007902 <sulp>:
 8007902:	b570      	push	{r4, r5, r6, lr}
 8007904:	4604      	mov	r4, r0
 8007906:	460d      	mov	r5, r1
 8007908:	4616      	mov	r6, r2
 800790a:	ec45 4b10 	vmov	d0, r4, r5
 800790e:	f7ff febd 	bl	800768c <__ulp>
 8007912:	b17e      	cbz	r6, 8007934 <sulp+0x32>
 8007914:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007918:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800791c:	2b00      	cmp	r3, #0
 800791e:	dd09      	ble.n	8007934 <sulp+0x32>
 8007920:	051b      	lsls	r3, r3, #20
 8007922:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8007926:	2000      	movs	r0, #0
 8007928:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800792c:	ec41 0b17 	vmov	d7, r0, r1
 8007930:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007934:	bd70      	pop	{r4, r5, r6, pc}
	...

08007938 <_strtod_l>:
 8007938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800793c:	ed2d 8b0a 	vpush	{d8-d12}
 8007940:	b097      	sub	sp, #92	@ 0x5c
 8007942:	4688      	mov	r8, r1
 8007944:	920e      	str	r2, [sp, #56]	@ 0x38
 8007946:	2200      	movs	r2, #0
 8007948:	9212      	str	r2, [sp, #72]	@ 0x48
 800794a:	9005      	str	r0, [sp, #20]
 800794c:	f04f 0a00 	mov.w	sl, #0
 8007950:	f04f 0b00 	mov.w	fp, #0
 8007954:	460a      	mov	r2, r1
 8007956:	9211      	str	r2, [sp, #68]	@ 0x44
 8007958:	7811      	ldrb	r1, [r2, #0]
 800795a:	292b      	cmp	r1, #43	@ 0x2b
 800795c:	d04c      	beq.n	80079f8 <_strtod_l+0xc0>
 800795e:	d839      	bhi.n	80079d4 <_strtod_l+0x9c>
 8007960:	290d      	cmp	r1, #13
 8007962:	d833      	bhi.n	80079cc <_strtod_l+0x94>
 8007964:	2908      	cmp	r1, #8
 8007966:	d833      	bhi.n	80079d0 <_strtod_l+0x98>
 8007968:	2900      	cmp	r1, #0
 800796a:	d03c      	beq.n	80079e6 <_strtod_l+0xae>
 800796c:	2200      	movs	r2, #0
 800796e:	9208      	str	r2, [sp, #32]
 8007970:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8007972:	782a      	ldrb	r2, [r5, #0]
 8007974:	2a30      	cmp	r2, #48	@ 0x30
 8007976:	f040 80b7 	bne.w	8007ae8 <_strtod_l+0x1b0>
 800797a:	786a      	ldrb	r2, [r5, #1]
 800797c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007980:	2a58      	cmp	r2, #88	@ 0x58
 8007982:	d170      	bne.n	8007a66 <_strtod_l+0x12e>
 8007984:	9302      	str	r3, [sp, #8]
 8007986:	9b08      	ldr	r3, [sp, #32]
 8007988:	9301      	str	r3, [sp, #4]
 800798a:	ab12      	add	r3, sp, #72	@ 0x48
 800798c:	9300      	str	r3, [sp, #0]
 800798e:	4a90      	ldr	r2, [pc, #576]	@ (8007bd0 <_strtod_l+0x298>)
 8007990:	9805      	ldr	r0, [sp, #20]
 8007992:	ab13      	add	r3, sp, #76	@ 0x4c
 8007994:	a911      	add	r1, sp, #68	@ 0x44
 8007996:	f001 f8dd 	bl	8008b54 <__gethex>
 800799a:	f010 060f 	ands.w	r6, r0, #15
 800799e:	4604      	mov	r4, r0
 80079a0:	d005      	beq.n	80079ae <_strtod_l+0x76>
 80079a2:	2e06      	cmp	r6, #6
 80079a4:	d12a      	bne.n	80079fc <_strtod_l+0xc4>
 80079a6:	3501      	adds	r5, #1
 80079a8:	2300      	movs	r3, #0
 80079aa:	9511      	str	r5, [sp, #68]	@ 0x44
 80079ac:	9308      	str	r3, [sp, #32]
 80079ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f040 8537 	bne.w	8008424 <_strtod_l+0xaec>
 80079b6:	9b08      	ldr	r3, [sp, #32]
 80079b8:	ec4b ab10 	vmov	d0, sl, fp
 80079bc:	b1cb      	cbz	r3, 80079f2 <_strtod_l+0xba>
 80079be:	eeb1 0b40 	vneg.f64	d0, d0
 80079c2:	b017      	add	sp, #92	@ 0x5c
 80079c4:	ecbd 8b0a 	vpop	{d8-d12}
 80079c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079cc:	2920      	cmp	r1, #32
 80079ce:	d1cd      	bne.n	800796c <_strtod_l+0x34>
 80079d0:	3201      	adds	r2, #1
 80079d2:	e7c0      	b.n	8007956 <_strtod_l+0x1e>
 80079d4:	292d      	cmp	r1, #45	@ 0x2d
 80079d6:	d1c9      	bne.n	800796c <_strtod_l+0x34>
 80079d8:	2101      	movs	r1, #1
 80079da:	9108      	str	r1, [sp, #32]
 80079dc:	1c51      	adds	r1, r2, #1
 80079de:	9111      	str	r1, [sp, #68]	@ 0x44
 80079e0:	7852      	ldrb	r2, [r2, #1]
 80079e2:	2a00      	cmp	r2, #0
 80079e4:	d1c4      	bne.n	8007970 <_strtod_l+0x38>
 80079e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079e8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f040 8517 	bne.w	8008420 <_strtod_l+0xae8>
 80079f2:	ec4b ab10 	vmov	d0, sl, fp
 80079f6:	e7e4      	b.n	80079c2 <_strtod_l+0x8a>
 80079f8:	2100      	movs	r1, #0
 80079fa:	e7ee      	b.n	80079da <_strtod_l+0xa2>
 80079fc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80079fe:	b13a      	cbz	r2, 8007a10 <_strtod_l+0xd8>
 8007a00:	2135      	movs	r1, #53	@ 0x35
 8007a02:	a814      	add	r0, sp, #80	@ 0x50
 8007a04:	f7ff ff39 	bl	800787a <__copybits>
 8007a08:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8007a0a:	9805      	ldr	r0, [sp, #20]
 8007a0c:	f7ff fb12 	bl	8007034 <_Bfree>
 8007a10:	1e73      	subs	r3, r6, #1
 8007a12:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007a14:	2b04      	cmp	r3, #4
 8007a16:	d806      	bhi.n	8007a26 <_strtod_l+0xee>
 8007a18:	e8df f003 	tbb	[pc, r3]
 8007a1c:	201d0314 	.word	0x201d0314
 8007a20:	14          	.byte	0x14
 8007a21:	00          	.byte	0x00
 8007a22:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8007a26:	05e3      	lsls	r3, r4, #23
 8007a28:	bf48      	it	mi
 8007a2a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007a2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007a32:	0d1b      	lsrs	r3, r3, #20
 8007a34:	051b      	lsls	r3, r3, #20
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1b9      	bne.n	80079ae <_strtod_l+0x76>
 8007a3a:	f7fe fb9f 	bl	800617c <__errno>
 8007a3e:	2322      	movs	r3, #34	@ 0x22
 8007a40:	6003      	str	r3, [r0, #0]
 8007a42:	e7b4      	b.n	80079ae <_strtod_l+0x76>
 8007a44:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8007a48:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007a4c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007a50:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007a54:	e7e7      	b.n	8007a26 <_strtod_l+0xee>
 8007a56:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8007bd8 <_strtod_l+0x2a0>
 8007a5a:	e7e4      	b.n	8007a26 <_strtod_l+0xee>
 8007a5c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007a60:	f04f 3aff 	mov.w	sl, #4294967295
 8007a64:	e7df      	b.n	8007a26 <_strtod_l+0xee>
 8007a66:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007a68:	1c5a      	adds	r2, r3, #1
 8007a6a:	9211      	str	r2, [sp, #68]	@ 0x44
 8007a6c:	785b      	ldrb	r3, [r3, #1]
 8007a6e:	2b30      	cmp	r3, #48	@ 0x30
 8007a70:	d0f9      	beq.n	8007a66 <_strtod_l+0x12e>
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d09b      	beq.n	80079ae <_strtod_l+0x76>
 8007a76:	2301      	movs	r3, #1
 8007a78:	9307      	str	r3, [sp, #28]
 8007a7a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007a7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a7e:	2300      	movs	r3, #0
 8007a80:	9306      	str	r3, [sp, #24]
 8007a82:	4699      	mov	r9, r3
 8007a84:	461d      	mov	r5, r3
 8007a86:	220a      	movs	r2, #10
 8007a88:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8007a8a:	7804      	ldrb	r4, [r0, #0]
 8007a8c:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8007a90:	b2d9      	uxtb	r1, r3
 8007a92:	2909      	cmp	r1, #9
 8007a94:	d92a      	bls.n	8007aec <_strtod_l+0x1b4>
 8007a96:	494f      	ldr	r1, [pc, #316]	@ (8007bd4 <_strtod_l+0x29c>)
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f000 ff87 	bl	80089ac <strncmp>
 8007a9e:	b398      	cbz	r0, 8007b08 <_strtod_l+0x1d0>
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	4622      	mov	r2, r4
 8007aa4:	462b      	mov	r3, r5
 8007aa6:	4607      	mov	r7, r0
 8007aa8:	4601      	mov	r1, r0
 8007aaa:	2a65      	cmp	r2, #101	@ 0x65
 8007aac:	d001      	beq.n	8007ab2 <_strtod_l+0x17a>
 8007aae:	2a45      	cmp	r2, #69	@ 0x45
 8007ab0:	d118      	bne.n	8007ae4 <_strtod_l+0x1ac>
 8007ab2:	b91b      	cbnz	r3, 8007abc <_strtod_l+0x184>
 8007ab4:	9b07      	ldr	r3, [sp, #28]
 8007ab6:	4303      	orrs	r3, r0
 8007ab8:	d095      	beq.n	80079e6 <_strtod_l+0xae>
 8007aba:	2300      	movs	r3, #0
 8007abc:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8007ac0:	f108 0201 	add.w	r2, r8, #1
 8007ac4:	9211      	str	r2, [sp, #68]	@ 0x44
 8007ac6:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007aca:	2a2b      	cmp	r2, #43	@ 0x2b
 8007acc:	d074      	beq.n	8007bb8 <_strtod_l+0x280>
 8007ace:	2a2d      	cmp	r2, #45	@ 0x2d
 8007ad0:	d07a      	beq.n	8007bc8 <_strtod_l+0x290>
 8007ad2:	f04f 0e00 	mov.w	lr, #0
 8007ad6:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8007ada:	2c09      	cmp	r4, #9
 8007adc:	f240 8082 	bls.w	8007be4 <_strtod_l+0x2ac>
 8007ae0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8007ae4:	2400      	movs	r4, #0
 8007ae6:	e09d      	b.n	8007c24 <_strtod_l+0x2ec>
 8007ae8:	2300      	movs	r3, #0
 8007aea:	e7c5      	b.n	8007a78 <_strtod_l+0x140>
 8007aec:	2d08      	cmp	r5, #8
 8007aee:	bfc8      	it	gt
 8007af0:	9906      	ldrgt	r1, [sp, #24]
 8007af2:	f100 0001 	add.w	r0, r0, #1
 8007af6:	bfca      	itet	gt
 8007af8:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007afc:	fb02 3909 	mlale	r9, r2, r9, r3
 8007b00:	9306      	strgt	r3, [sp, #24]
 8007b02:	3501      	adds	r5, #1
 8007b04:	9011      	str	r0, [sp, #68]	@ 0x44
 8007b06:	e7bf      	b.n	8007a88 <_strtod_l+0x150>
 8007b08:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007b0a:	1c5a      	adds	r2, r3, #1
 8007b0c:	9211      	str	r2, [sp, #68]	@ 0x44
 8007b0e:	785a      	ldrb	r2, [r3, #1]
 8007b10:	b3bd      	cbz	r5, 8007b82 <_strtod_l+0x24a>
 8007b12:	4607      	mov	r7, r0
 8007b14:	462b      	mov	r3, r5
 8007b16:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007b1a:	2909      	cmp	r1, #9
 8007b1c:	d912      	bls.n	8007b44 <_strtod_l+0x20c>
 8007b1e:	2101      	movs	r1, #1
 8007b20:	e7c3      	b.n	8007aaa <_strtod_l+0x172>
 8007b22:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007b24:	1c5a      	adds	r2, r3, #1
 8007b26:	9211      	str	r2, [sp, #68]	@ 0x44
 8007b28:	785a      	ldrb	r2, [r3, #1]
 8007b2a:	3001      	adds	r0, #1
 8007b2c:	2a30      	cmp	r2, #48	@ 0x30
 8007b2e:	d0f8      	beq.n	8007b22 <_strtod_l+0x1ea>
 8007b30:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007b34:	2b08      	cmp	r3, #8
 8007b36:	f200 847a 	bhi.w	800842e <_strtod_l+0xaf6>
 8007b3a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007b3c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b3e:	4607      	mov	r7, r0
 8007b40:	2000      	movs	r0, #0
 8007b42:	4603      	mov	r3, r0
 8007b44:	3a30      	subs	r2, #48	@ 0x30
 8007b46:	f100 0101 	add.w	r1, r0, #1
 8007b4a:	d014      	beq.n	8007b76 <_strtod_l+0x23e>
 8007b4c:	440f      	add	r7, r1
 8007b4e:	469c      	mov	ip, r3
 8007b50:	f04f 0e0a 	mov.w	lr, #10
 8007b54:	f10c 0401 	add.w	r4, ip, #1
 8007b58:	1ae6      	subs	r6, r4, r3
 8007b5a:	42b1      	cmp	r1, r6
 8007b5c:	dc13      	bgt.n	8007b86 <_strtod_l+0x24e>
 8007b5e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007b62:	1819      	adds	r1, r3, r0
 8007b64:	2908      	cmp	r1, #8
 8007b66:	f103 0301 	add.w	r3, r3, #1
 8007b6a:	4403      	add	r3, r0
 8007b6c:	dc19      	bgt.n	8007ba2 <_strtod_l+0x26a>
 8007b6e:	210a      	movs	r1, #10
 8007b70:	fb01 2909 	mla	r9, r1, r9, r2
 8007b74:	2100      	movs	r1, #0
 8007b76:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007b78:	1c50      	adds	r0, r2, #1
 8007b7a:	9011      	str	r0, [sp, #68]	@ 0x44
 8007b7c:	7852      	ldrb	r2, [r2, #1]
 8007b7e:	4608      	mov	r0, r1
 8007b80:	e7c9      	b.n	8007b16 <_strtod_l+0x1de>
 8007b82:	4628      	mov	r0, r5
 8007b84:	e7d2      	b.n	8007b2c <_strtod_l+0x1f4>
 8007b86:	f1bc 0f08 	cmp.w	ip, #8
 8007b8a:	dc03      	bgt.n	8007b94 <_strtod_l+0x25c>
 8007b8c:	fb0e f909 	mul.w	r9, lr, r9
 8007b90:	46a4      	mov	ip, r4
 8007b92:	e7df      	b.n	8007b54 <_strtod_l+0x21c>
 8007b94:	2c10      	cmp	r4, #16
 8007b96:	bfde      	ittt	le
 8007b98:	9e06      	ldrle	r6, [sp, #24]
 8007b9a:	fb0e f606 	mulle.w	r6, lr, r6
 8007b9e:	9606      	strle	r6, [sp, #24]
 8007ba0:	e7f6      	b.n	8007b90 <_strtod_l+0x258>
 8007ba2:	290f      	cmp	r1, #15
 8007ba4:	bfdf      	itttt	le
 8007ba6:	9806      	ldrle	r0, [sp, #24]
 8007ba8:	210a      	movle	r1, #10
 8007baa:	fb01 2200 	mlale	r2, r1, r0, r2
 8007bae:	9206      	strle	r2, [sp, #24]
 8007bb0:	e7e0      	b.n	8007b74 <_strtod_l+0x23c>
 8007bb2:	2700      	movs	r7, #0
 8007bb4:	2101      	movs	r1, #1
 8007bb6:	e77d      	b.n	8007ab4 <_strtod_l+0x17c>
 8007bb8:	f04f 0e00 	mov.w	lr, #0
 8007bbc:	f108 0202 	add.w	r2, r8, #2
 8007bc0:	9211      	str	r2, [sp, #68]	@ 0x44
 8007bc2:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007bc6:	e786      	b.n	8007ad6 <_strtod_l+0x19e>
 8007bc8:	f04f 0e01 	mov.w	lr, #1
 8007bcc:	e7f6      	b.n	8007bbc <_strtod_l+0x284>
 8007bce:	bf00      	nop
 8007bd0:	08009afc 	.word	0x08009afc
 8007bd4:	0800992f 	.word	0x0800992f
 8007bd8:	7ff00000 	.word	0x7ff00000
 8007bdc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007bde:	1c54      	adds	r4, r2, #1
 8007be0:	9411      	str	r4, [sp, #68]	@ 0x44
 8007be2:	7852      	ldrb	r2, [r2, #1]
 8007be4:	2a30      	cmp	r2, #48	@ 0x30
 8007be6:	d0f9      	beq.n	8007bdc <_strtod_l+0x2a4>
 8007be8:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8007bec:	2c08      	cmp	r4, #8
 8007bee:	f63f af79 	bhi.w	8007ae4 <_strtod_l+0x1ac>
 8007bf2:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8007bf6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007bf8:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bfa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007bfc:	1c54      	adds	r4, r2, #1
 8007bfe:	9411      	str	r4, [sp, #68]	@ 0x44
 8007c00:	7852      	ldrb	r2, [r2, #1]
 8007c02:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 8007c06:	2e09      	cmp	r6, #9
 8007c08:	d937      	bls.n	8007c7a <_strtod_l+0x342>
 8007c0a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8007c0c:	1ba4      	subs	r4, r4, r6
 8007c0e:	2c08      	cmp	r4, #8
 8007c10:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8007c14:	dc02      	bgt.n	8007c1c <_strtod_l+0x2e4>
 8007c16:	4564      	cmp	r4, ip
 8007c18:	bfa8      	it	ge
 8007c1a:	4664      	movge	r4, ip
 8007c1c:	f1be 0f00 	cmp.w	lr, #0
 8007c20:	d000      	beq.n	8007c24 <_strtod_l+0x2ec>
 8007c22:	4264      	negs	r4, r4
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d14d      	bne.n	8007cc4 <_strtod_l+0x38c>
 8007c28:	9b07      	ldr	r3, [sp, #28]
 8007c2a:	4318      	orrs	r0, r3
 8007c2c:	f47f aebf 	bne.w	80079ae <_strtod_l+0x76>
 8007c30:	2900      	cmp	r1, #0
 8007c32:	f47f aed8 	bne.w	80079e6 <_strtod_l+0xae>
 8007c36:	2a69      	cmp	r2, #105	@ 0x69
 8007c38:	d027      	beq.n	8007c8a <_strtod_l+0x352>
 8007c3a:	dc24      	bgt.n	8007c86 <_strtod_l+0x34e>
 8007c3c:	2a49      	cmp	r2, #73	@ 0x49
 8007c3e:	d024      	beq.n	8007c8a <_strtod_l+0x352>
 8007c40:	2a4e      	cmp	r2, #78	@ 0x4e
 8007c42:	f47f aed0 	bne.w	80079e6 <_strtod_l+0xae>
 8007c46:	4997      	ldr	r1, [pc, #604]	@ (8007ea4 <_strtod_l+0x56c>)
 8007c48:	a811      	add	r0, sp, #68	@ 0x44
 8007c4a:	f001 f9a5 	bl	8008f98 <__match>
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	f43f aec9 	beq.w	80079e6 <_strtod_l+0xae>
 8007c54:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	2b28      	cmp	r3, #40	@ 0x28
 8007c5a:	d12d      	bne.n	8007cb8 <_strtod_l+0x380>
 8007c5c:	4992      	ldr	r1, [pc, #584]	@ (8007ea8 <_strtod_l+0x570>)
 8007c5e:	aa14      	add	r2, sp, #80	@ 0x50
 8007c60:	a811      	add	r0, sp, #68	@ 0x44
 8007c62:	f001 f9ad 	bl	8008fc0 <__hexnan>
 8007c66:	2805      	cmp	r0, #5
 8007c68:	d126      	bne.n	8007cb8 <_strtod_l+0x380>
 8007c6a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007c6c:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8007c70:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007c74:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007c78:	e699      	b.n	80079ae <_strtod_l+0x76>
 8007c7a:	240a      	movs	r4, #10
 8007c7c:	fb04 2c0c 	mla	ip, r4, ip, r2
 8007c80:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8007c84:	e7b9      	b.n	8007bfa <_strtod_l+0x2c2>
 8007c86:	2a6e      	cmp	r2, #110	@ 0x6e
 8007c88:	e7db      	b.n	8007c42 <_strtod_l+0x30a>
 8007c8a:	4988      	ldr	r1, [pc, #544]	@ (8007eac <_strtod_l+0x574>)
 8007c8c:	a811      	add	r0, sp, #68	@ 0x44
 8007c8e:	f001 f983 	bl	8008f98 <__match>
 8007c92:	2800      	cmp	r0, #0
 8007c94:	f43f aea7 	beq.w	80079e6 <_strtod_l+0xae>
 8007c98:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007c9a:	4985      	ldr	r1, [pc, #532]	@ (8007eb0 <_strtod_l+0x578>)
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	a811      	add	r0, sp, #68	@ 0x44
 8007ca0:	9311      	str	r3, [sp, #68]	@ 0x44
 8007ca2:	f001 f979 	bl	8008f98 <__match>
 8007ca6:	b910      	cbnz	r0, 8007cae <_strtod_l+0x376>
 8007ca8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007caa:	3301      	adds	r3, #1
 8007cac:	9311      	str	r3, [sp, #68]	@ 0x44
 8007cae:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8007ec4 <_strtod_l+0x58c>
 8007cb2:	f04f 0a00 	mov.w	sl, #0
 8007cb6:	e67a      	b.n	80079ae <_strtod_l+0x76>
 8007cb8:	487e      	ldr	r0, [pc, #504]	@ (8007eb4 <_strtod_l+0x57c>)
 8007cba:	f000 fea9 	bl	8008a10 <nan>
 8007cbe:	ec5b ab10 	vmov	sl, fp, d0
 8007cc2:	e674      	b.n	80079ae <_strtod_l+0x76>
 8007cc4:	ee07 9a90 	vmov	s15, r9
 8007cc8:	1be2      	subs	r2, r4, r7
 8007cca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007cce:	2d00      	cmp	r5, #0
 8007cd0:	bf08      	it	eq
 8007cd2:	461d      	moveq	r5, r3
 8007cd4:	2b10      	cmp	r3, #16
 8007cd6:	9209      	str	r2, [sp, #36]	@ 0x24
 8007cd8:	461a      	mov	r2, r3
 8007cda:	bfa8      	it	ge
 8007cdc:	2210      	movge	r2, #16
 8007cde:	2b09      	cmp	r3, #9
 8007ce0:	ec5b ab17 	vmov	sl, fp, d7
 8007ce4:	dc15      	bgt.n	8007d12 <_strtod_l+0x3da>
 8007ce6:	1be1      	subs	r1, r4, r7
 8007ce8:	2900      	cmp	r1, #0
 8007cea:	f43f ae60 	beq.w	80079ae <_strtod_l+0x76>
 8007cee:	eba4 0107 	sub.w	r1, r4, r7
 8007cf2:	dd72      	ble.n	8007dda <_strtod_l+0x4a2>
 8007cf4:	2916      	cmp	r1, #22
 8007cf6:	dc59      	bgt.n	8007dac <_strtod_l+0x474>
 8007cf8:	4b6f      	ldr	r3, [pc, #444]	@ (8007eb8 <_strtod_l+0x580>)
 8007cfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d00:	ed93 7b00 	vldr	d7, [r3]
 8007d04:	ec4b ab16 	vmov	d6, sl, fp
 8007d08:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007d0c:	ec5b ab17 	vmov	sl, fp, d7
 8007d10:	e64d      	b.n	80079ae <_strtod_l+0x76>
 8007d12:	4969      	ldr	r1, [pc, #420]	@ (8007eb8 <_strtod_l+0x580>)
 8007d14:	eddd 6a06 	vldr	s13, [sp, #24]
 8007d18:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8007d1c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8007d20:	2b0f      	cmp	r3, #15
 8007d22:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8007d26:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007d2a:	ec5b ab16 	vmov	sl, fp, d6
 8007d2e:	ddda      	ble.n	8007ce6 <_strtod_l+0x3ae>
 8007d30:	1a9a      	subs	r2, r3, r2
 8007d32:	1be1      	subs	r1, r4, r7
 8007d34:	440a      	add	r2, r1
 8007d36:	2a00      	cmp	r2, #0
 8007d38:	f340 8094 	ble.w	8007e64 <_strtod_l+0x52c>
 8007d3c:	f012 000f 	ands.w	r0, r2, #15
 8007d40:	d00a      	beq.n	8007d58 <_strtod_l+0x420>
 8007d42:	495d      	ldr	r1, [pc, #372]	@ (8007eb8 <_strtod_l+0x580>)
 8007d44:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007d48:	ed91 7b00 	vldr	d7, [r1]
 8007d4c:	ec4b ab16 	vmov	d6, sl, fp
 8007d50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007d54:	ec5b ab17 	vmov	sl, fp, d7
 8007d58:	f032 020f 	bics.w	r2, r2, #15
 8007d5c:	d073      	beq.n	8007e46 <_strtod_l+0x50e>
 8007d5e:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8007d62:	dd47      	ble.n	8007df4 <_strtod_l+0x4bc>
 8007d64:	2400      	movs	r4, #0
 8007d66:	4625      	mov	r5, r4
 8007d68:	9407      	str	r4, [sp, #28]
 8007d6a:	4626      	mov	r6, r4
 8007d6c:	9a05      	ldr	r2, [sp, #20]
 8007d6e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007ec4 <_strtod_l+0x58c>
 8007d72:	2322      	movs	r3, #34	@ 0x22
 8007d74:	6013      	str	r3, [r2, #0]
 8007d76:	f04f 0a00 	mov.w	sl, #0
 8007d7a:	9b07      	ldr	r3, [sp, #28]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f43f ae16 	beq.w	80079ae <_strtod_l+0x76>
 8007d82:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8007d84:	9805      	ldr	r0, [sp, #20]
 8007d86:	f7ff f955 	bl	8007034 <_Bfree>
 8007d8a:	9805      	ldr	r0, [sp, #20]
 8007d8c:	4631      	mov	r1, r6
 8007d8e:	f7ff f951 	bl	8007034 <_Bfree>
 8007d92:	9805      	ldr	r0, [sp, #20]
 8007d94:	4629      	mov	r1, r5
 8007d96:	f7ff f94d 	bl	8007034 <_Bfree>
 8007d9a:	9907      	ldr	r1, [sp, #28]
 8007d9c:	9805      	ldr	r0, [sp, #20]
 8007d9e:	f7ff f949 	bl	8007034 <_Bfree>
 8007da2:	9805      	ldr	r0, [sp, #20]
 8007da4:	4621      	mov	r1, r4
 8007da6:	f7ff f945 	bl	8007034 <_Bfree>
 8007daa:	e600      	b.n	80079ae <_strtod_l+0x76>
 8007dac:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8007db0:	1be0      	subs	r0, r4, r7
 8007db2:	4281      	cmp	r1, r0
 8007db4:	dbbc      	blt.n	8007d30 <_strtod_l+0x3f8>
 8007db6:	4a40      	ldr	r2, [pc, #256]	@ (8007eb8 <_strtod_l+0x580>)
 8007db8:	f1c3 030f 	rsb	r3, r3, #15
 8007dbc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8007dc0:	ed91 7b00 	vldr	d7, [r1]
 8007dc4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007dc6:	ec4b ab16 	vmov	d6, sl, fp
 8007dca:	1acb      	subs	r3, r1, r3
 8007dcc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8007dd0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007dd4:	ed92 6b00 	vldr	d6, [r2]
 8007dd8:	e796      	b.n	8007d08 <_strtod_l+0x3d0>
 8007dda:	3116      	adds	r1, #22
 8007ddc:	dba8      	blt.n	8007d30 <_strtod_l+0x3f8>
 8007dde:	4b36      	ldr	r3, [pc, #216]	@ (8007eb8 <_strtod_l+0x580>)
 8007de0:	1b3c      	subs	r4, r7, r4
 8007de2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8007de6:	ed94 7b00 	vldr	d7, [r4]
 8007dea:	ec4b ab16 	vmov	d6, sl, fp
 8007dee:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007df2:	e78b      	b.n	8007d0c <_strtod_l+0x3d4>
 8007df4:	2000      	movs	r0, #0
 8007df6:	ec4b ab17 	vmov	d7, sl, fp
 8007dfa:	4e30      	ldr	r6, [pc, #192]	@ (8007ebc <_strtod_l+0x584>)
 8007dfc:	1112      	asrs	r2, r2, #4
 8007dfe:	4601      	mov	r1, r0
 8007e00:	2a01      	cmp	r2, #1
 8007e02:	dc23      	bgt.n	8007e4c <_strtod_l+0x514>
 8007e04:	b108      	cbz	r0, 8007e0a <_strtod_l+0x4d2>
 8007e06:	ec5b ab17 	vmov	sl, fp, d7
 8007e0a:	4a2c      	ldr	r2, [pc, #176]	@ (8007ebc <_strtod_l+0x584>)
 8007e0c:	482c      	ldr	r0, [pc, #176]	@ (8007ec0 <_strtod_l+0x588>)
 8007e0e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007e12:	ed92 7b00 	vldr	d7, [r2]
 8007e16:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007e1a:	ec4b ab16 	vmov	d6, sl, fp
 8007e1e:	4a29      	ldr	r2, [pc, #164]	@ (8007ec4 <_strtod_l+0x58c>)
 8007e20:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007e24:	ee17 1a90 	vmov	r1, s15
 8007e28:	400a      	ands	r2, r1
 8007e2a:	4282      	cmp	r2, r0
 8007e2c:	ec5b ab17 	vmov	sl, fp, d7
 8007e30:	d898      	bhi.n	8007d64 <_strtod_l+0x42c>
 8007e32:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8007e36:	4282      	cmp	r2, r0
 8007e38:	bf86      	itte	hi
 8007e3a:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8007ec8 <_strtod_l+0x590>
 8007e3e:	f04f 3aff 	movhi.w	sl, #4294967295
 8007e42:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8007e46:	2200      	movs	r2, #0
 8007e48:	9206      	str	r2, [sp, #24]
 8007e4a:	e076      	b.n	8007f3a <_strtod_l+0x602>
 8007e4c:	f012 0f01 	tst.w	r2, #1
 8007e50:	d004      	beq.n	8007e5c <_strtod_l+0x524>
 8007e52:	ed96 6b00 	vldr	d6, [r6]
 8007e56:	2001      	movs	r0, #1
 8007e58:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007e5c:	3101      	adds	r1, #1
 8007e5e:	1052      	asrs	r2, r2, #1
 8007e60:	3608      	adds	r6, #8
 8007e62:	e7cd      	b.n	8007e00 <_strtod_l+0x4c8>
 8007e64:	d0ef      	beq.n	8007e46 <_strtod_l+0x50e>
 8007e66:	4252      	negs	r2, r2
 8007e68:	f012 000f 	ands.w	r0, r2, #15
 8007e6c:	d00a      	beq.n	8007e84 <_strtod_l+0x54c>
 8007e6e:	4912      	ldr	r1, [pc, #72]	@ (8007eb8 <_strtod_l+0x580>)
 8007e70:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007e74:	ed91 7b00 	vldr	d7, [r1]
 8007e78:	ec4b ab16 	vmov	d6, sl, fp
 8007e7c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007e80:	ec5b ab17 	vmov	sl, fp, d7
 8007e84:	1112      	asrs	r2, r2, #4
 8007e86:	d0de      	beq.n	8007e46 <_strtod_l+0x50e>
 8007e88:	2a1f      	cmp	r2, #31
 8007e8a:	dd1f      	ble.n	8007ecc <_strtod_l+0x594>
 8007e8c:	2400      	movs	r4, #0
 8007e8e:	4625      	mov	r5, r4
 8007e90:	9407      	str	r4, [sp, #28]
 8007e92:	4626      	mov	r6, r4
 8007e94:	9a05      	ldr	r2, [sp, #20]
 8007e96:	2322      	movs	r3, #34	@ 0x22
 8007e98:	f04f 0a00 	mov.w	sl, #0
 8007e9c:	f04f 0b00 	mov.w	fp, #0
 8007ea0:	6013      	str	r3, [r2, #0]
 8007ea2:	e76a      	b.n	8007d7a <_strtod_l+0x442>
 8007ea4:	0800981d 	.word	0x0800981d
 8007ea8:	08009ae8 	.word	0x08009ae8
 8007eac:	08009815 	.word	0x08009815
 8007eb0:	0800984c 	.word	0x0800984c
 8007eb4:	08009985 	.word	0x08009985
 8007eb8:	08009a20 	.word	0x08009a20
 8007ebc:	080099f8 	.word	0x080099f8
 8007ec0:	7ca00000 	.word	0x7ca00000
 8007ec4:	7ff00000 	.word	0x7ff00000
 8007ec8:	7fefffff 	.word	0x7fefffff
 8007ecc:	f012 0110 	ands.w	r1, r2, #16
 8007ed0:	bf18      	it	ne
 8007ed2:	216a      	movne	r1, #106	@ 0x6a
 8007ed4:	9106      	str	r1, [sp, #24]
 8007ed6:	ec4b ab17 	vmov	d7, sl, fp
 8007eda:	49af      	ldr	r1, [pc, #700]	@ (8008198 <_strtod_l+0x860>)
 8007edc:	2000      	movs	r0, #0
 8007ede:	07d6      	lsls	r6, r2, #31
 8007ee0:	d504      	bpl.n	8007eec <_strtod_l+0x5b4>
 8007ee2:	ed91 6b00 	vldr	d6, [r1]
 8007ee6:	2001      	movs	r0, #1
 8007ee8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007eec:	1052      	asrs	r2, r2, #1
 8007eee:	f101 0108 	add.w	r1, r1, #8
 8007ef2:	d1f4      	bne.n	8007ede <_strtod_l+0x5a6>
 8007ef4:	b108      	cbz	r0, 8007efa <_strtod_l+0x5c2>
 8007ef6:	ec5b ab17 	vmov	sl, fp, d7
 8007efa:	9a06      	ldr	r2, [sp, #24]
 8007efc:	b1b2      	cbz	r2, 8007f2c <_strtod_l+0x5f4>
 8007efe:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8007f02:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8007f06:	2a00      	cmp	r2, #0
 8007f08:	4658      	mov	r0, fp
 8007f0a:	dd0f      	ble.n	8007f2c <_strtod_l+0x5f4>
 8007f0c:	2a1f      	cmp	r2, #31
 8007f0e:	dd55      	ble.n	8007fbc <_strtod_l+0x684>
 8007f10:	2a34      	cmp	r2, #52	@ 0x34
 8007f12:	bfde      	ittt	le
 8007f14:	f04f 32ff 	movle.w	r2, #4294967295
 8007f18:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8007f1c:	408a      	lslle	r2, r1
 8007f1e:	f04f 0a00 	mov.w	sl, #0
 8007f22:	bfcc      	ite	gt
 8007f24:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007f28:	ea02 0b00 	andle.w	fp, r2, r0
 8007f2c:	ec4b ab17 	vmov	d7, sl, fp
 8007f30:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f38:	d0a8      	beq.n	8007e8c <_strtod_l+0x554>
 8007f3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007f3c:	9805      	ldr	r0, [sp, #20]
 8007f3e:	f8cd 9000 	str.w	r9, [sp]
 8007f42:	462a      	mov	r2, r5
 8007f44:	f7ff f8de 	bl	8007104 <__s2b>
 8007f48:	9007      	str	r0, [sp, #28]
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	f43f af0a 	beq.w	8007d64 <_strtod_l+0x42c>
 8007f50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f52:	1b3f      	subs	r7, r7, r4
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	bfb4      	ite	lt
 8007f58:	463b      	movlt	r3, r7
 8007f5a:	2300      	movge	r3, #0
 8007f5c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f60:	ed9f bb89 	vldr	d11, [pc, #548]	@ 8008188 <_strtod_l+0x850>
 8007f64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007f68:	2400      	movs	r4, #0
 8007f6a:	930d      	str	r3, [sp, #52]	@ 0x34
 8007f6c:	4625      	mov	r5, r4
 8007f6e:	9b07      	ldr	r3, [sp, #28]
 8007f70:	9805      	ldr	r0, [sp, #20]
 8007f72:	6859      	ldr	r1, [r3, #4]
 8007f74:	f7ff f81e 	bl	8006fb4 <_Balloc>
 8007f78:	4606      	mov	r6, r0
 8007f7a:	2800      	cmp	r0, #0
 8007f7c:	f43f aef6 	beq.w	8007d6c <_strtod_l+0x434>
 8007f80:	9b07      	ldr	r3, [sp, #28]
 8007f82:	691a      	ldr	r2, [r3, #16]
 8007f84:	ec4b ab19 	vmov	d9, sl, fp
 8007f88:	3202      	adds	r2, #2
 8007f8a:	f103 010c 	add.w	r1, r3, #12
 8007f8e:	0092      	lsls	r2, r2, #2
 8007f90:	300c      	adds	r0, #12
 8007f92:	f000 fd2d 	bl	80089f0 <memcpy>
 8007f96:	eeb0 0b49 	vmov.f64	d0, d9
 8007f9a:	9805      	ldr	r0, [sp, #20]
 8007f9c:	aa14      	add	r2, sp, #80	@ 0x50
 8007f9e:	a913      	add	r1, sp, #76	@ 0x4c
 8007fa0:	f7ff fbe4 	bl	800776c <__d2b>
 8007fa4:	9012      	str	r0, [sp, #72]	@ 0x48
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	f43f aee0 	beq.w	8007d6c <_strtod_l+0x434>
 8007fac:	9805      	ldr	r0, [sp, #20]
 8007fae:	2101      	movs	r1, #1
 8007fb0:	f7ff f93e 	bl	8007230 <__i2b>
 8007fb4:	4605      	mov	r5, r0
 8007fb6:	b940      	cbnz	r0, 8007fca <_strtod_l+0x692>
 8007fb8:	2500      	movs	r5, #0
 8007fba:	e6d7      	b.n	8007d6c <_strtod_l+0x434>
 8007fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8007fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8007fc4:	ea02 0a0a 	and.w	sl, r2, sl
 8007fc8:	e7b0      	b.n	8007f2c <_strtod_l+0x5f4>
 8007fca:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8007fcc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007fce:	2f00      	cmp	r7, #0
 8007fd0:	bfab      	itete	ge
 8007fd2:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8007fd4:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8007fd6:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8007fda:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8007fde:	bfac      	ite	ge
 8007fe0:	eb07 0903 	addge.w	r9, r7, r3
 8007fe4:	eba3 0807 	sublt.w	r8, r3, r7
 8007fe8:	9b06      	ldr	r3, [sp, #24]
 8007fea:	1aff      	subs	r7, r7, r3
 8007fec:	4417      	add	r7, r2
 8007fee:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8007ff2:	4a6a      	ldr	r2, [pc, #424]	@ (800819c <_strtod_l+0x864>)
 8007ff4:	3f01      	subs	r7, #1
 8007ff6:	4297      	cmp	r7, r2
 8007ff8:	da51      	bge.n	800809e <_strtod_l+0x766>
 8007ffa:	1bd1      	subs	r1, r2, r7
 8007ffc:	291f      	cmp	r1, #31
 8007ffe:	eba3 0301 	sub.w	r3, r3, r1
 8008002:	f04f 0201 	mov.w	r2, #1
 8008006:	dc3e      	bgt.n	8008086 <_strtod_l+0x74e>
 8008008:	408a      	lsls	r2, r1
 800800a:	920c      	str	r2, [sp, #48]	@ 0x30
 800800c:	2200      	movs	r2, #0
 800800e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008010:	eb09 0703 	add.w	r7, r9, r3
 8008014:	4498      	add	r8, r3
 8008016:	9b06      	ldr	r3, [sp, #24]
 8008018:	45b9      	cmp	r9, r7
 800801a:	4498      	add	r8, r3
 800801c:	464b      	mov	r3, r9
 800801e:	bfa8      	it	ge
 8008020:	463b      	movge	r3, r7
 8008022:	4543      	cmp	r3, r8
 8008024:	bfa8      	it	ge
 8008026:	4643      	movge	r3, r8
 8008028:	2b00      	cmp	r3, #0
 800802a:	bfc2      	ittt	gt
 800802c:	1aff      	subgt	r7, r7, r3
 800802e:	eba8 0803 	subgt.w	r8, r8, r3
 8008032:	eba9 0903 	subgt.w	r9, r9, r3
 8008036:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008038:	2b00      	cmp	r3, #0
 800803a:	dd16      	ble.n	800806a <_strtod_l+0x732>
 800803c:	4629      	mov	r1, r5
 800803e:	9805      	ldr	r0, [sp, #20]
 8008040:	461a      	mov	r2, r3
 8008042:	f7ff f9ad 	bl	80073a0 <__pow5mult>
 8008046:	4605      	mov	r5, r0
 8008048:	2800      	cmp	r0, #0
 800804a:	d0b5      	beq.n	8007fb8 <_strtod_l+0x680>
 800804c:	4601      	mov	r1, r0
 800804e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008050:	9805      	ldr	r0, [sp, #20]
 8008052:	f7ff f903 	bl	800725c <__multiply>
 8008056:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008058:	2800      	cmp	r0, #0
 800805a:	f43f ae87 	beq.w	8007d6c <_strtod_l+0x434>
 800805e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8008060:	9805      	ldr	r0, [sp, #20]
 8008062:	f7fe ffe7 	bl	8007034 <_Bfree>
 8008066:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008068:	9312      	str	r3, [sp, #72]	@ 0x48
 800806a:	2f00      	cmp	r7, #0
 800806c:	dc1b      	bgt.n	80080a6 <_strtod_l+0x76e>
 800806e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008070:	2b00      	cmp	r3, #0
 8008072:	dd21      	ble.n	80080b8 <_strtod_l+0x780>
 8008074:	4631      	mov	r1, r6
 8008076:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008078:	9805      	ldr	r0, [sp, #20]
 800807a:	f7ff f991 	bl	80073a0 <__pow5mult>
 800807e:	4606      	mov	r6, r0
 8008080:	b9d0      	cbnz	r0, 80080b8 <_strtod_l+0x780>
 8008082:	2600      	movs	r6, #0
 8008084:	e672      	b.n	8007d6c <_strtod_l+0x434>
 8008086:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800808a:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800808e:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8008092:	37e2      	adds	r7, #226	@ 0xe2
 8008094:	fa02 f107 	lsl.w	r1, r2, r7
 8008098:	910b      	str	r1, [sp, #44]	@ 0x2c
 800809a:	920c      	str	r2, [sp, #48]	@ 0x30
 800809c:	e7b8      	b.n	8008010 <_strtod_l+0x6d8>
 800809e:	2200      	movs	r2, #0
 80080a0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80080a2:	2201      	movs	r2, #1
 80080a4:	e7f9      	b.n	800809a <_strtod_l+0x762>
 80080a6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80080a8:	9805      	ldr	r0, [sp, #20]
 80080aa:	463a      	mov	r2, r7
 80080ac:	f7ff f9d2 	bl	8007454 <__lshift>
 80080b0:	9012      	str	r0, [sp, #72]	@ 0x48
 80080b2:	2800      	cmp	r0, #0
 80080b4:	d1db      	bne.n	800806e <_strtod_l+0x736>
 80080b6:	e659      	b.n	8007d6c <_strtod_l+0x434>
 80080b8:	f1b8 0f00 	cmp.w	r8, #0
 80080bc:	dd07      	ble.n	80080ce <_strtod_l+0x796>
 80080be:	4631      	mov	r1, r6
 80080c0:	9805      	ldr	r0, [sp, #20]
 80080c2:	4642      	mov	r2, r8
 80080c4:	f7ff f9c6 	bl	8007454 <__lshift>
 80080c8:	4606      	mov	r6, r0
 80080ca:	2800      	cmp	r0, #0
 80080cc:	d0d9      	beq.n	8008082 <_strtod_l+0x74a>
 80080ce:	f1b9 0f00 	cmp.w	r9, #0
 80080d2:	dd08      	ble.n	80080e6 <_strtod_l+0x7ae>
 80080d4:	4629      	mov	r1, r5
 80080d6:	9805      	ldr	r0, [sp, #20]
 80080d8:	464a      	mov	r2, r9
 80080da:	f7ff f9bb 	bl	8007454 <__lshift>
 80080de:	4605      	mov	r5, r0
 80080e0:	2800      	cmp	r0, #0
 80080e2:	f43f ae43 	beq.w	8007d6c <_strtod_l+0x434>
 80080e6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80080e8:	9805      	ldr	r0, [sp, #20]
 80080ea:	4632      	mov	r2, r6
 80080ec:	f7ff fa3a 	bl	8007564 <__mdiff>
 80080f0:	4604      	mov	r4, r0
 80080f2:	2800      	cmp	r0, #0
 80080f4:	f43f ae3a 	beq.w	8007d6c <_strtod_l+0x434>
 80080f8:	2300      	movs	r3, #0
 80080fa:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80080fe:	60c3      	str	r3, [r0, #12]
 8008100:	4629      	mov	r1, r5
 8008102:	f7ff fa13 	bl	800752c <__mcmp>
 8008106:	2800      	cmp	r0, #0
 8008108:	da4c      	bge.n	80081a4 <_strtod_l+0x86c>
 800810a:	ea58 080a 	orrs.w	r8, r8, sl
 800810e:	d172      	bne.n	80081f6 <_strtod_l+0x8be>
 8008110:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008114:	2b00      	cmp	r3, #0
 8008116:	d16e      	bne.n	80081f6 <_strtod_l+0x8be>
 8008118:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800811c:	0d1b      	lsrs	r3, r3, #20
 800811e:	051b      	lsls	r3, r3, #20
 8008120:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008124:	d967      	bls.n	80081f6 <_strtod_l+0x8be>
 8008126:	6963      	ldr	r3, [r4, #20]
 8008128:	b913      	cbnz	r3, 8008130 <_strtod_l+0x7f8>
 800812a:	6923      	ldr	r3, [r4, #16]
 800812c:	2b01      	cmp	r3, #1
 800812e:	dd62      	ble.n	80081f6 <_strtod_l+0x8be>
 8008130:	4621      	mov	r1, r4
 8008132:	2201      	movs	r2, #1
 8008134:	9805      	ldr	r0, [sp, #20]
 8008136:	f7ff f98d 	bl	8007454 <__lshift>
 800813a:	4629      	mov	r1, r5
 800813c:	4604      	mov	r4, r0
 800813e:	f7ff f9f5 	bl	800752c <__mcmp>
 8008142:	2800      	cmp	r0, #0
 8008144:	dd57      	ble.n	80081f6 <_strtod_l+0x8be>
 8008146:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800814a:	9a06      	ldr	r2, [sp, #24]
 800814c:	0d1b      	lsrs	r3, r3, #20
 800814e:	051b      	lsls	r3, r3, #20
 8008150:	2a00      	cmp	r2, #0
 8008152:	d06e      	beq.n	8008232 <_strtod_l+0x8fa>
 8008154:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008158:	d86b      	bhi.n	8008232 <_strtod_l+0x8fa>
 800815a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800815e:	f67f ae99 	bls.w	8007e94 <_strtod_l+0x55c>
 8008162:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8008190 <_strtod_l+0x858>
 8008166:	ec4b ab16 	vmov	d6, sl, fp
 800816a:	4b0d      	ldr	r3, [pc, #52]	@ (80081a0 <_strtod_l+0x868>)
 800816c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008170:	ee17 2a90 	vmov	r2, s15
 8008174:	4013      	ands	r3, r2
 8008176:	ec5b ab17 	vmov	sl, fp, d7
 800817a:	2b00      	cmp	r3, #0
 800817c:	f47f ae01 	bne.w	8007d82 <_strtod_l+0x44a>
 8008180:	9a05      	ldr	r2, [sp, #20]
 8008182:	2322      	movs	r3, #34	@ 0x22
 8008184:	6013      	str	r3, [r2, #0]
 8008186:	e5fc      	b.n	8007d82 <_strtod_l+0x44a>
 8008188:	ffc00000 	.word	0xffc00000
 800818c:	41dfffff 	.word	0x41dfffff
 8008190:	00000000 	.word	0x00000000
 8008194:	39500000 	.word	0x39500000
 8008198:	08009b10 	.word	0x08009b10
 800819c:	fffffc02 	.word	0xfffffc02
 80081a0:	7ff00000 	.word	0x7ff00000
 80081a4:	46d9      	mov	r9, fp
 80081a6:	d15d      	bne.n	8008264 <_strtod_l+0x92c>
 80081a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80081ac:	f1b8 0f00 	cmp.w	r8, #0
 80081b0:	d02a      	beq.n	8008208 <_strtod_l+0x8d0>
 80081b2:	4aa9      	ldr	r2, [pc, #676]	@ (8008458 <_strtod_l+0xb20>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d12a      	bne.n	800820e <_strtod_l+0x8d6>
 80081b8:	9b06      	ldr	r3, [sp, #24]
 80081ba:	4652      	mov	r2, sl
 80081bc:	b1fb      	cbz	r3, 80081fe <_strtod_l+0x8c6>
 80081be:	4ba7      	ldr	r3, [pc, #668]	@ (800845c <_strtod_l+0xb24>)
 80081c0:	ea0b 0303 	and.w	r3, fp, r3
 80081c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80081c8:	f04f 31ff 	mov.w	r1, #4294967295
 80081cc:	d81a      	bhi.n	8008204 <_strtod_l+0x8cc>
 80081ce:	0d1b      	lsrs	r3, r3, #20
 80081d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80081d4:	fa01 f303 	lsl.w	r3, r1, r3
 80081d8:	429a      	cmp	r2, r3
 80081da:	d118      	bne.n	800820e <_strtod_l+0x8d6>
 80081dc:	4ba0      	ldr	r3, [pc, #640]	@ (8008460 <_strtod_l+0xb28>)
 80081de:	4599      	cmp	r9, r3
 80081e0:	d102      	bne.n	80081e8 <_strtod_l+0x8b0>
 80081e2:	3201      	adds	r2, #1
 80081e4:	f43f adc2 	beq.w	8007d6c <_strtod_l+0x434>
 80081e8:	4b9c      	ldr	r3, [pc, #624]	@ (800845c <_strtod_l+0xb24>)
 80081ea:	ea09 0303 	and.w	r3, r9, r3
 80081ee:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 80081f2:	f04f 0a00 	mov.w	sl, #0
 80081f6:	9b06      	ldr	r3, [sp, #24]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1b2      	bne.n	8008162 <_strtod_l+0x82a>
 80081fc:	e5c1      	b.n	8007d82 <_strtod_l+0x44a>
 80081fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008202:	e7e9      	b.n	80081d8 <_strtod_l+0x8a0>
 8008204:	460b      	mov	r3, r1
 8008206:	e7e7      	b.n	80081d8 <_strtod_l+0x8a0>
 8008208:	ea53 030a 	orrs.w	r3, r3, sl
 800820c:	d09b      	beq.n	8008146 <_strtod_l+0x80e>
 800820e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008210:	b1c3      	cbz	r3, 8008244 <_strtod_l+0x90c>
 8008212:	ea13 0f09 	tst.w	r3, r9
 8008216:	d0ee      	beq.n	80081f6 <_strtod_l+0x8be>
 8008218:	9a06      	ldr	r2, [sp, #24]
 800821a:	4650      	mov	r0, sl
 800821c:	4659      	mov	r1, fp
 800821e:	f1b8 0f00 	cmp.w	r8, #0
 8008222:	d013      	beq.n	800824c <_strtod_l+0x914>
 8008224:	f7ff fb6d 	bl	8007902 <sulp>
 8008228:	ee39 7b00 	vadd.f64	d7, d9, d0
 800822c:	ec5b ab17 	vmov	sl, fp, d7
 8008230:	e7e1      	b.n	80081f6 <_strtod_l+0x8be>
 8008232:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008236:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800823a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800823e:	f04f 3aff 	mov.w	sl, #4294967295
 8008242:	e7d8      	b.n	80081f6 <_strtod_l+0x8be>
 8008244:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008246:	ea13 0f0a 	tst.w	r3, sl
 800824a:	e7e4      	b.n	8008216 <_strtod_l+0x8de>
 800824c:	f7ff fb59 	bl	8007902 <sulp>
 8008250:	ee39 0b40 	vsub.f64	d0, d9, d0
 8008254:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8008258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800825c:	ec5b ab10 	vmov	sl, fp, d0
 8008260:	d1c9      	bne.n	80081f6 <_strtod_l+0x8be>
 8008262:	e617      	b.n	8007e94 <_strtod_l+0x55c>
 8008264:	4629      	mov	r1, r5
 8008266:	4620      	mov	r0, r4
 8008268:	f7ff fad8 	bl	800781c <__ratio>
 800826c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8008270:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008278:	d85d      	bhi.n	8008336 <_strtod_l+0x9fe>
 800827a:	f1b8 0f00 	cmp.w	r8, #0
 800827e:	d164      	bne.n	800834a <_strtod_l+0xa12>
 8008280:	f1ba 0f00 	cmp.w	sl, #0
 8008284:	d14b      	bne.n	800831e <_strtod_l+0x9e6>
 8008286:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800828a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800828e:	2b00      	cmp	r3, #0
 8008290:	d160      	bne.n	8008354 <_strtod_l+0xa1c>
 8008292:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8008296:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800829a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800829e:	d401      	bmi.n	80082a4 <_strtod_l+0x96c>
 80082a0:	ee20 8b08 	vmul.f64	d8, d0, d8
 80082a4:	eeb1 ab48 	vneg.f64	d10, d8
 80082a8:	486c      	ldr	r0, [pc, #432]	@ (800845c <_strtod_l+0xb24>)
 80082aa:	496e      	ldr	r1, [pc, #440]	@ (8008464 <_strtod_l+0xb2c>)
 80082ac:	ea09 0700 	and.w	r7, r9, r0
 80082b0:	428f      	cmp	r7, r1
 80082b2:	ec53 2b1a 	vmov	r2, r3, d10
 80082b6:	d17d      	bne.n	80083b4 <_strtod_l+0xa7c>
 80082b8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 80082bc:	ec4b ab1c 	vmov	d12, sl, fp
 80082c0:	eeb0 0b4c 	vmov.f64	d0, d12
 80082c4:	f7ff f9e2 	bl	800768c <__ulp>
 80082c8:	4864      	ldr	r0, [pc, #400]	@ (800845c <_strtod_l+0xb24>)
 80082ca:	eea0 cb0a 	vfma.f64	d12, d0, d10
 80082ce:	ee1c 3a90 	vmov	r3, s25
 80082d2:	4a65      	ldr	r2, [pc, #404]	@ (8008468 <_strtod_l+0xb30>)
 80082d4:	ea03 0100 	and.w	r1, r3, r0
 80082d8:	4291      	cmp	r1, r2
 80082da:	ec5b ab1c 	vmov	sl, fp, d12
 80082de:	d93c      	bls.n	800835a <_strtod_l+0xa22>
 80082e0:	ee19 2a90 	vmov	r2, s19
 80082e4:	4b5e      	ldr	r3, [pc, #376]	@ (8008460 <_strtod_l+0xb28>)
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d104      	bne.n	80082f4 <_strtod_l+0x9bc>
 80082ea:	ee19 3a10 	vmov	r3, s18
 80082ee:	3301      	adds	r3, #1
 80082f0:	f43f ad3c 	beq.w	8007d6c <_strtod_l+0x434>
 80082f4:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8008460 <_strtod_l+0xb28>
 80082f8:	f04f 3aff 	mov.w	sl, #4294967295
 80082fc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80082fe:	9805      	ldr	r0, [sp, #20]
 8008300:	f7fe fe98 	bl	8007034 <_Bfree>
 8008304:	9805      	ldr	r0, [sp, #20]
 8008306:	4631      	mov	r1, r6
 8008308:	f7fe fe94 	bl	8007034 <_Bfree>
 800830c:	9805      	ldr	r0, [sp, #20]
 800830e:	4629      	mov	r1, r5
 8008310:	f7fe fe90 	bl	8007034 <_Bfree>
 8008314:	9805      	ldr	r0, [sp, #20]
 8008316:	4621      	mov	r1, r4
 8008318:	f7fe fe8c 	bl	8007034 <_Bfree>
 800831c:	e627      	b.n	8007f6e <_strtod_l+0x636>
 800831e:	f1ba 0f01 	cmp.w	sl, #1
 8008322:	d103      	bne.n	800832c <_strtod_l+0x9f4>
 8008324:	f1bb 0f00 	cmp.w	fp, #0
 8008328:	f43f adb4 	beq.w	8007e94 <_strtod_l+0x55c>
 800832c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8008330:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8008334:	e7b8      	b.n	80082a8 <_strtod_l+0x970>
 8008336:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800833a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800833e:	f1b8 0f00 	cmp.w	r8, #0
 8008342:	d0af      	beq.n	80082a4 <_strtod_l+0x96c>
 8008344:	eeb0 ab48 	vmov.f64	d10, d8
 8008348:	e7ae      	b.n	80082a8 <_strtod_l+0x970>
 800834a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800834e:	eeb0 8b4a 	vmov.f64	d8, d10
 8008352:	e7a9      	b.n	80082a8 <_strtod_l+0x970>
 8008354:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8008358:	e7a6      	b.n	80082a8 <_strtod_l+0x970>
 800835a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800835e:	9b06      	ldr	r3, [sp, #24]
 8008360:	46d9      	mov	r9, fp
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1ca      	bne.n	80082fc <_strtod_l+0x9c4>
 8008366:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800836a:	0d1b      	lsrs	r3, r3, #20
 800836c:	051b      	lsls	r3, r3, #20
 800836e:	429f      	cmp	r7, r3
 8008370:	d1c4      	bne.n	80082fc <_strtod_l+0x9c4>
 8008372:	ec51 0b18 	vmov	r0, r1, d8
 8008376:	f7f8 f9c7 	bl	8000708 <__aeabi_d2lz>
 800837a:	f7f8 f997 	bl	80006ac <__aeabi_l2d>
 800837e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8008382:	ec41 0b17 	vmov	d7, r0, r1
 8008386:	ea49 090a 	orr.w	r9, r9, sl
 800838a:	ea59 0908 	orrs.w	r9, r9, r8
 800838e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8008392:	d03c      	beq.n	800840e <_strtod_l+0xad6>
 8008394:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8008440 <_strtod_l+0xb08>
 8008398:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800839c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083a0:	f53f acef 	bmi.w	8007d82 <_strtod_l+0x44a>
 80083a4:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8008448 <_strtod_l+0xb10>
 80083a8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80083ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083b0:	dda4      	ble.n	80082fc <_strtod_l+0x9c4>
 80083b2:	e4e6      	b.n	8007d82 <_strtod_l+0x44a>
 80083b4:	9906      	ldr	r1, [sp, #24]
 80083b6:	b1e1      	cbz	r1, 80083f2 <_strtod_l+0xaba>
 80083b8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 80083bc:	d819      	bhi.n	80083f2 <_strtod_l+0xaba>
 80083be:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80083c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083c6:	d811      	bhi.n	80083ec <_strtod_l+0xab4>
 80083c8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80083cc:	ee18 3a10 	vmov	r3, s16
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	bf38      	it	cc
 80083d4:	2301      	movcc	r3, #1
 80083d6:	ee08 3a10 	vmov	s16, r3
 80083da:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80083de:	f1b8 0f00 	cmp.w	r8, #0
 80083e2:	d111      	bne.n	8008408 <_strtod_l+0xad0>
 80083e4:	eeb1 7b48 	vneg.f64	d7, d8
 80083e8:	ec53 2b17 	vmov	r2, r3, d7
 80083ec:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 80083f0:	1bcb      	subs	r3, r1, r7
 80083f2:	eeb0 0b49 	vmov.f64	d0, d9
 80083f6:	ec43 2b1a 	vmov	d10, r2, r3
 80083fa:	f7ff f947 	bl	800768c <__ulp>
 80083fe:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8008402:	ec5b ab19 	vmov	sl, fp, d9
 8008406:	e7aa      	b.n	800835e <_strtod_l+0xa26>
 8008408:	eeb0 7b48 	vmov.f64	d7, d8
 800840c:	e7ec      	b.n	80083e8 <_strtod_l+0xab0>
 800840e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8008450 <_strtod_l+0xb18>
 8008412:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800841a:	f57f af6f 	bpl.w	80082fc <_strtod_l+0x9c4>
 800841e:	e4b0      	b.n	8007d82 <_strtod_l+0x44a>
 8008420:	2300      	movs	r3, #0
 8008422:	9308      	str	r3, [sp, #32]
 8008424:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008426:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008428:	6013      	str	r3, [r2, #0]
 800842a:	f7ff bac4 	b.w	80079b6 <_strtod_l+0x7e>
 800842e:	2a65      	cmp	r2, #101	@ 0x65
 8008430:	f43f abbf 	beq.w	8007bb2 <_strtod_l+0x27a>
 8008434:	2a45      	cmp	r2, #69	@ 0x45
 8008436:	f43f abbc 	beq.w	8007bb2 <_strtod_l+0x27a>
 800843a:	2101      	movs	r1, #1
 800843c:	f7ff bbf4 	b.w	8007c28 <_strtod_l+0x2f0>
 8008440:	94a03595 	.word	0x94a03595
 8008444:	3fdfffff 	.word	0x3fdfffff
 8008448:	35afe535 	.word	0x35afe535
 800844c:	3fe00000 	.word	0x3fe00000
 8008450:	94a03595 	.word	0x94a03595
 8008454:	3fcfffff 	.word	0x3fcfffff
 8008458:	000fffff 	.word	0x000fffff
 800845c:	7ff00000 	.word	0x7ff00000
 8008460:	7fefffff 	.word	0x7fefffff
 8008464:	7fe00000 	.word	0x7fe00000
 8008468:	7c9fffff 	.word	0x7c9fffff

0800846c <_strtod_r>:
 800846c:	4b01      	ldr	r3, [pc, #4]	@ (8008474 <_strtod_r+0x8>)
 800846e:	f7ff ba63 	b.w	8007938 <_strtod_l>
 8008472:	bf00      	nop
 8008474:	24000284 	.word	0x24000284

08008478 <_strtol_l.isra.0>:
 8008478:	2b24      	cmp	r3, #36	@ 0x24
 800847a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800847e:	4686      	mov	lr, r0
 8008480:	4690      	mov	r8, r2
 8008482:	d801      	bhi.n	8008488 <_strtol_l.isra.0+0x10>
 8008484:	2b01      	cmp	r3, #1
 8008486:	d106      	bne.n	8008496 <_strtol_l.isra.0+0x1e>
 8008488:	f7fd fe78 	bl	800617c <__errno>
 800848c:	2316      	movs	r3, #22
 800848e:	6003      	str	r3, [r0, #0]
 8008490:	2000      	movs	r0, #0
 8008492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008496:	4834      	ldr	r0, [pc, #208]	@ (8008568 <_strtol_l.isra.0+0xf0>)
 8008498:	460d      	mov	r5, r1
 800849a:	462a      	mov	r2, r5
 800849c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80084a0:	5d06      	ldrb	r6, [r0, r4]
 80084a2:	f016 0608 	ands.w	r6, r6, #8
 80084a6:	d1f8      	bne.n	800849a <_strtol_l.isra.0+0x22>
 80084a8:	2c2d      	cmp	r4, #45	@ 0x2d
 80084aa:	d110      	bne.n	80084ce <_strtol_l.isra.0+0x56>
 80084ac:	782c      	ldrb	r4, [r5, #0]
 80084ae:	2601      	movs	r6, #1
 80084b0:	1c95      	adds	r5, r2, #2
 80084b2:	f033 0210 	bics.w	r2, r3, #16
 80084b6:	d115      	bne.n	80084e4 <_strtol_l.isra.0+0x6c>
 80084b8:	2c30      	cmp	r4, #48	@ 0x30
 80084ba:	d10d      	bne.n	80084d8 <_strtol_l.isra.0+0x60>
 80084bc:	782a      	ldrb	r2, [r5, #0]
 80084be:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80084c2:	2a58      	cmp	r2, #88	@ 0x58
 80084c4:	d108      	bne.n	80084d8 <_strtol_l.isra.0+0x60>
 80084c6:	786c      	ldrb	r4, [r5, #1]
 80084c8:	3502      	adds	r5, #2
 80084ca:	2310      	movs	r3, #16
 80084cc:	e00a      	b.n	80084e4 <_strtol_l.isra.0+0x6c>
 80084ce:	2c2b      	cmp	r4, #43	@ 0x2b
 80084d0:	bf04      	itt	eq
 80084d2:	782c      	ldrbeq	r4, [r5, #0]
 80084d4:	1c95      	addeq	r5, r2, #2
 80084d6:	e7ec      	b.n	80084b2 <_strtol_l.isra.0+0x3a>
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1f6      	bne.n	80084ca <_strtol_l.isra.0+0x52>
 80084dc:	2c30      	cmp	r4, #48	@ 0x30
 80084de:	bf14      	ite	ne
 80084e0:	230a      	movne	r3, #10
 80084e2:	2308      	moveq	r3, #8
 80084e4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80084e8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80084ec:	2200      	movs	r2, #0
 80084ee:	fbbc f9f3 	udiv	r9, ip, r3
 80084f2:	4610      	mov	r0, r2
 80084f4:	fb03 ca19 	mls	sl, r3, r9, ip
 80084f8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80084fc:	2f09      	cmp	r7, #9
 80084fe:	d80f      	bhi.n	8008520 <_strtol_l.isra.0+0xa8>
 8008500:	463c      	mov	r4, r7
 8008502:	42a3      	cmp	r3, r4
 8008504:	dd1b      	ble.n	800853e <_strtol_l.isra.0+0xc6>
 8008506:	1c57      	adds	r7, r2, #1
 8008508:	d007      	beq.n	800851a <_strtol_l.isra.0+0xa2>
 800850a:	4581      	cmp	r9, r0
 800850c:	d314      	bcc.n	8008538 <_strtol_l.isra.0+0xc0>
 800850e:	d101      	bne.n	8008514 <_strtol_l.isra.0+0x9c>
 8008510:	45a2      	cmp	sl, r4
 8008512:	db11      	blt.n	8008538 <_strtol_l.isra.0+0xc0>
 8008514:	fb00 4003 	mla	r0, r0, r3, r4
 8008518:	2201      	movs	r2, #1
 800851a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800851e:	e7eb      	b.n	80084f8 <_strtol_l.isra.0+0x80>
 8008520:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008524:	2f19      	cmp	r7, #25
 8008526:	d801      	bhi.n	800852c <_strtol_l.isra.0+0xb4>
 8008528:	3c37      	subs	r4, #55	@ 0x37
 800852a:	e7ea      	b.n	8008502 <_strtol_l.isra.0+0x8a>
 800852c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008530:	2f19      	cmp	r7, #25
 8008532:	d804      	bhi.n	800853e <_strtol_l.isra.0+0xc6>
 8008534:	3c57      	subs	r4, #87	@ 0x57
 8008536:	e7e4      	b.n	8008502 <_strtol_l.isra.0+0x8a>
 8008538:	f04f 32ff 	mov.w	r2, #4294967295
 800853c:	e7ed      	b.n	800851a <_strtol_l.isra.0+0xa2>
 800853e:	1c53      	adds	r3, r2, #1
 8008540:	d108      	bne.n	8008554 <_strtol_l.isra.0+0xdc>
 8008542:	2322      	movs	r3, #34	@ 0x22
 8008544:	f8ce 3000 	str.w	r3, [lr]
 8008548:	4660      	mov	r0, ip
 800854a:	f1b8 0f00 	cmp.w	r8, #0
 800854e:	d0a0      	beq.n	8008492 <_strtol_l.isra.0+0x1a>
 8008550:	1e69      	subs	r1, r5, #1
 8008552:	e006      	b.n	8008562 <_strtol_l.isra.0+0xea>
 8008554:	b106      	cbz	r6, 8008558 <_strtol_l.isra.0+0xe0>
 8008556:	4240      	negs	r0, r0
 8008558:	f1b8 0f00 	cmp.w	r8, #0
 800855c:	d099      	beq.n	8008492 <_strtol_l.isra.0+0x1a>
 800855e:	2a00      	cmp	r2, #0
 8008560:	d1f6      	bne.n	8008550 <_strtol_l.isra.0+0xd8>
 8008562:	f8c8 1000 	str.w	r1, [r8]
 8008566:	e794      	b.n	8008492 <_strtol_l.isra.0+0x1a>
 8008568:	08009b39 	.word	0x08009b39

0800856c <_strtol_r>:
 800856c:	f7ff bf84 	b.w	8008478 <_strtol_l.isra.0>

08008570 <__ssputs_r>:
 8008570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008574:	688e      	ldr	r6, [r1, #8]
 8008576:	461f      	mov	r7, r3
 8008578:	42be      	cmp	r6, r7
 800857a:	680b      	ldr	r3, [r1, #0]
 800857c:	4682      	mov	sl, r0
 800857e:	460c      	mov	r4, r1
 8008580:	4690      	mov	r8, r2
 8008582:	d82d      	bhi.n	80085e0 <__ssputs_r+0x70>
 8008584:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008588:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800858c:	d026      	beq.n	80085dc <__ssputs_r+0x6c>
 800858e:	6965      	ldr	r5, [r4, #20]
 8008590:	6909      	ldr	r1, [r1, #16]
 8008592:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008596:	eba3 0901 	sub.w	r9, r3, r1
 800859a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800859e:	1c7b      	adds	r3, r7, #1
 80085a0:	444b      	add	r3, r9
 80085a2:	106d      	asrs	r5, r5, #1
 80085a4:	429d      	cmp	r5, r3
 80085a6:	bf38      	it	cc
 80085a8:	461d      	movcc	r5, r3
 80085aa:	0553      	lsls	r3, r2, #21
 80085ac:	d527      	bpl.n	80085fe <__ssputs_r+0x8e>
 80085ae:	4629      	mov	r1, r5
 80085b0:	f7fe fc74 	bl	8006e9c <_malloc_r>
 80085b4:	4606      	mov	r6, r0
 80085b6:	b360      	cbz	r0, 8008612 <__ssputs_r+0xa2>
 80085b8:	6921      	ldr	r1, [r4, #16]
 80085ba:	464a      	mov	r2, r9
 80085bc:	f000 fa18 	bl	80089f0 <memcpy>
 80085c0:	89a3      	ldrh	r3, [r4, #12]
 80085c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80085c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085ca:	81a3      	strh	r3, [r4, #12]
 80085cc:	6126      	str	r6, [r4, #16]
 80085ce:	6165      	str	r5, [r4, #20]
 80085d0:	444e      	add	r6, r9
 80085d2:	eba5 0509 	sub.w	r5, r5, r9
 80085d6:	6026      	str	r6, [r4, #0]
 80085d8:	60a5      	str	r5, [r4, #8]
 80085da:	463e      	mov	r6, r7
 80085dc:	42be      	cmp	r6, r7
 80085de:	d900      	bls.n	80085e2 <__ssputs_r+0x72>
 80085e0:	463e      	mov	r6, r7
 80085e2:	6820      	ldr	r0, [r4, #0]
 80085e4:	4632      	mov	r2, r6
 80085e6:	4641      	mov	r1, r8
 80085e8:	f000 f9c6 	bl	8008978 <memmove>
 80085ec:	68a3      	ldr	r3, [r4, #8]
 80085ee:	1b9b      	subs	r3, r3, r6
 80085f0:	60a3      	str	r3, [r4, #8]
 80085f2:	6823      	ldr	r3, [r4, #0]
 80085f4:	4433      	add	r3, r6
 80085f6:	6023      	str	r3, [r4, #0]
 80085f8:	2000      	movs	r0, #0
 80085fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085fe:	462a      	mov	r2, r5
 8008600:	f000 fd8b 	bl	800911a <_realloc_r>
 8008604:	4606      	mov	r6, r0
 8008606:	2800      	cmp	r0, #0
 8008608:	d1e0      	bne.n	80085cc <__ssputs_r+0x5c>
 800860a:	6921      	ldr	r1, [r4, #16]
 800860c:	4650      	mov	r0, sl
 800860e:	f7fe fbd1 	bl	8006db4 <_free_r>
 8008612:	230c      	movs	r3, #12
 8008614:	f8ca 3000 	str.w	r3, [sl]
 8008618:	89a3      	ldrh	r3, [r4, #12]
 800861a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800861e:	81a3      	strh	r3, [r4, #12]
 8008620:	f04f 30ff 	mov.w	r0, #4294967295
 8008624:	e7e9      	b.n	80085fa <__ssputs_r+0x8a>
	...

08008628 <_svfiprintf_r>:
 8008628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800862c:	4698      	mov	r8, r3
 800862e:	898b      	ldrh	r3, [r1, #12]
 8008630:	061b      	lsls	r3, r3, #24
 8008632:	b09d      	sub	sp, #116	@ 0x74
 8008634:	4607      	mov	r7, r0
 8008636:	460d      	mov	r5, r1
 8008638:	4614      	mov	r4, r2
 800863a:	d510      	bpl.n	800865e <_svfiprintf_r+0x36>
 800863c:	690b      	ldr	r3, [r1, #16]
 800863e:	b973      	cbnz	r3, 800865e <_svfiprintf_r+0x36>
 8008640:	2140      	movs	r1, #64	@ 0x40
 8008642:	f7fe fc2b 	bl	8006e9c <_malloc_r>
 8008646:	6028      	str	r0, [r5, #0]
 8008648:	6128      	str	r0, [r5, #16]
 800864a:	b930      	cbnz	r0, 800865a <_svfiprintf_r+0x32>
 800864c:	230c      	movs	r3, #12
 800864e:	603b      	str	r3, [r7, #0]
 8008650:	f04f 30ff 	mov.w	r0, #4294967295
 8008654:	b01d      	add	sp, #116	@ 0x74
 8008656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800865a:	2340      	movs	r3, #64	@ 0x40
 800865c:	616b      	str	r3, [r5, #20]
 800865e:	2300      	movs	r3, #0
 8008660:	9309      	str	r3, [sp, #36]	@ 0x24
 8008662:	2320      	movs	r3, #32
 8008664:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008668:	f8cd 800c 	str.w	r8, [sp, #12]
 800866c:	2330      	movs	r3, #48	@ 0x30
 800866e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800880c <_svfiprintf_r+0x1e4>
 8008672:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008676:	f04f 0901 	mov.w	r9, #1
 800867a:	4623      	mov	r3, r4
 800867c:	469a      	mov	sl, r3
 800867e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008682:	b10a      	cbz	r2, 8008688 <_svfiprintf_r+0x60>
 8008684:	2a25      	cmp	r2, #37	@ 0x25
 8008686:	d1f9      	bne.n	800867c <_svfiprintf_r+0x54>
 8008688:	ebba 0b04 	subs.w	fp, sl, r4
 800868c:	d00b      	beq.n	80086a6 <_svfiprintf_r+0x7e>
 800868e:	465b      	mov	r3, fp
 8008690:	4622      	mov	r2, r4
 8008692:	4629      	mov	r1, r5
 8008694:	4638      	mov	r0, r7
 8008696:	f7ff ff6b 	bl	8008570 <__ssputs_r>
 800869a:	3001      	adds	r0, #1
 800869c:	f000 80a7 	beq.w	80087ee <_svfiprintf_r+0x1c6>
 80086a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086a2:	445a      	add	r2, fp
 80086a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80086a6:	f89a 3000 	ldrb.w	r3, [sl]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	f000 809f 	beq.w	80087ee <_svfiprintf_r+0x1c6>
 80086b0:	2300      	movs	r3, #0
 80086b2:	f04f 32ff 	mov.w	r2, #4294967295
 80086b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086ba:	f10a 0a01 	add.w	sl, sl, #1
 80086be:	9304      	str	r3, [sp, #16]
 80086c0:	9307      	str	r3, [sp, #28]
 80086c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80086c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80086c8:	4654      	mov	r4, sl
 80086ca:	2205      	movs	r2, #5
 80086cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086d0:	484e      	ldr	r0, [pc, #312]	@ (800880c <_svfiprintf_r+0x1e4>)
 80086d2:	f7f7 fe05 	bl	80002e0 <memchr>
 80086d6:	9a04      	ldr	r2, [sp, #16]
 80086d8:	b9d8      	cbnz	r0, 8008712 <_svfiprintf_r+0xea>
 80086da:	06d0      	lsls	r0, r2, #27
 80086dc:	bf44      	itt	mi
 80086de:	2320      	movmi	r3, #32
 80086e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086e4:	0711      	lsls	r1, r2, #28
 80086e6:	bf44      	itt	mi
 80086e8:	232b      	movmi	r3, #43	@ 0x2b
 80086ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086ee:	f89a 3000 	ldrb.w	r3, [sl]
 80086f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80086f4:	d015      	beq.n	8008722 <_svfiprintf_r+0xfa>
 80086f6:	9a07      	ldr	r2, [sp, #28]
 80086f8:	4654      	mov	r4, sl
 80086fa:	2000      	movs	r0, #0
 80086fc:	f04f 0c0a 	mov.w	ip, #10
 8008700:	4621      	mov	r1, r4
 8008702:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008706:	3b30      	subs	r3, #48	@ 0x30
 8008708:	2b09      	cmp	r3, #9
 800870a:	d94b      	bls.n	80087a4 <_svfiprintf_r+0x17c>
 800870c:	b1b0      	cbz	r0, 800873c <_svfiprintf_r+0x114>
 800870e:	9207      	str	r2, [sp, #28]
 8008710:	e014      	b.n	800873c <_svfiprintf_r+0x114>
 8008712:	eba0 0308 	sub.w	r3, r0, r8
 8008716:	fa09 f303 	lsl.w	r3, r9, r3
 800871a:	4313      	orrs	r3, r2
 800871c:	9304      	str	r3, [sp, #16]
 800871e:	46a2      	mov	sl, r4
 8008720:	e7d2      	b.n	80086c8 <_svfiprintf_r+0xa0>
 8008722:	9b03      	ldr	r3, [sp, #12]
 8008724:	1d19      	adds	r1, r3, #4
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	9103      	str	r1, [sp, #12]
 800872a:	2b00      	cmp	r3, #0
 800872c:	bfbb      	ittet	lt
 800872e:	425b      	neglt	r3, r3
 8008730:	f042 0202 	orrlt.w	r2, r2, #2
 8008734:	9307      	strge	r3, [sp, #28]
 8008736:	9307      	strlt	r3, [sp, #28]
 8008738:	bfb8      	it	lt
 800873a:	9204      	strlt	r2, [sp, #16]
 800873c:	7823      	ldrb	r3, [r4, #0]
 800873e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008740:	d10a      	bne.n	8008758 <_svfiprintf_r+0x130>
 8008742:	7863      	ldrb	r3, [r4, #1]
 8008744:	2b2a      	cmp	r3, #42	@ 0x2a
 8008746:	d132      	bne.n	80087ae <_svfiprintf_r+0x186>
 8008748:	9b03      	ldr	r3, [sp, #12]
 800874a:	1d1a      	adds	r2, r3, #4
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	9203      	str	r2, [sp, #12]
 8008750:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008754:	3402      	adds	r4, #2
 8008756:	9305      	str	r3, [sp, #20]
 8008758:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800881c <_svfiprintf_r+0x1f4>
 800875c:	7821      	ldrb	r1, [r4, #0]
 800875e:	2203      	movs	r2, #3
 8008760:	4650      	mov	r0, sl
 8008762:	f7f7 fdbd 	bl	80002e0 <memchr>
 8008766:	b138      	cbz	r0, 8008778 <_svfiprintf_r+0x150>
 8008768:	9b04      	ldr	r3, [sp, #16]
 800876a:	eba0 000a 	sub.w	r0, r0, sl
 800876e:	2240      	movs	r2, #64	@ 0x40
 8008770:	4082      	lsls	r2, r0
 8008772:	4313      	orrs	r3, r2
 8008774:	3401      	adds	r4, #1
 8008776:	9304      	str	r3, [sp, #16]
 8008778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800877c:	4824      	ldr	r0, [pc, #144]	@ (8008810 <_svfiprintf_r+0x1e8>)
 800877e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008782:	2206      	movs	r2, #6
 8008784:	f7f7 fdac 	bl	80002e0 <memchr>
 8008788:	2800      	cmp	r0, #0
 800878a:	d036      	beq.n	80087fa <_svfiprintf_r+0x1d2>
 800878c:	4b21      	ldr	r3, [pc, #132]	@ (8008814 <_svfiprintf_r+0x1ec>)
 800878e:	bb1b      	cbnz	r3, 80087d8 <_svfiprintf_r+0x1b0>
 8008790:	9b03      	ldr	r3, [sp, #12]
 8008792:	3307      	adds	r3, #7
 8008794:	f023 0307 	bic.w	r3, r3, #7
 8008798:	3308      	adds	r3, #8
 800879a:	9303      	str	r3, [sp, #12]
 800879c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800879e:	4433      	add	r3, r6
 80087a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80087a2:	e76a      	b.n	800867a <_svfiprintf_r+0x52>
 80087a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80087a8:	460c      	mov	r4, r1
 80087aa:	2001      	movs	r0, #1
 80087ac:	e7a8      	b.n	8008700 <_svfiprintf_r+0xd8>
 80087ae:	2300      	movs	r3, #0
 80087b0:	3401      	adds	r4, #1
 80087b2:	9305      	str	r3, [sp, #20]
 80087b4:	4619      	mov	r1, r3
 80087b6:	f04f 0c0a 	mov.w	ip, #10
 80087ba:	4620      	mov	r0, r4
 80087bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087c0:	3a30      	subs	r2, #48	@ 0x30
 80087c2:	2a09      	cmp	r2, #9
 80087c4:	d903      	bls.n	80087ce <_svfiprintf_r+0x1a6>
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d0c6      	beq.n	8008758 <_svfiprintf_r+0x130>
 80087ca:	9105      	str	r1, [sp, #20]
 80087cc:	e7c4      	b.n	8008758 <_svfiprintf_r+0x130>
 80087ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80087d2:	4604      	mov	r4, r0
 80087d4:	2301      	movs	r3, #1
 80087d6:	e7f0      	b.n	80087ba <_svfiprintf_r+0x192>
 80087d8:	ab03      	add	r3, sp, #12
 80087da:	9300      	str	r3, [sp, #0]
 80087dc:	462a      	mov	r2, r5
 80087de:	4b0e      	ldr	r3, [pc, #56]	@ (8008818 <_svfiprintf_r+0x1f0>)
 80087e0:	a904      	add	r1, sp, #16
 80087e2:	4638      	mov	r0, r7
 80087e4:	f7fc fd5c 	bl	80052a0 <_printf_float>
 80087e8:	1c42      	adds	r2, r0, #1
 80087ea:	4606      	mov	r6, r0
 80087ec:	d1d6      	bne.n	800879c <_svfiprintf_r+0x174>
 80087ee:	89ab      	ldrh	r3, [r5, #12]
 80087f0:	065b      	lsls	r3, r3, #25
 80087f2:	f53f af2d 	bmi.w	8008650 <_svfiprintf_r+0x28>
 80087f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087f8:	e72c      	b.n	8008654 <_svfiprintf_r+0x2c>
 80087fa:	ab03      	add	r3, sp, #12
 80087fc:	9300      	str	r3, [sp, #0]
 80087fe:	462a      	mov	r2, r5
 8008800:	4b05      	ldr	r3, [pc, #20]	@ (8008818 <_svfiprintf_r+0x1f0>)
 8008802:	a904      	add	r1, sp, #16
 8008804:	4638      	mov	r0, r7
 8008806:	f7fc ffd3 	bl	80057b0 <_printf_i>
 800880a:	e7ed      	b.n	80087e8 <_svfiprintf_r+0x1c0>
 800880c:	08009931 	.word	0x08009931
 8008810:	0800993b 	.word	0x0800993b
 8008814:	080052a1 	.word	0x080052a1
 8008818:	08008571 	.word	0x08008571
 800881c:	08009937 	.word	0x08009937

08008820 <__sflush_r>:
 8008820:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008828:	0716      	lsls	r6, r2, #28
 800882a:	4605      	mov	r5, r0
 800882c:	460c      	mov	r4, r1
 800882e:	d454      	bmi.n	80088da <__sflush_r+0xba>
 8008830:	684b      	ldr	r3, [r1, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	dc02      	bgt.n	800883c <__sflush_r+0x1c>
 8008836:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008838:	2b00      	cmp	r3, #0
 800883a:	dd48      	ble.n	80088ce <__sflush_r+0xae>
 800883c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800883e:	2e00      	cmp	r6, #0
 8008840:	d045      	beq.n	80088ce <__sflush_r+0xae>
 8008842:	2300      	movs	r3, #0
 8008844:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008848:	682f      	ldr	r7, [r5, #0]
 800884a:	6a21      	ldr	r1, [r4, #32]
 800884c:	602b      	str	r3, [r5, #0]
 800884e:	d030      	beq.n	80088b2 <__sflush_r+0x92>
 8008850:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008852:	89a3      	ldrh	r3, [r4, #12]
 8008854:	0759      	lsls	r1, r3, #29
 8008856:	d505      	bpl.n	8008864 <__sflush_r+0x44>
 8008858:	6863      	ldr	r3, [r4, #4]
 800885a:	1ad2      	subs	r2, r2, r3
 800885c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800885e:	b10b      	cbz	r3, 8008864 <__sflush_r+0x44>
 8008860:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008862:	1ad2      	subs	r2, r2, r3
 8008864:	2300      	movs	r3, #0
 8008866:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008868:	6a21      	ldr	r1, [r4, #32]
 800886a:	4628      	mov	r0, r5
 800886c:	47b0      	blx	r6
 800886e:	1c43      	adds	r3, r0, #1
 8008870:	89a3      	ldrh	r3, [r4, #12]
 8008872:	d106      	bne.n	8008882 <__sflush_r+0x62>
 8008874:	6829      	ldr	r1, [r5, #0]
 8008876:	291d      	cmp	r1, #29
 8008878:	d82b      	bhi.n	80088d2 <__sflush_r+0xb2>
 800887a:	4a2a      	ldr	r2, [pc, #168]	@ (8008924 <__sflush_r+0x104>)
 800887c:	40ca      	lsrs	r2, r1
 800887e:	07d6      	lsls	r6, r2, #31
 8008880:	d527      	bpl.n	80088d2 <__sflush_r+0xb2>
 8008882:	2200      	movs	r2, #0
 8008884:	6062      	str	r2, [r4, #4]
 8008886:	04d9      	lsls	r1, r3, #19
 8008888:	6922      	ldr	r2, [r4, #16]
 800888a:	6022      	str	r2, [r4, #0]
 800888c:	d504      	bpl.n	8008898 <__sflush_r+0x78>
 800888e:	1c42      	adds	r2, r0, #1
 8008890:	d101      	bne.n	8008896 <__sflush_r+0x76>
 8008892:	682b      	ldr	r3, [r5, #0]
 8008894:	b903      	cbnz	r3, 8008898 <__sflush_r+0x78>
 8008896:	6560      	str	r0, [r4, #84]	@ 0x54
 8008898:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800889a:	602f      	str	r7, [r5, #0]
 800889c:	b1b9      	cbz	r1, 80088ce <__sflush_r+0xae>
 800889e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088a2:	4299      	cmp	r1, r3
 80088a4:	d002      	beq.n	80088ac <__sflush_r+0x8c>
 80088a6:	4628      	mov	r0, r5
 80088a8:	f7fe fa84 	bl	8006db4 <_free_r>
 80088ac:	2300      	movs	r3, #0
 80088ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80088b0:	e00d      	b.n	80088ce <__sflush_r+0xae>
 80088b2:	2301      	movs	r3, #1
 80088b4:	4628      	mov	r0, r5
 80088b6:	47b0      	blx	r6
 80088b8:	4602      	mov	r2, r0
 80088ba:	1c50      	adds	r0, r2, #1
 80088bc:	d1c9      	bne.n	8008852 <__sflush_r+0x32>
 80088be:	682b      	ldr	r3, [r5, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d0c6      	beq.n	8008852 <__sflush_r+0x32>
 80088c4:	2b1d      	cmp	r3, #29
 80088c6:	d001      	beq.n	80088cc <__sflush_r+0xac>
 80088c8:	2b16      	cmp	r3, #22
 80088ca:	d11e      	bne.n	800890a <__sflush_r+0xea>
 80088cc:	602f      	str	r7, [r5, #0]
 80088ce:	2000      	movs	r0, #0
 80088d0:	e022      	b.n	8008918 <__sflush_r+0xf8>
 80088d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088d6:	b21b      	sxth	r3, r3
 80088d8:	e01b      	b.n	8008912 <__sflush_r+0xf2>
 80088da:	690f      	ldr	r7, [r1, #16]
 80088dc:	2f00      	cmp	r7, #0
 80088de:	d0f6      	beq.n	80088ce <__sflush_r+0xae>
 80088e0:	0793      	lsls	r3, r2, #30
 80088e2:	680e      	ldr	r6, [r1, #0]
 80088e4:	bf08      	it	eq
 80088e6:	694b      	ldreq	r3, [r1, #20]
 80088e8:	600f      	str	r7, [r1, #0]
 80088ea:	bf18      	it	ne
 80088ec:	2300      	movne	r3, #0
 80088ee:	eba6 0807 	sub.w	r8, r6, r7
 80088f2:	608b      	str	r3, [r1, #8]
 80088f4:	f1b8 0f00 	cmp.w	r8, #0
 80088f8:	dde9      	ble.n	80088ce <__sflush_r+0xae>
 80088fa:	6a21      	ldr	r1, [r4, #32]
 80088fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80088fe:	4643      	mov	r3, r8
 8008900:	463a      	mov	r2, r7
 8008902:	4628      	mov	r0, r5
 8008904:	47b0      	blx	r6
 8008906:	2800      	cmp	r0, #0
 8008908:	dc08      	bgt.n	800891c <__sflush_r+0xfc>
 800890a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800890e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008912:	81a3      	strh	r3, [r4, #12]
 8008914:	f04f 30ff 	mov.w	r0, #4294967295
 8008918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800891c:	4407      	add	r7, r0
 800891e:	eba8 0800 	sub.w	r8, r8, r0
 8008922:	e7e7      	b.n	80088f4 <__sflush_r+0xd4>
 8008924:	20400001 	.word	0x20400001

08008928 <_fflush_r>:
 8008928:	b538      	push	{r3, r4, r5, lr}
 800892a:	690b      	ldr	r3, [r1, #16]
 800892c:	4605      	mov	r5, r0
 800892e:	460c      	mov	r4, r1
 8008930:	b913      	cbnz	r3, 8008938 <_fflush_r+0x10>
 8008932:	2500      	movs	r5, #0
 8008934:	4628      	mov	r0, r5
 8008936:	bd38      	pop	{r3, r4, r5, pc}
 8008938:	b118      	cbz	r0, 8008942 <_fflush_r+0x1a>
 800893a:	6a03      	ldr	r3, [r0, #32]
 800893c:	b90b      	cbnz	r3, 8008942 <_fflush_r+0x1a>
 800893e:	f7fd fae7 	bl	8005f10 <__sinit>
 8008942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d0f3      	beq.n	8008932 <_fflush_r+0xa>
 800894a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800894c:	07d0      	lsls	r0, r2, #31
 800894e:	d404      	bmi.n	800895a <_fflush_r+0x32>
 8008950:	0599      	lsls	r1, r3, #22
 8008952:	d402      	bmi.n	800895a <_fflush_r+0x32>
 8008954:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008956:	f7fd fc3c 	bl	80061d2 <__retarget_lock_acquire_recursive>
 800895a:	4628      	mov	r0, r5
 800895c:	4621      	mov	r1, r4
 800895e:	f7ff ff5f 	bl	8008820 <__sflush_r>
 8008962:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008964:	07da      	lsls	r2, r3, #31
 8008966:	4605      	mov	r5, r0
 8008968:	d4e4      	bmi.n	8008934 <_fflush_r+0xc>
 800896a:	89a3      	ldrh	r3, [r4, #12]
 800896c:	059b      	lsls	r3, r3, #22
 800896e:	d4e1      	bmi.n	8008934 <_fflush_r+0xc>
 8008970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008972:	f7fd fc2f 	bl	80061d4 <__retarget_lock_release_recursive>
 8008976:	e7dd      	b.n	8008934 <_fflush_r+0xc>

08008978 <memmove>:
 8008978:	4288      	cmp	r0, r1
 800897a:	b510      	push	{r4, lr}
 800897c:	eb01 0402 	add.w	r4, r1, r2
 8008980:	d902      	bls.n	8008988 <memmove+0x10>
 8008982:	4284      	cmp	r4, r0
 8008984:	4623      	mov	r3, r4
 8008986:	d807      	bhi.n	8008998 <memmove+0x20>
 8008988:	1e43      	subs	r3, r0, #1
 800898a:	42a1      	cmp	r1, r4
 800898c:	d008      	beq.n	80089a0 <memmove+0x28>
 800898e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008992:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008996:	e7f8      	b.n	800898a <memmove+0x12>
 8008998:	4402      	add	r2, r0
 800899a:	4601      	mov	r1, r0
 800899c:	428a      	cmp	r2, r1
 800899e:	d100      	bne.n	80089a2 <memmove+0x2a>
 80089a0:	bd10      	pop	{r4, pc}
 80089a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089aa:	e7f7      	b.n	800899c <memmove+0x24>

080089ac <strncmp>:
 80089ac:	b510      	push	{r4, lr}
 80089ae:	b16a      	cbz	r2, 80089cc <strncmp+0x20>
 80089b0:	3901      	subs	r1, #1
 80089b2:	1884      	adds	r4, r0, r2
 80089b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80089bc:	429a      	cmp	r2, r3
 80089be:	d103      	bne.n	80089c8 <strncmp+0x1c>
 80089c0:	42a0      	cmp	r0, r4
 80089c2:	d001      	beq.n	80089c8 <strncmp+0x1c>
 80089c4:	2a00      	cmp	r2, #0
 80089c6:	d1f5      	bne.n	80089b4 <strncmp+0x8>
 80089c8:	1ad0      	subs	r0, r2, r3
 80089ca:	bd10      	pop	{r4, pc}
 80089cc:	4610      	mov	r0, r2
 80089ce:	e7fc      	b.n	80089ca <strncmp+0x1e>

080089d0 <_sbrk_r>:
 80089d0:	b538      	push	{r3, r4, r5, lr}
 80089d2:	4d06      	ldr	r5, [pc, #24]	@ (80089ec <_sbrk_r+0x1c>)
 80089d4:	2300      	movs	r3, #0
 80089d6:	4604      	mov	r4, r0
 80089d8:	4608      	mov	r0, r1
 80089da:	602b      	str	r3, [r5, #0]
 80089dc:	f7f8 fce6 	bl	80013ac <_sbrk>
 80089e0:	1c43      	adds	r3, r0, #1
 80089e2:	d102      	bne.n	80089ea <_sbrk_r+0x1a>
 80089e4:	682b      	ldr	r3, [r5, #0]
 80089e6:	b103      	cbz	r3, 80089ea <_sbrk_r+0x1a>
 80089e8:	6023      	str	r3, [r4, #0]
 80089ea:	bd38      	pop	{r3, r4, r5, pc}
 80089ec:	240009fc 	.word	0x240009fc

080089f0 <memcpy>:
 80089f0:	440a      	add	r2, r1
 80089f2:	4291      	cmp	r1, r2
 80089f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80089f8:	d100      	bne.n	80089fc <memcpy+0xc>
 80089fa:	4770      	bx	lr
 80089fc:	b510      	push	{r4, lr}
 80089fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a06:	4291      	cmp	r1, r2
 8008a08:	d1f9      	bne.n	80089fe <memcpy+0xe>
 8008a0a:	bd10      	pop	{r4, pc}
 8008a0c:	0000      	movs	r0, r0
	...

08008a10 <nan>:
 8008a10:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008a18 <nan+0x8>
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop
 8008a18:	00000000 	.word	0x00000000
 8008a1c:	7ff80000 	.word	0x7ff80000

08008a20 <__assert_func>:
 8008a20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a22:	4614      	mov	r4, r2
 8008a24:	461a      	mov	r2, r3
 8008a26:	4b09      	ldr	r3, [pc, #36]	@ (8008a4c <__assert_func+0x2c>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4605      	mov	r5, r0
 8008a2c:	68d8      	ldr	r0, [r3, #12]
 8008a2e:	b14c      	cbz	r4, 8008a44 <__assert_func+0x24>
 8008a30:	4b07      	ldr	r3, [pc, #28]	@ (8008a50 <__assert_func+0x30>)
 8008a32:	9100      	str	r1, [sp, #0]
 8008a34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a38:	4906      	ldr	r1, [pc, #24]	@ (8008a54 <__assert_func+0x34>)
 8008a3a:	462b      	mov	r3, r5
 8008a3c:	f000 fba8 	bl	8009190 <fiprintf>
 8008a40:	f000 fbb8 	bl	80091b4 <abort>
 8008a44:	4b04      	ldr	r3, [pc, #16]	@ (8008a58 <__assert_func+0x38>)
 8008a46:	461c      	mov	r4, r3
 8008a48:	e7f3      	b.n	8008a32 <__assert_func+0x12>
 8008a4a:	bf00      	nop
 8008a4c:	24000234 	.word	0x24000234
 8008a50:	0800994a 	.word	0x0800994a
 8008a54:	08009957 	.word	0x08009957
 8008a58:	08009985 	.word	0x08009985

08008a5c <_calloc_r>:
 8008a5c:	b570      	push	{r4, r5, r6, lr}
 8008a5e:	fba1 5402 	umull	r5, r4, r1, r2
 8008a62:	b934      	cbnz	r4, 8008a72 <_calloc_r+0x16>
 8008a64:	4629      	mov	r1, r5
 8008a66:	f7fe fa19 	bl	8006e9c <_malloc_r>
 8008a6a:	4606      	mov	r6, r0
 8008a6c:	b928      	cbnz	r0, 8008a7a <_calloc_r+0x1e>
 8008a6e:	4630      	mov	r0, r6
 8008a70:	bd70      	pop	{r4, r5, r6, pc}
 8008a72:	220c      	movs	r2, #12
 8008a74:	6002      	str	r2, [r0, #0]
 8008a76:	2600      	movs	r6, #0
 8008a78:	e7f9      	b.n	8008a6e <_calloc_r+0x12>
 8008a7a:	462a      	mov	r2, r5
 8008a7c:	4621      	mov	r1, r4
 8008a7e:	f7fd fb18 	bl	80060b2 <memset>
 8008a82:	e7f4      	b.n	8008a6e <_calloc_r+0x12>

08008a84 <rshift>:
 8008a84:	6903      	ldr	r3, [r0, #16]
 8008a86:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008a8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a8e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008a92:	f100 0414 	add.w	r4, r0, #20
 8008a96:	dd45      	ble.n	8008b24 <rshift+0xa0>
 8008a98:	f011 011f 	ands.w	r1, r1, #31
 8008a9c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008aa0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008aa4:	d10c      	bne.n	8008ac0 <rshift+0x3c>
 8008aa6:	f100 0710 	add.w	r7, r0, #16
 8008aaa:	4629      	mov	r1, r5
 8008aac:	42b1      	cmp	r1, r6
 8008aae:	d334      	bcc.n	8008b1a <rshift+0x96>
 8008ab0:	1a9b      	subs	r3, r3, r2
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	1eea      	subs	r2, r5, #3
 8008ab6:	4296      	cmp	r6, r2
 8008ab8:	bf38      	it	cc
 8008aba:	2300      	movcc	r3, #0
 8008abc:	4423      	add	r3, r4
 8008abe:	e015      	b.n	8008aec <rshift+0x68>
 8008ac0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008ac4:	f1c1 0820 	rsb	r8, r1, #32
 8008ac8:	40cf      	lsrs	r7, r1
 8008aca:	f105 0e04 	add.w	lr, r5, #4
 8008ace:	46a1      	mov	r9, r4
 8008ad0:	4576      	cmp	r6, lr
 8008ad2:	46f4      	mov	ip, lr
 8008ad4:	d815      	bhi.n	8008b02 <rshift+0x7e>
 8008ad6:	1a9a      	subs	r2, r3, r2
 8008ad8:	0092      	lsls	r2, r2, #2
 8008ada:	3a04      	subs	r2, #4
 8008adc:	3501      	adds	r5, #1
 8008ade:	42ae      	cmp	r6, r5
 8008ae0:	bf38      	it	cc
 8008ae2:	2200      	movcc	r2, #0
 8008ae4:	18a3      	adds	r3, r4, r2
 8008ae6:	50a7      	str	r7, [r4, r2]
 8008ae8:	b107      	cbz	r7, 8008aec <rshift+0x68>
 8008aea:	3304      	adds	r3, #4
 8008aec:	1b1a      	subs	r2, r3, r4
 8008aee:	42a3      	cmp	r3, r4
 8008af0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008af4:	bf08      	it	eq
 8008af6:	2300      	moveq	r3, #0
 8008af8:	6102      	str	r2, [r0, #16]
 8008afa:	bf08      	it	eq
 8008afc:	6143      	streq	r3, [r0, #20]
 8008afe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b02:	f8dc c000 	ldr.w	ip, [ip]
 8008b06:	fa0c fc08 	lsl.w	ip, ip, r8
 8008b0a:	ea4c 0707 	orr.w	r7, ip, r7
 8008b0e:	f849 7b04 	str.w	r7, [r9], #4
 8008b12:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008b16:	40cf      	lsrs	r7, r1
 8008b18:	e7da      	b.n	8008ad0 <rshift+0x4c>
 8008b1a:	f851 cb04 	ldr.w	ip, [r1], #4
 8008b1e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008b22:	e7c3      	b.n	8008aac <rshift+0x28>
 8008b24:	4623      	mov	r3, r4
 8008b26:	e7e1      	b.n	8008aec <rshift+0x68>

08008b28 <__hexdig_fun>:
 8008b28:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008b2c:	2b09      	cmp	r3, #9
 8008b2e:	d802      	bhi.n	8008b36 <__hexdig_fun+0xe>
 8008b30:	3820      	subs	r0, #32
 8008b32:	b2c0      	uxtb	r0, r0
 8008b34:	4770      	bx	lr
 8008b36:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008b3a:	2b05      	cmp	r3, #5
 8008b3c:	d801      	bhi.n	8008b42 <__hexdig_fun+0x1a>
 8008b3e:	3847      	subs	r0, #71	@ 0x47
 8008b40:	e7f7      	b.n	8008b32 <__hexdig_fun+0xa>
 8008b42:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008b46:	2b05      	cmp	r3, #5
 8008b48:	d801      	bhi.n	8008b4e <__hexdig_fun+0x26>
 8008b4a:	3827      	subs	r0, #39	@ 0x27
 8008b4c:	e7f1      	b.n	8008b32 <__hexdig_fun+0xa>
 8008b4e:	2000      	movs	r0, #0
 8008b50:	4770      	bx	lr
	...

08008b54 <__gethex>:
 8008b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b58:	b085      	sub	sp, #20
 8008b5a:	468a      	mov	sl, r1
 8008b5c:	9302      	str	r3, [sp, #8]
 8008b5e:	680b      	ldr	r3, [r1, #0]
 8008b60:	9001      	str	r0, [sp, #4]
 8008b62:	4690      	mov	r8, r2
 8008b64:	1c9c      	adds	r4, r3, #2
 8008b66:	46a1      	mov	r9, r4
 8008b68:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008b6c:	2830      	cmp	r0, #48	@ 0x30
 8008b6e:	d0fa      	beq.n	8008b66 <__gethex+0x12>
 8008b70:	eba9 0303 	sub.w	r3, r9, r3
 8008b74:	f1a3 0b02 	sub.w	fp, r3, #2
 8008b78:	f7ff ffd6 	bl	8008b28 <__hexdig_fun>
 8008b7c:	4605      	mov	r5, r0
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	d168      	bne.n	8008c54 <__gethex+0x100>
 8008b82:	49a0      	ldr	r1, [pc, #640]	@ (8008e04 <__gethex+0x2b0>)
 8008b84:	2201      	movs	r2, #1
 8008b86:	4648      	mov	r0, r9
 8008b88:	f7ff ff10 	bl	80089ac <strncmp>
 8008b8c:	4607      	mov	r7, r0
 8008b8e:	2800      	cmp	r0, #0
 8008b90:	d167      	bne.n	8008c62 <__gethex+0x10e>
 8008b92:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008b96:	4626      	mov	r6, r4
 8008b98:	f7ff ffc6 	bl	8008b28 <__hexdig_fun>
 8008b9c:	2800      	cmp	r0, #0
 8008b9e:	d062      	beq.n	8008c66 <__gethex+0x112>
 8008ba0:	4623      	mov	r3, r4
 8008ba2:	7818      	ldrb	r0, [r3, #0]
 8008ba4:	2830      	cmp	r0, #48	@ 0x30
 8008ba6:	4699      	mov	r9, r3
 8008ba8:	f103 0301 	add.w	r3, r3, #1
 8008bac:	d0f9      	beq.n	8008ba2 <__gethex+0x4e>
 8008bae:	f7ff ffbb 	bl	8008b28 <__hexdig_fun>
 8008bb2:	fab0 f580 	clz	r5, r0
 8008bb6:	096d      	lsrs	r5, r5, #5
 8008bb8:	f04f 0b01 	mov.w	fp, #1
 8008bbc:	464a      	mov	r2, r9
 8008bbe:	4616      	mov	r6, r2
 8008bc0:	3201      	adds	r2, #1
 8008bc2:	7830      	ldrb	r0, [r6, #0]
 8008bc4:	f7ff ffb0 	bl	8008b28 <__hexdig_fun>
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	d1f8      	bne.n	8008bbe <__gethex+0x6a>
 8008bcc:	498d      	ldr	r1, [pc, #564]	@ (8008e04 <__gethex+0x2b0>)
 8008bce:	2201      	movs	r2, #1
 8008bd0:	4630      	mov	r0, r6
 8008bd2:	f7ff feeb 	bl	80089ac <strncmp>
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	d13f      	bne.n	8008c5a <__gethex+0x106>
 8008bda:	b944      	cbnz	r4, 8008bee <__gethex+0x9a>
 8008bdc:	1c74      	adds	r4, r6, #1
 8008bde:	4622      	mov	r2, r4
 8008be0:	4616      	mov	r6, r2
 8008be2:	3201      	adds	r2, #1
 8008be4:	7830      	ldrb	r0, [r6, #0]
 8008be6:	f7ff ff9f 	bl	8008b28 <__hexdig_fun>
 8008bea:	2800      	cmp	r0, #0
 8008bec:	d1f8      	bne.n	8008be0 <__gethex+0x8c>
 8008bee:	1ba4      	subs	r4, r4, r6
 8008bf0:	00a7      	lsls	r7, r4, #2
 8008bf2:	7833      	ldrb	r3, [r6, #0]
 8008bf4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008bf8:	2b50      	cmp	r3, #80	@ 0x50
 8008bfa:	d13e      	bne.n	8008c7a <__gethex+0x126>
 8008bfc:	7873      	ldrb	r3, [r6, #1]
 8008bfe:	2b2b      	cmp	r3, #43	@ 0x2b
 8008c00:	d033      	beq.n	8008c6a <__gethex+0x116>
 8008c02:	2b2d      	cmp	r3, #45	@ 0x2d
 8008c04:	d034      	beq.n	8008c70 <__gethex+0x11c>
 8008c06:	1c71      	adds	r1, r6, #1
 8008c08:	2400      	movs	r4, #0
 8008c0a:	7808      	ldrb	r0, [r1, #0]
 8008c0c:	f7ff ff8c 	bl	8008b28 <__hexdig_fun>
 8008c10:	1e43      	subs	r3, r0, #1
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	2b18      	cmp	r3, #24
 8008c16:	d830      	bhi.n	8008c7a <__gethex+0x126>
 8008c18:	f1a0 0210 	sub.w	r2, r0, #16
 8008c1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008c20:	f7ff ff82 	bl	8008b28 <__hexdig_fun>
 8008c24:	f100 3cff 	add.w	ip, r0, #4294967295
 8008c28:	fa5f fc8c 	uxtb.w	ip, ip
 8008c2c:	f1bc 0f18 	cmp.w	ip, #24
 8008c30:	f04f 030a 	mov.w	r3, #10
 8008c34:	d91e      	bls.n	8008c74 <__gethex+0x120>
 8008c36:	b104      	cbz	r4, 8008c3a <__gethex+0xe6>
 8008c38:	4252      	negs	r2, r2
 8008c3a:	4417      	add	r7, r2
 8008c3c:	f8ca 1000 	str.w	r1, [sl]
 8008c40:	b1ed      	cbz	r5, 8008c7e <__gethex+0x12a>
 8008c42:	f1bb 0f00 	cmp.w	fp, #0
 8008c46:	bf0c      	ite	eq
 8008c48:	2506      	moveq	r5, #6
 8008c4a:	2500      	movne	r5, #0
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	b005      	add	sp, #20
 8008c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c54:	2500      	movs	r5, #0
 8008c56:	462c      	mov	r4, r5
 8008c58:	e7b0      	b.n	8008bbc <__gethex+0x68>
 8008c5a:	2c00      	cmp	r4, #0
 8008c5c:	d1c7      	bne.n	8008bee <__gethex+0x9a>
 8008c5e:	4627      	mov	r7, r4
 8008c60:	e7c7      	b.n	8008bf2 <__gethex+0x9e>
 8008c62:	464e      	mov	r6, r9
 8008c64:	462f      	mov	r7, r5
 8008c66:	2501      	movs	r5, #1
 8008c68:	e7c3      	b.n	8008bf2 <__gethex+0x9e>
 8008c6a:	2400      	movs	r4, #0
 8008c6c:	1cb1      	adds	r1, r6, #2
 8008c6e:	e7cc      	b.n	8008c0a <__gethex+0xb6>
 8008c70:	2401      	movs	r4, #1
 8008c72:	e7fb      	b.n	8008c6c <__gethex+0x118>
 8008c74:	fb03 0002 	mla	r0, r3, r2, r0
 8008c78:	e7ce      	b.n	8008c18 <__gethex+0xc4>
 8008c7a:	4631      	mov	r1, r6
 8008c7c:	e7de      	b.n	8008c3c <__gethex+0xe8>
 8008c7e:	eba6 0309 	sub.w	r3, r6, r9
 8008c82:	3b01      	subs	r3, #1
 8008c84:	4629      	mov	r1, r5
 8008c86:	2b07      	cmp	r3, #7
 8008c88:	dc0a      	bgt.n	8008ca0 <__gethex+0x14c>
 8008c8a:	9801      	ldr	r0, [sp, #4]
 8008c8c:	f7fe f992 	bl	8006fb4 <_Balloc>
 8008c90:	4604      	mov	r4, r0
 8008c92:	b940      	cbnz	r0, 8008ca6 <__gethex+0x152>
 8008c94:	4b5c      	ldr	r3, [pc, #368]	@ (8008e08 <__gethex+0x2b4>)
 8008c96:	4602      	mov	r2, r0
 8008c98:	21e4      	movs	r1, #228	@ 0xe4
 8008c9a:	485c      	ldr	r0, [pc, #368]	@ (8008e0c <__gethex+0x2b8>)
 8008c9c:	f7ff fec0 	bl	8008a20 <__assert_func>
 8008ca0:	3101      	adds	r1, #1
 8008ca2:	105b      	asrs	r3, r3, #1
 8008ca4:	e7ef      	b.n	8008c86 <__gethex+0x132>
 8008ca6:	f100 0a14 	add.w	sl, r0, #20
 8008caa:	2300      	movs	r3, #0
 8008cac:	4655      	mov	r5, sl
 8008cae:	469b      	mov	fp, r3
 8008cb0:	45b1      	cmp	r9, r6
 8008cb2:	d337      	bcc.n	8008d24 <__gethex+0x1d0>
 8008cb4:	f845 bb04 	str.w	fp, [r5], #4
 8008cb8:	eba5 050a 	sub.w	r5, r5, sl
 8008cbc:	10ad      	asrs	r5, r5, #2
 8008cbe:	6125      	str	r5, [r4, #16]
 8008cc0:	4658      	mov	r0, fp
 8008cc2:	f7fe fa69 	bl	8007198 <__hi0bits>
 8008cc6:	016d      	lsls	r5, r5, #5
 8008cc8:	f8d8 6000 	ldr.w	r6, [r8]
 8008ccc:	1a2d      	subs	r5, r5, r0
 8008cce:	42b5      	cmp	r5, r6
 8008cd0:	dd54      	ble.n	8008d7c <__gethex+0x228>
 8008cd2:	1bad      	subs	r5, r5, r6
 8008cd4:	4629      	mov	r1, r5
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	f7fe fdf2 	bl	80078c0 <__any_on>
 8008cdc:	4681      	mov	r9, r0
 8008cde:	b178      	cbz	r0, 8008d00 <__gethex+0x1ac>
 8008ce0:	1e6b      	subs	r3, r5, #1
 8008ce2:	1159      	asrs	r1, r3, #5
 8008ce4:	f003 021f 	and.w	r2, r3, #31
 8008ce8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008cec:	f04f 0901 	mov.w	r9, #1
 8008cf0:	fa09 f202 	lsl.w	r2, r9, r2
 8008cf4:	420a      	tst	r2, r1
 8008cf6:	d003      	beq.n	8008d00 <__gethex+0x1ac>
 8008cf8:	454b      	cmp	r3, r9
 8008cfa:	dc36      	bgt.n	8008d6a <__gethex+0x216>
 8008cfc:	f04f 0902 	mov.w	r9, #2
 8008d00:	4629      	mov	r1, r5
 8008d02:	4620      	mov	r0, r4
 8008d04:	f7ff febe 	bl	8008a84 <rshift>
 8008d08:	442f      	add	r7, r5
 8008d0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d0e:	42bb      	cmp	r3, r7
 8008d10:	da42      	bge.n	8008d98 <__gethex+0x244>
 8008d12:	9801      	ldr	r0, [sp, #4]
 8008d14:	4621      	mov	r1, r4
 8008d16:	f7fe f98d 	bl	8007034 <_Bfree>
 8008d1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	6013      	str	r3, [r2, #0]
 8008d20:	25a3      	movs	r5, #163	@ 0xa3
 8008d22:	e793      	b.n	8008c4c <__gethex+0xf8>
 8008d24:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008d28:	2a2e      	cmp	r2, #46	@ 0x2e
 8008d2a:	d012      	beq.n	8008d52 <__gethex+0x1fe>
 8008d2c:	2b20      	cmp	r3, #32
 8008d2e:	d104      	bne.n	8008d3a <__gethex+0x1e6>
 8008d30:	f845 bb04 	str.w	fp, [r5], #4
 8008d34:	f04f 0b00 	mov.w	fp, #0
 8008d38:	465b      	mov	r3, fp
 8008d3a:	7830      	ldrb	r0, [r6, #0]
 8008d3c:	9303      	str	r3, [sp, #12]
 8008d3e:	f7ff fef3 	bl	8008b28 <__hexdig_fun>
 8008d42:	9b03      	ldr	r3, [sp, #12]
 8008d44:	f000 000f 	and.w	r0, r0, #15
 8008d48:	4098      	lsls	r0, r3
 8008d4a:	ea4b 0b00 	orr.w	fp, fp, r0
 8008d4e:	3304      	adds	r3, #4
 8008d50:	e7ae      	b.n	8008cb0 <__gethex+0x15c>
 8008d52:	45b1      	cmp	r9, r6
 8008d54:	d8ea      	bhi.n	8008d2c <__gethex+0x1d8>
 8008d56:	492b      	ldr	r1, [pc, #172]	@ (8008e04 <__gethex+0x2b0>)
 8008d58:	9303      	str	r3, [sp, #12]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	4630      	mov	r0, r6
 8008d5e:	f7ff fe25 	bl	80089ac <strncmp>
 8008d62:	9b03      	ldr	r3, [sp, #12]
 8008d64:	2800      	cmp	r0, #0
 8008d66:	d1e1      	bne.n	8008d2c <__gethex+0x1d8>
 8008d68:	e7a2      	b.n	8008cb0 <__gethex+0x15c>
 8008d6a:	1ea9      	subs	r1, r5, #2
 8008d6c:	4620      	mov	r0, r4
 8008d6e:	f7fe fda7 	bl	80078c0 <__any_on>
 8008d72:	2800      	cmp	r0, #0
 8008d74:	d0c2      	beq.n	8008cfc <__gethex+0x1a8>
 8008d76:	f04f 0903 	mov.w	r9, #3
 8008d7a:	e7c1      	b.n	8008d00 <__gethex+0x1ac>
 8008d7c:	da09      	bge.n	8008d92 <__gethex+0x23e>
 8008d7e:	1b75      	subs	r5, r6, r5
 8008d80:	4621      	mov	r1, r4
 8008d82:	9801      	ldr	r0, [sp, #4]
 8008d84:	462a      	mov	r2, r5
 8008d86:	f7fe fb65 	bl	8007454 <__lshift>
 8008d8a:	1b7f      	subs	r7, r7, r5
 8008d8c:	4604      	mov	r4, r0
 8008d8e:	f100 0a14 	add.w	sl, r0, #20
 8008d92:	f04f 0900 	mov.w	r9, #0
 8008d96:	e7b8      	b.n	8008d0a <__gethex+0x1b6>
 8008d98:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008d9c:	42bd      	cmp	r5, r7
 8008d9e:	dd6f      	ble.n	8008e80 <__gethex+0x32c>
 8008da0:	1bed      	subs	r5, r5, r7
 8008da2:	42ae      	cmp	r6, r5
 8008da4:	dc34      	bgt.n	8008e10 <__gethex+0x2bc>
 8008da6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d022      	beq.n	8008df4 <__gethex+0x2a0>
 8008dae:	2b03      	cmp	r3, #3
 8008db0:	d024      	beq.n	8008dfc <__gethex+0x2a8>
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d115      	bne.n	8008de2 <__gethex+0x28e>
 8008db6:	42ae      	cmp	r6, r5
 8008db8:	d113      	bne.n	8008de2 <__gethex+0x28e>
 8008dba:	2e01      	cmp	r6, #1
 8008dbc:	d10b      	bne.n	8008dd6 <__gethex+0x282>
 8008dbe:	9a02      	ldr	r2, [sp, #8]
 8008dc0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008dc4:	6013      	str	r3, [r2, #0]
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	6123      	str	r3, [r4, #16]
 8008dca:	f8ca 3000 	str.w	r3, [sl]
 8008dce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dd0:	2562      	movs	r5, #98	@ 0x62
 8008dd2:	601c      	str	r4, [r3, #0]
 8008dd4:	e73a      	b.n	8008c4c <__gethex+0xf8>
 8008dd6:	1e71      	subs	r1, r6, #1
 8008dd8:	4620      	mov	r0, r4
 8008dda:	f7fe fd71 	bl	80078c0 <__any_on>
 8008dde:	2800      	cmp	r0, #0
 8008de0:	d1ed      	bne.n	8008dbe <__gethex+0x26a>
 8008de2:	9801      	ldr	r0, [sp, #4]
 8008de4:	4621      	mov	r1, r4
 8008de6:	f7fe f925 	bl	8007034 <_Bfree>
 8008dea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008dec:	2300      	movs	r3, #0
 8008dee:	6013      	str	r3, [r2, #0]
 8008df0:	2550      	movs	r5, #80	@ 0x50
 8008df2:	e72b      	b.n	8008c4c <__gethex+0xf8>
 8008df4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d1f3      	bne.n	8008de2 <__gethex+0x28e>
 8008dfa:	e7e0      	b.n	8008dbe <__gethex+0x26a>
 8008dfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d1dd      	bne.n	8008dbe <__gethex+0x26a>
 8008e02:	e7ee      	b.n	8008de2 <__gethex+0x28e>
 8008e04:	0800992f 	.word	0x0800992f
 8008e08:	080098c5 	.word	0x080098c5
 8008e0c:	08009986 	.word	0x08009986
 8008e10:	1e6f      	subs	r7, r5, #1
 8008e12:	f1b9 0f00 	cmp.w	r9, #0
 8008e16:	d130      	bne.n	8008e7a <__gethex+0x326>
 8008e18:	b127      	cbz	r7, 8008e24 <__gethex+0x2d0>
 8008e1a:	4639      	mov	r1, r7
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	f7fe fd4f 	bl	80078c0 <__any_on>
 8008e22:	4681      	mov	r9, r0
 8008e24:	117a      	asrs	r2, r7, #5
 8008e26:	2301      	movs	r3, #1
 8008e28:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008e2c:	f007 071f 	and.w	r7, r7, #31
 8008e30:	40bb      	lsls	r3, r7
 8008e32:	4213      	tst	r3, r2
 8008e34:	4629      	mov	r1, r5
 8008e36:	4620      	mov	r0, r4
 8008e38:	bf18      	it	ne
 8008e3a:	f049 0902 	orrne.w	r9, r9, #2
 8008e3e:	f7ff fe21 	bl	8008a84 <rshift>
 8008e42:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008e46:	1b76      	subs	r6, r6, r5
 8008e48:	2502      	movs	r5, #2
 8008e4a:	f1b9 0f00 	cmp.w	r9, #0
 8008e4e:	d047      	beq.n	8008ee0 <__gethex+0x38c>
 8008e50:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	d015      	beq.n	8008e84 <__gethex+0x330>
 8008e58:	2b03      	cmp	r3, #3
 8008e5a:	d017      	beq.n	8008e8c <__gethex+0x338>
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d109      	bne.n	8008e74 <__gethex+0x320>
 8008e60:	f019 0f02 	tst.w	r9, #2
 8008e64:	d006      	beq.n	8008e74 <__gethex+0x320>
 8008e66:	f8da 3000 	ldr.w	r3, [sl]
 8008e6a:	ea49 0903 	orr.w	r9, r9, r3
 8008e6e:	f019 0f01 	tst.w	r9, #1
 8008e72:	d10e      	bne.n	8008e92 <__gethex+0x33e>
 8008e74:	f045 0510 	orr.w	r5, r5, #16
 8008e78:	e032      	b.n	8008ee0 <__gethex+0x38c>
 8008e7a:	f04f 0901 	mov.w	r9, #1
 8008e7e:	e7d1      	b.n	8008e24 <__gethex+0x2d0>
 8008e80:	2501      	movs	r5, #1
 8008e82:	e7e2      	b.n	8008e4a <__gethex+0x2f6>
 8008e84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e86:	f1c3 0301 	rsb	r3, r3, #1
 8008e8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008e8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d0f0      	beq.n	8008e74 <__gethex+0x320>
 8008e92:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008e96:	f104 0314 	add.w	r3, r4, #20
 8008e9a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008e9e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008ea2:	f04f 0c00 	mov.w	ip, #0
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eac:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008eb0:	d01b      	beq.n	8008eea <__gethex+0x396>
 8008eb2:	3201      	adds	r2, #1
 8008eb4:	6002      	str	r2, [r0, #0]
 8008eb6:	2d02      	cmp	r5, #2
 8008eb8:	f104 0314 	add.w	r3, r4, #20
 8008ebc:	d13c      	bne.n	8008f38 <__gethex+0x3e4>
 8008ebe:	f8d8 2000 	ldr.w	r2, [r8]
 8008ec2:	3a01      	subs	r2, #1
 8008ec4:	42b2      	cmp	r2, r6
 8008ec6:	d109      	bne.n	8008edc <__gethex+0x388>
 8008ec8:	1171      	asrs	r1, r6, #5
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008ed0:	f006 061f 	and.w	r6, r6, #31
 8008ed4:	fa02 f606 	lsl.w	r6, r2, r6
 8008ed8:	421e      	tst	r6, r3
 8008eda:	d13a      	bne.n	8008f52 <__gethex+0x3fe>
 8008edc:	f045 0520 	orr.w	r5, r5, #32
 8008ee0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ee2:	601c      	str	r4, [r3, #0]
 8008ee4:	9b02      	ldr	r3, [sp, #8]
 8008ee6:	601f      	str	r7, [r3, #0]
 8008ee8:	e6b0      	b.n	8008c4c <__gethex+0xf8>
 8008eea:	4299      	cmp	r1, r3
 8008eec:	f843 cc04 	str.w	ip, [r3, #-4]
 8008ef0:	d8d9      	bhi.n	8008ea6 <__gethex+0x352>
 8008ef2:	68a3      	ldr	r3, [r4, #8]
 8008ef4:	459b      	cmp	fp, r3
 8008ef6:	db17      	blt.n	8008f28 <__gethex+0x3d4>
 8008ef8:	6861      	ldr	r1, [r4, #4]
 8008efa:	9801      	ldr	r0, [sp, #4]
 8008efc:	3101      	adds	r1, #1
 8008efe:	f7fe f859 	bl	8006fb4 <_Balloc>
 8008f02:	4681      	mov	r9, r0
 8008f04:	b918      	cbnz	r0, 8008f0e <__gethex+0x3ba>
 8008f06:	4b1a      	ldr	r3, [pc, #104]	@ (8008f70 <__gethex+0x41c>)
 8008f08:	4602      	mov	r2, r0
 8008f0a:	2184      	movs	r1, #132	@ 0x84
 8008f0c:	e6c5      	b.n	8008c9a <__gethex+0x146>
 8008f0e:	6922      	ldr	r2, [r4, #16]
 8008f10:	3202      	adds	r2, #2
 8008f12:	f104 010c 	add.w	r1, r4, #12
 8008f16:	0092      	lsls	r2, r2, #2
 8008f18:	300c      	adds	r0, #12
 8008f1a:	f7ff fd69 	bl	80089f0 <memcpy>
 8008f1e:	4621      	mov	r1, r4
 8008f20:	9801      	ldr	r0, [sp, #4]
 8008f22:	f7fe f887 	bl	8007034 <_Bfree>
 8008f26:	464c      	mov	r4, r9
 8008f28:	6923      	ldr	r3, [r4, #16]
 8008f2a:	1c5a      	adds	r2, r3, #1
 8008f2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008f30:	6122      	str	r2, [r4, #16]
 8008f32:	2201      	movs	r2, #1
 8008f34:	615a      	str	r2, [r3, #20]
 8008f36:	e7be      	b.n	8008eb6 <__gethex+0x362>
 8008f38:	6922      	ldr	r2, [r4, #16]
 8008f3a:	455a      	cmp	r2, fp
 8008f3c:	dd0b      	ble.n	8008f56 <__gethex+0x402>
 8008f3e:	2101      	movs	r1, #1
 8008f40:	4620      	mov	r0, r4
 8008f42:	f7ff fd9f 	bl	8008a84 <rshift>
 8008f46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f4a:	3701      	adds	r7, #1
 8008f4c:	42bb      	cmp	r3, r7
 8008f4e:	f6ff aee0 	blt.w	8008d12 <__gethex+0x1be>
 8008f52:	2501      	movs	r5, #1
 8008f54:	e7c2      	b.n	8008edc <__gethex+0x388>
 8008f56:	f016 061f 	ands.w	r6, r6, #31
 8008f5a:	d0fa      	beq.n	8008f52 <__gethex+0x3fe>
 8008f5c:	4453      	add	r3, sl
 8008f5e:	f1c6 0620 	rsb	r6, r6, #32
 8008f62:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008f66:	f7fe f917 	bl	8007198 <__hi0bits>
 8008f6a:	42b0      	cmp	r0, r6
 8008f6c:	dbe7      	blt.n	8008f3e <__gethex+0x3ea>
 8008f6e:	e7f0      	b.n	8008f52 <__gethex+0x3fe>
 8008f70:	080098c5 	.word	0x080098c5

08008f74 <L_shift>:
 8008f74:	f1c2 0208 	rsb	r2, r2, #8
 8008f78:	0092      	lsls	r2, r2, #2
 8008f7a:	b570      	push	{r4, r5, r6, lr}
 8008f7c:	f1c2 0620 	rsb	r6, r2, #32
 8008f80:	6843      	ldr	r3, [r0, #4]
 8008f82:	6804      	ldr	r4, [r0, #0]
 8008f84:	fa03 f506 	lsl.w	r5, r3, r6
 8008f88:	432c      	orrs	r4, r5
 8008f8a:	40d3      	lsrs	r3, r2
 8008f8c:	6004      	str	r4, [r0, #0]
 8008f8e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008f92:	4288      	cmp	r0, r1
 8008f94:	d3f4      	bcc.n	8008f80 <L_shift+0xc>
 8008f96:	bd70      	pop	{r4, r5, r6, pc}

08008f98 <__match>:
 8008f98:	b530      	push	{r4, r5, lr}
 8008f9a:	6803      	ldr	r3, [r0, #0]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fa2:	b914      	cbnz	r4, 8008faa <__match+0x12>
 8008fa4:	6003      	str	r3, [r0, #0]
 8008fa6:	2001      	movs	r0, #1
 8008fa8:	bd30      	pop	{r4, r5, pc}
 8008faa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008fb2:	2d19      	cmp	r5, #25
 8008fb4:	bf98      	it	ls
 8008fb6:	3220      	addls	r2, #32
 8008fb8:	42a2      	cmp	r2, r4
 8008fba:	d0f0      	beq.n	8008f9e <__match+0x6>
 8008fbc:	2000      	movs	r0, #0
 8008fbe:	e7f3      	b.n	8008fa8 <__match+0x10>

08008fc0 <__hexnan>:
 8008fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc4:	680b      	ldr	r3, [r1, #0]
 8008fc6:	6801      	ldr	r1, [r0, #0]
 8008fc8:	115e      	asrs	r6, r3, #5
 8008fca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008fce:	f013 031f 	ands.w	r3, r3, #31
 8008fd2:	b087      	sub	sp, #28
 8008fd4:	bf18      	it	ne
 8008fd6:	3604      	addne	r6, #4
 8008fd8:	2500      	movs	r5, #0
 8008fda:	1f37      	subs	r7, r6, #4
 8008fdc:	4682      	mov	sl, r0
 8008fde:	4690      	mov	r8, r2
 8008fe0:	9301      	str	r3, [sp, #4]
 8008fe2:	f846 5c04 	str.w	r5, [r6, #-4]
 8008fe6:	46b9      	mov	r9, r7
 8008fe8:	463c      	mov	r4, r7
 8008fea:	9502      	str	r5, [sp, #8]
 8008fec:	46ab      	mov	fp, r5
 8008fee:	784a      	ldrb	r2, [r1, #1]
 8008ff0:	1c4b      	adds	r3, r1, #1
 8008ff2:	9303      	str	r3, [sp, #12]
 8008ff4:	b342      	cbz	r2, 8009048 <__hexnan+0x88>
 8008ff6:	4610      	mov	r0, r2
 8008ff8:	9105      	str	r1, [sp, #20]
 8008ffa:	9204      	str	r2, [sp, #16]
 8008ffc:	f7ff fd94 	bl	8008b28 <__hexdig_fun>
 8009000:	2800      	cmp	r0, #0
 8009002:	d151      	bne.n	80090a8 <__hexnan+0xe8>
 8009004:	9a04      	ldr	r2, [sp, #16]
 8009006:	9905      	ldr	r1, [sp, #20]
 8009008:	2a20      	cmp	r2, #32
 800900a:	d818      	bhi.n	800903e <__hexnan+0x7e>
 800900c:	9b02      	ldr	r3, [sp, #8]
 800900e:	459b      	cmp	fp, r3
 8009010:	dd13      	ble.n	800903a <__hexnan+0x7a>
 8009012:	454c      	cmp	r4, r9
 8009014:	d206      	bcs.n	8009024 <__hexnan+0x64>
 8009016:	2d07      	cmp	r5, #7
 8009018:	dc04      	bgt.n	8009024 <__hexnan+0x64>
 800901a:	462a      	mov	r2, r5
 800901c:	4649      	mov	r1, r9
 800901e:	4620      	mov	r0, r4
 8009020:	f7ff ffa8 	bl	8008f74 <L_shift>
 8009024:	4544      	cmp	r4, r8
 8009026:	d952      	bls.n	80090ce <__hexnan+0x10e>
 8009028:	2300      	movs	r3, #0
 800902a:	f1a4 0904 	sub.w	r9, r4, #4
 800902e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009032:	f8cd b008 	str.w	fp, [sp, #8]
 8009036:	464c      	mov	r4, r9
 8009038:	461d      	mov	r5, r3
 800903a:	9903      	ldr	r1, [sp, #12]
 800903c:	e7d7      	b.n	8008fee <__hexnan+0x2e>
 800903e:	2a29      	cmp	r2, #41	@ 0x29
 8009040:	d157      	bne.n	80090f2 <__hexnan+0x132>
 8009042:	3102      	adds	r1, #2
 8009044:	f8ca 1000 	str.w	r1, [sl]
 8009048:	f1bb 0f00 	cmp.w	fp, #0
 800904c:	d051      	beq.n	80090f2 <__hexnan+0x132>
 800904e:	454c      	cmp	r4, r9
 8009050:	d206      	bcs.n	8009060 <__hexnan+0xa0>
 8009052:	2d07      	cmp	r5, #7
 8009054:	dc04      	bgt.n	8009060 <__hexnan+0xa0>
 8009056:	462a      	mov	r2, r5
 8009058:	4649      	mov	r1, r9
 800905a:	4620      	mov	r0, r4
 800905c:	f7ff ff8a 	bl	8008f74 <L_shift>
 8009060:	4544      	cmp	r4, r8
 8009062:	d936      	bls.n	80090d2 <__hexnan+0x112>
 8009064:	f1a8 0204 	sub.w	r2, r8, #4
 8009068:	4623      	mov	r3, r4
 800906a:	f853 1b04 	ldr.w	r1, [r3], #4
 800906e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009072:	429f      	cmp	r7, r3
 8009074:	d2f9      	bcs.n	800906a <__hexnan+0xaa>
 8009076:	1b3b      	subs	r3, r7, r4
 8009078:	f023 0303 	bic.w	r3, r3, #3
 800907c:	3304      	adds	r3, #4
 800907e:	3401      	adds	r4, #1
 8009080:	3e03      	subs	r6, #3
 8009082:	42b4      	cmp	r4, r6
 8009084:	bf88      	it	hi
 8009086:	2304      	movhi	r3, #4
 8009088:	4443      	add	r3, r8
 800908a:	2200      	movs	r2, #0
 800908c:	f843 2b04 	str.w	r2, [r3], #4
 8009090:	429f      	cmp	r7, r3
 8009092:	d2fb      	bcs.n	800908c <__hexnan+0xcc>
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	b91b      	cbnz	r3, 80090a0 <__hexnan+0xe0>
 8009098:	4547      	cmp	r7, r8
 800909a:	d128      	bne.n	80090ee <__hexnan+0x12e>
 800909c:	2301      	movs	r3, #1
 800909e:	603b      	str	r3, [r7, #0]
 80090a0:	2005      	movs	r0, #5
 80090a2:	b007      	add	sp, #28
 80090a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a8:	3501      	adds	r5, #1
 80090aa:	2d08      	cmp	r5, #8
 80090ac:	f10b 0b01 	add.w	fp, fp, #1
 80090b0:	dd06      	ble.n	80090c0 <__hexnan+0x100>
 80090b2:	4544      	cmp	r4, r8
 80090b4:	d9c1      	bls.n	800903a <__hexnan+0x7a>
 80090b6:	2300      	movs	r3, #0
 80090b8:	f844 3c04 	str.w	r3, [r4, #-4]
 80090bc:	2501      	movs	r5, #1
 80090be:	3c04      	subs	r4, #4
 80090c0:	6822      	ldr	r2, [r4, #0]
 80090c2:	f000 000f 	and.w	r0, r0, #15
 80090c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80090ca:	6020      	str	r0, [r4, #0]
 80090cc:	e7b5      	b.n	800903a <__hexnan+0x7a>
 80090ce:	2508      	movs	r5, #8
 80090d0:	e7b3      	b.n	800903a <__hexnan+0x7a>
 80090d2:	9b01      	ldr	r3, [sp, #4]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d0dd      	beq.n	8009094 <__hexnan+0xd4>
 80090d8:	f1c3 0320 	rsb	r3, r3, #32
 80090dc:	f04f 32ff 	mov.w	r2, #4294967295
 80090e0:	40da      	lsrs	r2, r3
 80090e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80090e6:	4013      	ands	r3, r2
 80090e8:	f846 3c04 	str.w	r3, [r6, #-4]
 80090ec:	e7d2      	b.n	8009094 <__hexnan+0xd4>
 80090ee:	3f04      	subs	r7, #4
 80090f0:	e7d0      	b.n	8009094 <__hexnan+0xd4>
 80090f2:	2004      	movs	r0, #4
 80090f4:	e7d5      	b.n	80090a2 <__hexnan+0xe2>

080090f6 <__ascii_mbtowc>:
 80090f6:	b082      	sub	sp, #8
 80090f8:	b901      	cbnz	r1, 80090fc <__ascii_mbtowc+0x6>
 80090fa:	a901      	add	r1, sp, #4
 80090fc:	b142      	cbz	r2, 8009110 <__ascii_mbtowc+0x1a>
 80090fe:	b14b      	cbz	r3, 8009114 <__ascii_mbtowc+0x1e>
 8009100:	7813      	ldrb	r3, [r2, #0]
 8009102:	600b      	str	r3, [r1, #0]
 8009104:	7812      	ldrb	r2, [r2, #0]
 8009106:	1e10      	subs	r0, r2, #0
 8009108:	bf18      	it	ne
 800910a:	2001      	movne	r0, #1
 800910c:	b002      	add	sp, #8
 800910e:	4770      	bx	lr
 8009110:	4610      	mov	r0, r2
 8009112:	e7fb      	b.n	800910c <__ascii_mbtowc+0x16>
 8009114:	f06f 0001 	mvn.w	r0, #1
 8009118:	e7f8      	b.n	800910c <__ascii_mbtowc+0x16>

0800911a <_realloc_r>:
 800911a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800911e:	4607      	mov	r7, r0
 8009120:	4614      	mov	r4, r2
 8009122:	460d      	mov	r5, r1
 8009124:	b921      	cbnz	r1, 8009130 <_realloc_r+0x16>
 8009126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800912a:	4611      	mov	r1, r2
 800912c:	f7fd beb6 	b.w	8006e9c <_malloc_r>
 8009130:	b92a      	cbnz	r2, 800913e <_realloc_r+0x24>
 8009132:	f7fd fe3f 	bl	8006db4 <_free_r>
 8009136:	4625      	mov	r5, r4
 8009138:	4628      	mov	r0, r5
 800913a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800913e:	f000 f840 	bl	80091c2 <_malloc_usable_size_r>
 8009142:	4284      	cmp	r4, r0
 8009144:	4606      	mov	r6, r0
 8009146:	d802      	bhi.n	800914e <_realloc_r+0x34>
 8009148:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800914c:	d8f4      	bhi.n	8009138 <_realloc_r+0x1e>
 800914e:	4621      	mov	r1, r4
 8009150:	4638      	mov	r0, r7
 8009152:	f7fd fea3 	bl	8006e9c <_malloc_r>
 8009156:	4680      	mov	r8, r0
 8009158:	b908      	cbnz	r0, 800915e <_realloc_r+0x44>
 800915a:	4645      	mov	r5, r8
 800915c:	e7ec      	b.n	8009138 <_realloc_r+0x1e>
 800915e:	42b4      	cmp	r4, r6
 8009160:	4622      	mov	r2, r4
 8009162:	4629      	mov	r1, r5
 8009164:	bf28      	it	cs
 8009166:	4632      	movcs	r2, r6
 8009168:	f7ff fc42 	bl	80089f0 <memcpy>
 800916c:	4629      	mov	r1, r5
 800916e:	4638      	mov	r0, r7
 8009170:	f7fd fe20 	bl	8006db4 <_free_r>
 8009174:	e7f1      	b.n	800915a <_realloc_r+0x40>

08009176 <__ascii_wctomb>:
 8009176:	4603      	mov	r3, r0
 8009178:	4608      	mov	r0, r1
 800917a:	b141      	cbz	r1, 800918e <__ascii_wctomb+0x18>
 800917c:	2aff      	cmp	r2, #255	@ 0xff
 800917e:	d904      	bls.n	800918a <__ascii_wctomb+0x14>
 8009180:	228a      	movs	r2, #138	@ 0x8a
 8009182:	601a      	str	r2, [r3, #0]
 8009184:	f04f 30ff 	mov.w	r0, #4294967295
 8009188:	4770      	bx	lr
 800918a:	700a      	strb	r2, [r1, #0]
 800918c:	2001      	movs	r0, #1
 800918e:	4770      	bx	lr

08009190 <fiprintf>:
 8009190:	b40e      	push	{r1, r2, r3}
 8009192:	b503      	push	{r0, r1, lr}
 8009194:	4601      	mov	r1, r0
 8009196:	ab03      	add	r3, sp, #12
 8009198:	4805      	ldr	r0, [pc, #20]	@ (80091b0 <fiprintf+0x20>)
 800919a:	f853 2b04 	ldr.w	r2, [r3], #4
 800919e:	6800      	ldr	r0, [r0, #0]
 80091a0:	9301      	str	r3, [sp, #4]
 80091a2:	f000 f83f 	bl	8009224 <_vfiprintf_r>
 80091a6:	b002      	add	sp, #8
 80091a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80091ac:	b003      	add	sp, #12
 80091ae:	4770      	bx	lr
 80091b0:	24000234 	.word	0x24000234

080091b4 <abort>:
 80091b4:	b508      	push	{r3, lr}
 80091b6:	2006      	movs	r0, #6
 80091b8:	f000 fa08 	bl	80095cc <raise>
 80091bc:	2001      	movs	r0, #1
 80091be:	f7f8 f87c 	bl	80012ba <_exit>

080091c2 <_malloc_usable_size_r>:
 80091c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091c6:	1f18      	subs	r0, r3, #4
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	bfbc      	itt	lt
 80091cc:	580b      	ldrlt	r3, [r1, r0]
 80091ce:	18c0      	addlt	r0, r0, r3
 80091d0:	4770      	bx	lr

080091d2 <__sfputc_r>:
 80091d2:	6893      	ldr	r3, [r2, #8]
 80091d4:	3b01      	subs	r3, #1
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	b410      	push	{r4}
 80091da:	6093      	str	r3, [r2, #8]
 80091dc:	da08      	bge.n	80091f0 <__sfputc_r+0x1e>
 80091de:	6994      	ldr	r4, [r2, #24]
 80091e0:	42a3      	cmp	r3, r4
 80091e2:	db01      	blt.n	80091e8 <__sfputc_r+0x16>
 80091e4:	290a      	cmp	r1, #10
 80091e6:	d103      	bne.n	80091f0 <__sfputc_r+0x1e>
 80091e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091ec:	f000 b932 	b.w	8009454 <__swbuf_r>
 80091f0:	6813      	ldr	r3, [r2, #0]
 80091f2:	1c58      	adds	r0, r3, #1
 80091f4:	6010      	str	r0, [r2, #0]
 80091f6:	7019      	strb	r1, [r3, #0]
 80091f8:	4608      	mov	r0, r1
 80091fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <__sfputs_r>:
 8009200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009202:	4606      	mov	r6, r0
 8009204:	460f      	mov	r7, r1
 8009206:	4614      	mov	r4, r2
 8009208:	18d5      	adds	r5, r2, r3
 800920a:	42ac      	cmp	r4, r5
 800920c:	d101      	bne.n	8009212 <__sfputs_r+0x12>
 800920e:	2000      	movs	r0, #0
 8009210:	e007      	b.n	8009222 <__sfputs_r+0x22>
 8009212:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009216:	463a      	mov	r2, r7
 8009218:	4630      	mov	r0, r6
 800921a:	f7ff ffda 	bl	80091d2 <__sfputc_r>
 800921e:	1c43      	adds	r3, r0, #1
 8009220:	d1f3      	bne.n	800920a <__sfputs_r+0xa>
 8009222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009224 <_vfiprintf_r>:
 8009224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009228:	460d      	mov	r5, r1
 800922a:	b09d      	sub	sp, #116	@ 0x74
 800922c:	4614      	mov	r4, r2
 800922e:	4698      	mov	r8, r3
 8009230:	4606      	mov	r6, r0
 8009232:	b118      	cbz	r0, 800923c <_vfiprintf_r+0x18>
 8009234:	6a03      	ldr	r3, [r0, #32]
 8009236:	b90b      	cbnz	r3, 800923c <_vfiprintf_r+0x18>
 8009238:	f7fc fe6a 	bl	8005f10 <__sinit>
 800923c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800923e:	07d9      	lsls	r1, r3, #31
 8009240:	d405      	bmi.n	800924e <_vfiprintf_r+0x2a>
 8009242:	89ab      	ldrh	r3, [r5, #12]
 8009244:	059a      	lsls	r2, r3, #22
 8009246:	d402      	bmi.n	800924e <_vfiprintf_r+0x2a>
 8009248:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800924a:	f7fc ffc2 	bl	80061d2 <__retarget_lock_acquire_recursive>
 800924e:	89ab      	ldrh	r3, [r5, #12]
 8009250:	071b      	lsls	r3, r3, #28
 8009252:	d501      	bpl.n	8009258 <_vfiprintf_r+0x34>
 8009254:	692b      	ldr	r3, [r5, #16]
 8009256:	b99b      	cbnz	r3, 8009280 <_vfiprintf_r+0x5c>
 8009258:	4629      	mov	r1, r5
 800925a:	4630      	mov	r0, r6
 800925c:	f000 f938 	bl	80094d0 <__swsetup_r>
 8009260:	b170      	cbz	r0, 8009280 <_vfiprintf_r+0x5c>
 8009262:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009264:	07dc      	lsls	r4, r3, #31
 8009266:	d504      	bpl.n	8009272 <_vfiprintf_r+0x4e>
 8009268:	f04f 30ff 	mov.w	r0, #4294967295
 800926c:	b01d      	add	sp, #116	@ 0x74
 800926e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009272:	89ab      	ldrh	r3, [r5, #12]
 8009274:	0598      	lsls	r0, r3, #22
 8009276:	d4f7      	bmi.n	8009268 <_vfiprintf_r+0x44>
 8009278:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800927a:	f7fc ffab 	bl	80061d4 <__retarget_lock_release_recursive>
 800927e:	e7f3      	b.n	8009268 <_vfiprintf_r+0x44>
 8009280:	2300      	movs	r3, #0
 8009282:	9309      	str	r3, [sp, #36]	@ 0x24
 8009284:	2320      	movs	r3, #32
 8009286:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800928a:	f8cd 800c 	str.w	r8, [sp, #12]
 800928e:	2330      	movs	r3, #48	@ 0x30
 8009290:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009440 <_vfiprintf_r+0x21c>
 8009294:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009298:	f04f 0901 	mov.w	r9, #1
 800929c:	4623      	mov	r3, r4
 800929e:	469a      	mov	sl, r3
 80092a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092a4:	b10a      	cbz	r2, 80092aa <_vfiprintf_r+0x86>
 80092a6:	2a25      	cmp	r2, #37	@ 0x25
 80092a8:	d1f9      	bne.n	800929e <_vfiprintf_r+0x7a>
 80092aa:	ebba 0b04 	subs.w	fp, sl, r4
 80092ae:	d00b      	beq.n	80092c8 <_vfiprintf_r+0xa4>
 80092b0:	465b      	mov	r3, fp
 80092b2:	4622      	mov	r2, r4
 80092b4:	4629      	mov	r1, r5
 80092b6:	4630      	mov	r0, r6
 80092b8:	f7ff ffa2 	bl	8009200 <__sfputs_r>
 80092bc:	3001      	adds	r0, #1
 80092be:	f000 80a7 	beq.w	8009410 <_vfiprintf_r+0x1ec>
 80092c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092c4:	445a      	add	r2, fp
 80092c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80092c8:	f89a 3000 	ldrb.w	r3, [sl]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	f000 809f 	beq.w	8009410 <_vfiprintf_r+0x1ec>
 80092d2:	2300      	movs	r3, #0
 80092d4:	f04f 32ff 	mov.w	r2, #4294967295
 80092d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092dc:	f10a 0a01 	add.w	sl, sl, #1
 80092e0:	9304      	str	r3, [sp, #16]
 80092e2:	9307      	str	r3, [sp, #28]
 80092e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80092e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80092ea:	4654      	mov	r4, sl
 80092ec:	2205      	movs	r2, #5
 80092ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092f2:	4853      	ldr	r0, [pc, #332]	@ (8009440 <_vfiprintf_r+0x21c>)
 80092f4:	f7f6 fff4 	bl	80002e0 <memchr>
 80092f8:	9a04      	ldr	r2, [sp, #16]
 80092fa:	b9d8      	cbnz	r0, 8009334 <_vfiprintf_r+0x110>
 80092fc:	06d1      	lsls	r1, r2, #27
 80092fe:	bf44      	itt	mi
 8009300:	2320      	movmi	r3, #32
 8009302:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009306:	0713      	lsls	r3, r2, #28
 8009308:	bf44      	itt	mi
 800930a:	232b      	movmi	r3, #43	@ 0x2b
 800930c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009310:	f89a 3000 	ldrb.w	r3, [sl]
 8009314:	2b2a      	cmp	r3, #42	@ 0x2a
 8009316:	d015      	beq.n	8009344 <_vfiprintf_r+0x120>
 8009318:	9a07      	ldr	r2, [sp, #28]
 800931a:	4654      	mov	r4, sl
 800931c:	2000      	movs	r0, #0
 800931e:	f04f 0c0a 	mov.w	ip, #10
 8009322:	4621      	mov	r1, r4
 8009324:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009328:	3b30      	subs	r3, #48	@ 0x30
 800932a:	2b09      	cmp	r3, #9
 800932c:	d94b      	bls.n	80093c6 <_vfiprintf_r+0x1a2>
 800932e:	b1b0      	cbz	r0, 800935e <_vfiprintf_r+0x13a>
 8009330:	9207      	str	r2, [sp, #28]
 8009332:	e014      	b.n	800935e <_vfiprintf_r+0x13a>
 8009334:	eba0 0308 	sub.w	r3, r0, r8
 8009338:	fa09 f303 	lsl.w	r3, r9, r3
 800933c:	4313      	orrs	r3, r2
 800933e:	9304      	str	r3, [sp, #16]
 8009340:	46a2      	mov	sl, r4
 8009342:	e7d2      	b.n	80092ea <_vfiprintf_r+0xc6>
 8009344:	9b03      	ldr	r3, [sp, #12]
 8009346:	1d19      	adds	r1, r3, #4
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	9103      	str	r1, [sp, #12]
 800934c:	2b00      	cmp	r3, #0
 800934e:	bfbb      	ittet	lt
 8009350:	425b      	neglt	r3, r3
 8009352:	f042 0202 	orrlt.w	r2, r2, #2
 8009356:	9307      	strge	r3, [sp, #28]
 8009358:	9307      	strlt	r3, [sp, #28]
 800935a:	bfb8      	it	lt
 800935c:	9204      	strlt	r2, [sp, #16]
 800935e:	7823      	ldrb	r3, [r4, #0]
 8009360:	2b2e      	cmp	r3, #46	@ 0x2e
 8009362:	d10a      	bne.n	800937a <_vfiprintf_r+0x156>
 8009364:	7863      	ldrb	r3, [r4, #1]
 8009366:	2b2a      	cmp	r3, #42	@ 0x2a
 8009368:	d132      	bne.n	80093d0 <_vfiprintf_r+0x1ac>
 800936a:	9b03      	ldr	r3, [sp, #12]
 800936c:	1d1a      	adds	r2, r3, #4
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	9203      	str	r2, [sp, #12]
 8009372:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009376:	3402      	adds	r4, #2
 8009378:	9305      	str	r3, [sp, #20]
 800937a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009450 <_vfiprintf_r+0x22c>
 800937e:	7821      	ldrb	r1, [r4, #0]
 8009380:	2203      	movs	r2, #3
 8009382:	4650      	mov	r0, sl
 8009384:	f7f6 ffac 	bl	80002e0 <memchr>
 8009388:	b138      	cbz	r0, 800939a <_vfiprintf_r+0x176>
 800938a:	9b04      	ldr	r3, [sp, #16]
 800938c:	eba0 000a 	sub.w	r0, r0, sl
 8009390:	2240      	movs	r2, #64	@ 0x40
 8009392:	4082      	lsls	r2, r0
 8009394:	4313      	orrs	r3, r2
 8009396:	3401      	adds	r4, #1
 8009398:	9304      	str	r3, [sp, #16]
 800939a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800939e:	4829      	ldr	r0, [pc, #164]	@ (8009444 <_vfiprintf_r+0x220>)
 80093a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80093a4:	2206      	movs	r2, #6
 80093a6:	f7f6 ff9b 	bl	80002e0 <memchr>
 80093aa:	2800      	cmp	r0, #0
 80093ac:	d03f      	beq.n	800942e <_vfiprintf_r+0x20a>
 80093ae:	4b26      	ldr	r3, [pc, #152]	@ (8009448 <_vfiprintf_r+0x224>)
 80093b0:	bb1b      	cbnz	r3, 80093fa <_vfiprintf_r+0x1d6>
 80093b2:	9b03      	ldr	r3, [sp, #12]
 80093b4:	3307      	adds	r3, #7
 80093b6:	f023 0307 	bic.w	r3, r3, #7
 80093ba:	3308      	adds	r3, #8
 80093bc:	9303      	str	r3, [sp, #12]
 80093be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093c0:	443b      	add	r3, r7
 80093c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80093c4:	e76a      	b.n	800929c <_vfiprintf_r+0x78>
 80093c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80093ca:	460c      	mov	r4, r1
 80093cc:	2001      	movs	r0, #1
 80093ce:	e7a8      	b.n	8009322 <_vfiprintf_r+0xfe>
 80093d0:	2300      	movs	r3, #0
 80093d2:	3401      	adds	r4, #1
 80093d4:	9305      	str	r3, [sp, #20]
 80093d6:	4619      	mov	r1, r3
 80093d8:	f04f 0c0a 	mov.w	ip, #10
 80093dc:	4620      	mov	r0, r4
 80093de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093e2:	3a30      	subs	r2, #48	@ 0x30
 80093e4:	2a09      	cmp	r2, #9
 80093e6:	d903      	bls.n	80093f0 <_vfiprintf_r+0x1cc>
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d0c6      	beq.n	800937a <_vfiprintf_r+0x156>
 80093ec:	9105      	str	r1, [sp, #20]
 80093ee:	e7c4      	b.n	800937a <_vfiprintf_r+0x156>
 80093f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80093f4:	4604      	mov	r4, r0
 80093f6:	2301      	movs	r3, #1
 80093f8:	e7f0      	b.n	80093dc <_vfiprintf_r+0x1b8>
 80093fa:	ab03      	add	r3, sp, #12
 80093fc:	9300      	str	r3, [sp, #0]
 80093fe:	462a      	mov	r2, r5
 8009400:	4b12      	ldr	r3, [pc, #72]	@ (800944c <_vfiprintf_r+0x228>)
 8009402:	a904      	add	r1, sp, #16
 8009404:	4630      	mov	r0, r6
 8009406:	f7fb ff4b 	bl	80052a0 <_printf_float>
 800940a:	4607      	mov	r7, r0
 800940c:	1c78      	adds	r0, r7, #1
 800940e:	d1d6      	bne.n	80093be <_vfiprintf_r+0x19a>
 8009410:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009412:	07d9      	lsls	r1, r3, #31
 8009414:	d405      	bmi.n	8009422 <_vfiprintf_r+0x1fe>
 8009416:	89ab      	ldrh	r3, [r5, #12]
 8009418:	059a      	lsls	r2, r3, #22
 800941a:	d402      	bmi.n	8009422 <_vfiprintf_r+0x1fe>
 800941c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800941e:	f7fc fed9 	bl	80061d4 <__retarget_lock_release_recursive>
 8009422:	89ab      	ldrh	r3, [r5, #12]
 8009424:	065b      	lsls	r3, r3, #25
 8009426:	f53f af1f 	bmi.w	8009268 <_vfiprintf_r+0x44>
 800942a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800942c:	e71e      	b.n	800926c <_vfiprintf_r+0x48>
 800942e:	ab03      	add	r3, sp, #12
 8009430:	9300      	str	r3, [sp, #0]
 8009432:	462a      	mov	r2, r5
 8009434:	4b05      	ldr	r3, [pc, #20]	@ (800944c <_vfiprintf_r+0x228>)
 8009436:	a904      	add	r1, sp, #16
 8009438:	4630      	mov	r0, r6
 800943a:	f7fc f9b9 	bl	80057b0 <_printf_i>
 800943e:	e7e4      	b.n	800940a <_vfiprintf_r+0x1e6>
 8009440:	08009931 	.word	0x08009931
 8009444:	0800993b 	.word	0x0800993b
 8009448:	080052a1 	.word	0x080052a1
 800944c:	08009201 	.word	0x08009201
 8009450:	08009937 	.word	0x08009937

08009454 <__swbuf_r>:
 8009454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009456:	460e      	mov	r6, r1
 8009458:	4614      	mov	r4, r2
 800945a:	4605      	mov	r5, r0
 800945c:	b118      	cbz	r0, 8009466 <__swbuf_r+0x12>
 800945e:	6a03      	ldr	r3, [r0, #32]
 8009460:	b90b      	cbnz	r3, 8009466 <__swbuf_r+0x12>
 8009462:	f7fc fd55 	bl	8005f10 <__sinit>
 8009466:	69a3      	ldr	r3, [r4, #24]
 8009468:	60a3      	str	r3, [r4, #8]
 800946a:	89a3      	ldrh	r3, [r4, #12]
 800946c:	071a      	lsls	r2, r3, #28
 800946e:	d501      	bpl.n	8009474 <__swbuf_r+0x20>
 8009470:	6923      	ldr	r3, [r4, #16]
 8009472:	b943      	cbnz	r3, 8009486 <__swbuf_r+0x32>
 8009474:	4621      	mov	r1, r4
 8009476:	4628      	mov	r0, r5
 8009478:	f000 f82a 	bl	80094d0 <__swsetup_r>
 800947c:	b118      	cbz	r0, 8009486 <__swbuf_r+0x32>
 800947e:	f04f 37ff 	mov.w	r7, #4294967295
 8009482:	4638      	mov	r0, r7
 8009484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009486:	6823      	ldr	r3, [r4, #0]
 8009488:	6922      	ldr	r2, [r4, #16]
 800948a:	1a98      	subs	r0, r3, r2
 800948c:	6963      	ldr	r3, [r4, #20]
 800948e:	b2f6      	uxtb	r6, r6
 8009490:	4283      	cmp	r3, r0
 8009492:	4637      	mov	r7, r6
 8009494:	dc05      	bgt.n	80094a2 <__swbuf_r+0x4e>
 8009496:	4621      	mov	r1, r4
 8009498:	4628      	mov	r0, r5
 800949a:	f7ff fa45 	bl	8008928 <_fflush_r>
 800949e:	2800      	cmp	r0, #0
 80094a0:	d1ed      	bne.n	800947e <__swbuf_r+0x2a>
 80094a2:	68a3      	ldr	r3, [r4, #8]
 80094a4:	3b01      	subs	r3, #1
 80094a6:	60a3      	str	r3, [r4, #8]
 80094a8:	6823      	ldr	r3, [r4, #0]
 80094aa:	1c5a      	adds	r2, r3, #1
 80094ac:	6022      	str	r2, [r4, #0]
 80094ae:	701e      	strb	r6, [r3, #0]
 80094b0:	6962      	ldr	r2, [r4, #20]
 80094b2:	1c43      	adds	r3, r0, #1
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d004      	beq.n	80094c2 <__swbuf_r+0x6e>
 80094b8:	89a3      	ldrh	r3, [r4, #12]
 80094ba:	07db      	lsls	r3, r3, #31
 80094bc:	d5e1      	bpl.n	8009482 <__swbuf_r+0x2e>
 80094be:	2e0a      	cmp	r6, #10
 80094c0:	d1df      	bne.n	8009482 <__swbuf_r+0x2e>
 80094c2:	4621      	mov	r1, r4
 80094c4:	4628      	mov	r0, r5
 80094c6:	f7ff fa2f 	bl	8008928 <_fflush_r>
 80094ca:	2800      	cmp	r0, #0
 80094cc:	d0d9      	beq.n	8009482 <__swbuf_r+0x2e>
 80094ce:	e7d6      	b.n	800947e <__swbuf_r+0x2a>

080094d0 <__swsetup_r>:
 80094d0:	b538      	push	{r3, r4, r5, lr}
 80094d2:	4b29      	ldr	r3, [pc, #164]	@ (8009578 <__swsetup_r+0xa8>)
 80094d4:	4605      	mov	r5, r0
 80094d6:	6818      	ldr	r0, [r3, #0]
 80094d8:	460c      	mov	r4, r1
 80094da:	b118      	cbz	r0, 80094e4 <__swsetup_r+0x14>
 80094dc:	6a03      	ldr	r3, [r0, #32]
 80094de:	b90b      	cbnz	r3, 80094e4 <__swsetup_r+0x14>
 80094e0:	f7fc fd16 	bl	8005f10 <__sinit>
 80094e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094e8:	0719      	lsls	r1, r3, #28
 80094ea:	d422      	bmi.n	8009532 <__swsetup_r+0x62>
 80094ec:	06da      	lsls	r2, r3, #27
 80094ee:	d407      	bmi.n	8009500 <__swsetup_r+0x30>
 80094f0:	2209      	movs	r2, #9
 80094f2:	602a      	str	r2, [r5, #0]
 80094f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094f8:	81a3      	strh	r3, [r4, #12]
 80094fa:	f04f 30ff 	mov.w	r0, #4294967295
 80094fe:	e033      	b.n	8009568 <__swsetup_r+0x98>
 8009500:	0758      	lsls	r0, r3, #29
 8009502:	d512      	bpl.n	800952a <__swsetup_r+0x5a>
 8009504:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009506:	b141      	cbz	r1, 800951a <__swsetup_r+0x4a>
 8009508:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800950c:	4299      	cmp	r1, r3
 800950e:	d002      	beq.n	8009516 <__swsetup_r+0x46>
 8009510:	4628      	mov	r0, r5
 8009512:	f7fd fc4f 	bl	8006db4 <_free_r>
 8009516:	2300      	movs	r3, #0
 8009518:	6363      	str	r3, [r4, #52]	@ 0x34
 800951a:	89a3      	ldrh	r3, [r4, #12]
 800951c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009520:	81a3      	strh	r3, [r4, #12]
 8009522:	2300      	movs	r3, #0
 8009524:	6063      	str	r3, [r4, #4]
 8009526:	6923      	ldr	r3, [r4, #16]
 8009528:	6023      	str	r3, [r4, #0]
 800952a:	89a3      	ldrh	r3, [r4, #12]
 800952c:	f043 0308 	orr.w	r3, r3, #8
 8009530:	81a3      	strh	r3, [r4, #12]
 8009532:	6923      	ldr	r3, [r4, #16]
 8009534:	b94b      	cbnz	r3, 800954a <__swsetup_r+0x7a>
 8009536:	89a3      	ldrh	r3, [r4, #12]
 8009538:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800953c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009540:	d003      	beq.n	800954a <__swsetup_r+0x7a>
 8009542:	4621      	mov	r1, r4
 8009544:	4628      	mov	r0, r5
 8009546:	f000 f883 	bl	8009650 <__smakebuf_r>
 800954a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800954e:	f013 0201 	ands.w	r2, r3, #1
 8009552:	d00a      	beq.n	800956a <__swsetup_r+0x9a>
 8009554:	2200      	movs	r2, #0
 8009556:	60a2      	str	r2, [r4, #8]
 8009558:	6962      	ldr	r2, [r4, #20]
 800955a:	4252      	negs	r2, r2
 800955c:	61a2      	str	r2, [r4, #24]
 800955e:	6922      	ldr	r2, [r4, #16]
 8009560:	b942      	cbnz	r2, 8009574 <__swsetup_r+0xa4>
 8009562:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009566:	d1c5      	bne.n	80094f4 <__swsetup_r+0x24>
 8009568:	bd38      	pop	{r3, r4, r5, pc}
 800956a:	0799      	lsls	r1, r3, #30
 800956c:	bf58      	it	pl
 800956e:	6962      	ldrpl	r2, [r4, #20]
 8009570:	60a2      	str	r2, [r4, #8]
 8009572:	e7f4      	b.n	800955e <__swsetup_r+0x8e>
 8009574:	2000      	movs	r0, #0
 8009576:	e7f7      	b.n	8009568 <__swsetup_r+0x98>
 8009578:	24000234 	.word	0x24000234

0800957c <_raise_r>:
 800957c:	291f      	cmp	r1, #31
 800957e:	b538      	push	{r3, r4, r5, lr}
 8009580:	4605      	mov	r5, r0
 8009582:	460c      	mov	r4, r1
 8009584:	d904      	bls.n	8009590 <_raise_r+0x14>
 8009586:	2316      	movs	r3, #22
 8009588:	6003      	str	r3, [r0, #0]
 800958a:	f04f 30ff 	mov.w	r0, #4294967295
 800958e:	bd38      	pop	{r3, r4, r5, pc}
 8009590:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009592:	b112      	cbz	r2, 800959a <_raise_r+0x1e>
 8009594:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009598:	b94b      	cbnz	r3, 80095ae <_raise_r+0x32>
 800959a:	4628      	mov	r0, r5
 800959c:	f000 f830 	bl	8009600 <_getpid_r>
 80095a0:	4622      	mov	r2, r4
 80095a2:	4601      	mov	r1, r0
 80095a4:	4628      	mov	r0, r5
 80095a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095aa:	f000 b817 	b.w	80095dc <_kill_r>
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d00a      	beq.n	80095c8 <_raise_r+0x4c>
 80095b2:	1c59      	adds	r1, r3, #1
 80095b4:	d103      	bne.n	80095be <_raise_r+0x42>
 80095b6:	2316      	movs	r3, #22
 80095b8:	6003      	str	r3, [r0, #0]
 80095ba:	2001      	movs	r0, #1
 80095bc:	e7e7      	b.n	800958e <_raise_r+0x12>
 80095be:	2100      	movs	r1, #0
 80095c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80095c4:	4620      	mov	r0, r4
 80095c6:	4798      	blx	r3
 80095c8:	2000      	movs	r0, #0
 80095ca:	e7e0      	b.n	800958e <_raise_r+0x12>

080095cc <raise>:
 80095cc:	4b02      	ldr	r3, [pc, #8]	@ (80095d8 <raise+0xc>)
 80095ce:	4601      	mov	r1, r0
 80095d0:	6818      	ldr	r0, [r3, #0]
 80095d2:	f7ff bfd3 	b.w	800957c <_raise_r>
 80095d6:	bf00      	nop
 80095d8:	24000234 	.word	0x24000234

080095dc <_kill_r>:
 80095dc:	b538      	push	{r3, r4, r5, lr}
 80095de:	4d07      	ldr	r5, [pc, #28]	@ (80095fc <_kill_r+0x20>)
 80095e0:	2300      	movs	r3, #0
 80095e2:	4604      	mov	r4, r0
 80095e4:	4608      	mov	r0, r1
 80095e6:	4611      	mov	r1, r2
 80095e8:	602b      	str	r3, [r5, #0]
 80095ea:	f7f7 fe56 	bl	800129a <_kill>
 80095ee:	1c43      	adds	r3, r0, #1
 80095f0:	d102      	bne.n	80095f8 <_kill_r+0x1c>
 80095f2:	682b      	ldr	r3, [r5, #0]
 80095f4:	b103      	cbz	r3, 80095f8 <_kill_r+0x1c>
 80095f6:	6023      	str	r3, [r4, #0]
 80095f8:	bd38      	pop	{r3, r4, r5, pc}
 80095fa:	bf00      	nop
 80095fc:	240009fc 	.word	0x240009fc

08009600 <_getpid_r>:
 8009600:	f7f7 be43 	b.w	800128a <_getpid>

08009604 <__swhatbuf_r>:
 8009604:	b570      	push	{r4, r5, r6, lr}
 8009606:	460c      	mov	r4, r1
 8009608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800960c:	2900      	cmp	r1, #0
 800960e:	b096      	sub	sp, #88	@ 0x58
 8009610:	4615      	mov	r5, r2
 8009612:	461e      	mov	r6, r3
 8009614:	da0d      	bge.n	8009632 <__swhatbuf_r+0x2e>
 8009616:	89a3      	ldrh	r3, [r4, #12]
 8009618:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800961c:	f04f 0100 	mov.w	r1, #0
 8009620:	bf14      	ite	ne
 8009622:	2340      	movne	r3, #64	@ 0x40
 8009624:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009628:	2000      	movs	r0, #0
 800962a:	6031      	str	r1, [r6, #0]
 800962c:	602b      	str	r3, [r5, #0]
 800962e:	b016      	add	sp, #88	@ 0x58
 8009630:	bd70      	pop	{r4, r5, r6, pc}
 8009632:	466a      	mov	r2, sp
 8009634:	f000 f848 	bl	80096c8 <_fstat_r>
 8009638:	2800      	cmp	r0, #0
 800963a:	dbec      	blt.n	8009616 <__swhatbuf_r+0x12>
 800963c:	9901      	ldr	r1, [sp, #4]
 800963e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009642:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009646:	4259      	negs	r1, r3
 8009648:	4159      	adcs	r1, r3
 800964a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800964e:	e7eb      	b.n	8009628 <__swhatbuf_r+0x24>

08009650 <__smakebuf_r>:
 8009650:	898b      	ldrh	r3, [r1, #12]
 8009652:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009654:	079d      	lsls	r5, r3, #30
 8009656:	4606      	mov	r6, r0
 8009658:	460c      	mov	r4, r1
 800965a:	d507      	bpl.n	800966c <__smakebuf_r+0x1c>
 800965c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009660:	6023      	str	r3, [r4, #0]
 8009662:	6123      	str	r3, [r4, #16]
 8009664:	2301      	movs	r3, #1
 8009666:	6163      	str	r3, [r4, #20]
 8009668:	b003      	add	sp, #12
 800966a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800966c:	ab01      	add	r3, sp, #4
 800966e:	466a      	mov	r2, sp
 8009670:	f7ff ffc8 	bl	8009604 <__swhatbuf_r>
 8009674:	9f00      	ldr	r7, [sp, #0]
 8009676:	4605      	mov	r5, r0
 8009678:	4639      	mov	r1, r7
 800967a:	4630      	mov	r0, r6
 800967c:	f7fd fc0e 	bl	8006e9c <_malloc_r>
 8009680:	b948      	cbnz	r0, 8009696 <__smakebuf_r+0x46>
 8009682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009686:	059a      	lsls	r2, r3, #22
 8009688:	d4ee      	bmi.n	8009668 <__smakebuf_r+0x18>
 800968a:	f023 0303 	bic.w	r3, r3, #3
 800968e:	f043 0302 	orr.w	r3, r3, #2
 8009692:	81a3      	strh	r3, [r4, #12]
 8009694:	e7e2      	b.n	800965c <__smakebuf_r+0xc>
 8009696:	89a3      	ldrh	r3, [r4, #12]
 8009698:	6020      	str	r0, [r4, #0]
 800969a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800969e:	81a3      	strh	r3, [r4, #12]
 80096a0:	9b01      	ldr	r3, [sp, #4]
 80096a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80096a6:	b15b      	cbz	r3, 80096c0 <__smakebuf_r+0x70>
 80096a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096ac:	4630      	mov	r0, r6
 80096ae:	f000 f81d 	bl	80096ec <_isatty_r>
 80096b2:	b128      	cbz	r0, 80096c0 <__smakebuf_r+0x70>
 80096b4:	89a3      	ldrh	r3, [r4, #12]
 80096b6:	f023 0303 	bic.w	r3, r3, #3
 80096ba:	f043 0301 	orr.w	r3, r3, #1
 80096be:	81a3      	strh	r3, [r4, #12]
 80096c0:	89a3      	ldrh	r3, [r4, #12]
 80096c2:	431d      	orrs	r5, r3
 80096c4:	81a5      	strh	r5, [r4, #12]
 80096c6:	e7cf      	b.n	8009668 <__smakebuf_r+0x18>

080096c8 <_fstat_r>:
 80096c8:	b538      	push	{r3, r4, r5, lr}
 80096ca:	4d07      	ldr	r5, [pc, #28]	@ (80096e8 <_fstat_r+0x20>)
 80096cc:	2300      	movs	r3, #0
 80096ce:	4604      	mov	r4, r0
 80096d0:	4608      	mov	r0, r1
 80096d2:	4611      	mov	r1, r2
 80096d4:	602b      	str	r3, [r5, #0]
 80096d6:	f7f7 fe40 	bl	800135a <_fstat>
 80096da:	1c43      	adds	r3, r0, #1
 80096dc:	d102      	bne.n	80096e4 <_fstat_r+0x1c>
 80096de:	682b      	ldr	r3, [r5, #0]
 80096e0:	b103      	cbz	r3, 80096e4 <_fstat_r+0x1c>
 80096e2:	6023      	str	r3, [r4, #0]
 80096e4:	bd38      	pop	{r3, r4, r5, pc}
 80096e6:	bf00      	nop
 80096e8:	240009fc 	.word	0x240009fc

080096ec <_isatty_r>:
 80096ec:	b538      	push	{r3, r4, r5, lr}
 80096ee:	4d06      	ldr	r5, [pc, #24]	@ (8009708 <_isatty_r+0x1c>)
 80096f0:	2300      	movs	r3, #0
 80096f2:	4604      	mov	r4, r0
 80096f4:	4608      	mov	r0, r1
 80096f6:	602b      	str	r3, [r5, #0]
 80096f8:	f7f7 fe3f 	bl	800137a <_isatty>
 80096fc:	1c43      	adds	r3, r0, #1
 80096fe:	d102      	bne.n	8009706 <_isatty_r+0x1a>
 8009700:	682b      	ldr	r3, [r5, #0]
 8009702:	b103      	cbz	r3, 8009706 <_isatty_r+0x1a>
 8009704:	6023      	str	r3, [r4, #0]
 8009706:	bd38      	pop	{r3, r4, r5, pc}
 8009708:	240009fc 	.word	0x240009fc

0800970c <_init>:
 800970c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970e:	bf00      	nop
 8009710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009712:	bc08      	pop	{r3}
 8009714:	469e      	mov	lr, r3
 8009716:	4770      	bx	lr

08009718 <_fini>:
 8009718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800971a:	bf00      	nop
 800971c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800971e:	bc08      	pop	{r3}
 8009720:	469e      	mov	lr, r3
 8009722:	4770      	bx	lr
